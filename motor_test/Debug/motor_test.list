
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000338  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  0001044c  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  0001044c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  0800044c  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800044c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800044c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001044c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000391  00000000  00000000  00010475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000108  00000000  00000000  00010806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00010910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  00010968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe44  00000000  00000000  000109a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000059b  00000000  00000000  000207ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053c93  00000000  00000000  00020d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074a1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  00074a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	0800042c 	.word	0x0800042c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	0800042c 	.word	0x0800042c

0800014c <delay>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "stm32f103xb.h"
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i < 2000000; i++){}
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e002      	b.n	800015e <delay+0x12>
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	3301      	adds	r3, #1
 800015c:	607b      	str	r3, [r7, #4]
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	4a04      	ldr	r2, [pc, #16]	; (8000174 <delay+0x28>)
 8000162:	4293      	cmp	r3, r2
 8000164:	d9f8      	bls.n	8000158 <delay+0xc>
}
 8000166:	bf00      	nop
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	001e847f 	.word	0x001e847f

08000178 <setupRCCTo72MHz>:

void setupRCCTo72MHz(){
 8000178:	b480      	push	{r7}
 800017a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON; // turn on ext. clock
 800017c:	4b16      	ldr	r3, [pc, #88]	; (80001d8 <setupRCCTo72MHz+0x60>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <setupRCCTo72MHz+0x60>)
 8000182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000186:	6013      	str	r3, [r2, #0]
	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000188:	4b13      	ldr	r3, [pc, #76]	; (80001d8 <setupRCCTo72MHz+0x60>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a12      	ldr	r2, [pc, #72]	; (80001d8 <setupRCCTo72MHz+0x60>)
 800018e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000192:	6013      	str	r3, [r2, #0]
	// PLL Source = HSE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000194:	4b10      	ldr	r3, [pc, #64]	; (80001d8 <setupRCCTo72MHz+0x60>)
 8000196:	685b      	ldr	r3, [r3, #4]
 8000198:	4a0f      	ldr	r2, [pc, #60]	; (80001d8 <setupRCCTo72MHz+0x60>)
 800019a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800019e:	6053      	str	r3, [r2, #4]
	// HSE clock isn't divided
	RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 80001a0:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	4a0c      	ldr	r2, [pc, #48]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001a6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80001aa:	6053      	str	r3, [r2, #4]
	//set PLLMUL to 9
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);
 80001ac:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	4a09      	ldr	r2, [pc, #36]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001b2:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001b6:	6053      	str	r3, [r2, #4]
	//set PLL as system clock
	RCC->CFGR |= (RCC_CFGR_SW_1);
 80001b8:	4b07      	ldr	r3, [pc, #28]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4a06      	ldr	r2, [pc, #24]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001be:	f043 0302 	orr.w	r3, r3, #2
 80001c2:	6053      	str	r3, [r2, #4]
	//set APB1 prescaller to 2
	RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <setupRCCTo72MHz+0x60>)
 80001ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001ce:	6053      	str	r3, [r2, #4]

}
 80001d0:	bf00      	nop
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	40021000 	.word	0x40021000

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	// setup RCC
	setupRCCTo72MHz();
 80001e2:	f7ff ffc9 	bl	8000178 <setupRCCTo72MHz>
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // turn on clock on port A
 80001e6:	4b6a      	ldr	r3, [pc, #424]	; (8000390 <main+0x1b4>)
 80001e8:	699b      	ldr	r3, [r3, #24]
 80001ea:	4a69      	ldr	r2, [pc, #420]	; (8000390 <main+0x1b4>)
 80001ec:	f043 0304 	orr.w	r3, r3, #4
 80001f0:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // turn on clock on alternative funcs (interrupts)
 80001f2:	4b67      	ldr	r3, [pc, #412]	; (8000390 <main+0x1b4>)
 80001f4:	699b      	ldr	r3, [r3, #24]
 80001f6:	4a66      	ldr	r2, [pc, #408]	; (8000390 <main+0x1b4>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // turn on clock of timer 1
 80001fe:	4b64      	ldr	r3, [pc, #400]	; (8000390 <main+0x1b4>)
 8000200:	699b      	ldr	r3, [r3, #24]
 8000202:	4a63      	ldr	r2, [pc, #396]	; (8000390 <main+0x1b4>)
 8000204:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000208:	6193      	str	r3, [r2, #24]

	//setup PA8-PA11 to alternative push-pull output with max speed 50 MHz (need for PWM)
	GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8 | GPIO_CRH_MODE9 | GPIO_CRH_CNF9); //reset PA8-PA9
 800020a:	4b62      	ldr	r3, [pc, #392]	; (8000394 <main+0x1b8>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a61      	ldr	r2, [pc, #388]	; (8000394 <main+0x1b8>)
 8000210:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000214:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF11); //reset PA10-PA11
 8000216:	4b5f      	ldr	r3, [pc, #380]	; (8000394 <main+0x1b8>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	4a5e      	ldr	r2, [pc, #376]	; (8000394 <main+0x1b8>)
 800021c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000220:	6053      	str	r3, [r2, #4]

	GPIOA->CRH |= (GPIO_CRH_MODE8_0 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1 ); //alternative push-pull output with max speed 50 MHz
 8000222:	4b5c      	ldr	r3, [pc, #368]	; (8000394 <main+0x1b8>)
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	4a5b      	ldr	r2, [pc, #364]	; (8000394 <main+0x1b8>)
 8000228:	f043 030b 	orr.w	r3, r3, #11
 800022c:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (GPIO_CRH_MODE9_0 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1 ); //alternative push-pull output with max speed 50 MHz
 800022e:	4b59      	ldr	r3, [pc, #356]	; (8000394 <main+0x1b8>)
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	4a58      	ldr	r2, [pc, #352]	; (8000394 <main+0x1b8>)
 8000234:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8000238:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (GPIO_CRH_MODE10_0 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF10_1 ); //alternative push-pull output with max speed 50 MHz
 800023a:	4b56      	ldr	r3, [pc, #344]	; (8000394 <main+0x1b8>)
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	4a55      	ldr	r2, [pc, #340]	; (8000394 <main+0x1b8>)
 8000240:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8000244:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (GPIO_CRH_MODE11_0 | GPIO_CRH_MODE11_1 | GPIO_CRH_CNF11_1 ); //alternative push-pull output with max speed 50 MHz
 8000246:	4b53      	ldr	r3, [pc, #332]	; (8000394 <main+0x1b8>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a52      	ldr	r2, [pc, #328]	; (8000394 <main+0x1b8>)
 800024c:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 8000250:	6053      	str	r3, [r2, #4]

	//general setup of tim1

	TIM1->CR1 &= ~(TIM_CR1_UDIS | TIM_CR1_URS); // not gererate general event or interrupt
 8000252:	4b51      	ldr	r3, [pc, #324]	; (8000398 <main+0x1bc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a50      	ldr	r2, [pc, #320]	; (8000398 <main+0x1bc>)
 8000258:	f023 0306 	bic.w	r3, r3, #6
 800025c:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(TIM_CR1_OPM); //one pulse mode off (Counter will not stop on every update)
 800025e:	4b4e      	ldr	r3, [pc, #312]	; (8000398 <main+0x1bc>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a4d      	ldr	r2, [pc, #308]	; (8000398 <main+0x1bc>)
 8000264:	f023 0308 	bic.w	r3, r3, #8
 8000268:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(TIM_CR1_DIR); //counter used as upcounter
 800026a:	4b4b      	ldr	r3, [pc, #300]	; (8000398 <main+0x1bc>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a4a      	ldr	r2, [pc, #296]	; (8000398 <main+0x1bc>)
 8000270:	f023 0310 	bic.w	r3, r3, #16
 8000274:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(TIM_CR1_CMS); // edge-aligned mode
 8000276:	4b48      	ldr	r3, [pc, #288]	; (8000398 <main+0x1bc>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a47      	ldr	r2, [pc, #284]	; (8000398 <main+0x1bc>)
 800027c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000280:	6013      	str	r3, [r2, #0]
	//TIM1->CR1 |= TIM_CR1_ARPE; //TIM1_ARR register is buffered

	// setup update interrupt
//	TIM1->DIER |= TIM_DIER_UIE; // update interrupt enable
	// setup timer freq
	TIM1->PSC = 4 - 1; // 72Mhz / 4 = 18MHz -> first prescaler
 8000282:	4b45      	ldr	r3, [pc, #276]	; (8000398 <main+0x1bc>)
 8000284:	2203      	movs	r2, #3
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 500 - 1; // 18MHz / 500 = 36kHz -> second prescaler
 8000288:	4b43      	ldr	r3, [pc, #268]	; (8000398 <main+0x1bc>)
 800028a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800028e:	62da      	str	r2, [r3, #44]	; 0x2c



	//setup PWM
	////setup chanels
	TIM1->CCMR1 &= ~(TIM_CCMR1_CC1S); // chanel 1 to output
 8000290:	4b41      	ldr	r3, [pc, #260]	; (8000398 <main+0x1bc>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	4a40      	ldr	r2, [pc, #256]	; (8000398 <main+0x1bc>)
 8000296:	f023 0303 	bic.w	r3, r3, #3
 800029a:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 &= ~(TIM_CCMR1_CC2S); // chanel 2 to output
 800029c:	4b3e      	ldr	r3, [pc, #248]	; (8000398 <main+0x1bc>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a3d      	ldr	r2, [pc, #244]	; (8000398 <main+0x1bc>)
 80002a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002a6:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 &= ~(TIM_CCMR2_CC3S); //chanel 3 to output
 80002a8:	4b3b      	ldr	r3, [pc, #236]	; (8000398 <main+0x1bc>)
 80002aa:	69db      	ldr	r3, [r3, #28]
 80002ac:	4a3a      	ldr	r2, [pc, #232]	; (8000398 <main+0x1bc>)
 80002ae:	f023 0303 	bic.w	r3, r3, #3
 80002b2:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 &= ~(TIM_CCMR2_CC4S); //chanel 4 to output
 80002b4:	4b38      	ldr	r3, [pc, #224]	; (8000398 <main+0x1bc>)
 80002b6:	69db      	ldr	r3, [r3, #28]
 80002b8:	4a37      	ldr	r2, [pc, #220]	; (8000398 <main+0x1bc>)
 80002ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80002be:	61d3      	str	r3, [r2, #28]
	TIM1->BDTR |= TIM_BDTR_MOE; // assing timer output to pins
 80002c0:	4b35      	ldr	r3, [pc, #212]	; (8000398 <main+0x1bc>)
 80002c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c4:	4a34      	ldr	r2, [pc, #208]	; (8000398 <main+0x1bc>)
 80002c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ca:	6453      	str	r3, [r2, #68]	; 0x44
//	TIM1->CCMR1 &= ~TIM_CCMR1_OC1CE;
//	TIM1->CCMR1 &= ~TIM_CCMR1_OC2CE;
//	TIM1->CCMR2 &= ~TIM_CCMR2_OC3CE;
//	TIM1->CCMR2 &= ~TIM_CCMR2_OC4CE;
	//// setup PWM mode 1
	TIM1->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1); // chanel 1 to PWM mode 1
 80002cc:	4b32      	ldr	r3, [pc, #200]	; (8000398 <main+0x1bc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a31      	ldr	r2, [pc, #196]	; (8000398 <main+0x1bc>)
 80002d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002d6:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1); // chanel 2 to PWM mode 1
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <main+0x1bc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a2e      	ldr	r2, [pc, #184]	; (8000398 <main+0x1bc>)
 80002de:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80002e2:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 |= (TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1); // chanel 3 to PWM mode 1
 80002e4:	4b2c      	ldr	r3, [pc, #176]	; (8000398 <main+0x1bc>)
 80002e6:	69db      	ldr	r3, [r3, #28]
 80002e8:	4a2b      	ldr	r2, [pc, #172]	; (8000398 <main+0x1bc>)
 80002ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002ee:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= (TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1); // chanel 4 to PWM mode 1
 80002f0:	4b29      	ldr	r3, [pc, #164]	; (8000398 <main+0x1bc>)
 80002f2:	69db      	ldr	r3, [r3, #28]
 80002f4:	4a28      	ldr	r2, [pc, #160]	; (8000398 <main+0x1bc>)
 80002f6:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 80002fa:	61d3      	str	r3, [r2, #28]
	//turn on PWM (active -> high)
	TIM1->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1P);
 80002fc:	4b26      	ldr	r3, [pc, #152]	; (8000398 <main+0x1bc>)
 80002fe:	6a1b      	ldr	r3, [r3, #32]
 8000300:	4a25      	ldr	r2, [pc, #148]	; (8000398 <main+0x1bc>)
 8000302:	f043 0303 	orr.w	r3, r3, #3
 8000306:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (TIM_CCER_CC2E | TIM_CCER_CC2P);
 8000308:	4b23      	ldr	r3, [pc, #140]	; (8000398 <main+0x1bc>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	4a22      	ldr	r2, [pc, #136]	; (8000398 <main+0x1bc>)
 800030e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000312:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (TIM_CCER_CC3E | TIM_CCER_CC3P);
 8000314:	4b20      	ldr	r3, [pc, #128]	; (8000398 <main+0x1bc>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	4a1f      	ldr	r2, [pc, #124]	; (8000398 <main+0x1bc>)
 800031a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800031e:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (TIM_CCER_CC4E | TIM_CCER_CC4P);
 8000320:	4b1d      	ldr	r3, [pc, #116]	; (8000398 <main+0x1bc>)
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <main+0x1bc>)
 8000326:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800032a:	6213      	str	r3, [r2, #32]

	//set duty to chanels
	TIM1->CCR1 = 0;
 800032c:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <main+0x1bc>)
 800032e:	2200      	movs	r2, #0
 8000330:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8000332:	4b19      	ldr	r3, [pc, #100]	; (8000398 <main+0x1bc>)
 8000334:	2200      	movs	r2, #0
 8000336:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8000338:	4b17      	ldr	r3, [pc, #92]	; (8000398 <main+0x1bc>)
 800033a:	2200      	movs	r2, #0
 800033c:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 255;
 800033e:	4b16      	ldr	r3, [pc, #88]	; (8000398 <main+0x1bc>)
 8000340:	22ff      	movs	r2, #255	; 0xff
 8000342:	641a      	str	r2, [r3, #64]	; 0x40

	TIM1->CR1 |= TIM_CR1_CEN; // start timer
 8000344:	4b14      	ldr	r3, [pc, #80]	; (8000398 <main+0x1bc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a13      	ldr	r2, [pc, #76]	; (8000398 <main+0x1bc>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]

  while (1)
  {

	  for (uint32_t f = 0; f < 500; f++){
 8000350:	2300      	movs	r3, #0
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	e007      	b.n	8000366 <main+0x18a>
		  TIM1->CCR1 = f;
 8000356:	4a10      	ldr	r2, [pc, #64]	; (8000398 <main+0x1bc>)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	6353      	str	r3, [r2, #52]	; 0x34
		  delay();
 800035c:	f7ff fef6 	bl	800014c <delay>
	  for (uint32_t f = 0; f < 500; f++){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	3301      	adds	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800036c:	d3f3      	bcc.n	8000356 <main+0x17a>
	  }
	  for (uint32_t f = 500; f > 0 ; f--){
 800036e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	e007      	b.n	8000386 <main+0x1aa>
		  TIM1->CCR1 = f;
 8000376:	4a08      	ldr	r2, [pc, #32]	; (8000398 <main+0x1bc>)
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	6353      	str	r3, [r2, #52]	; 0x34
		  delay();
 800037c:	f7ff fee6 	bl	800014c <delay>
	  for (uint32_t f = 500; f > 0 ; f--){
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	3b01      	subs	r3, #1
 8000384:	603b      	str	r3, [r7, #0]
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f4      	bne.n	8000376 <main+0x19a>
	  for (uint32_t f = 0; f < 500; f++){
 800038c:	e7e0      	b.n	8000350 <main+0x174>
 800038e:	bf00      	nop
 8000390:	40021000 	.word	0x40021000
 8000394:	40010800 	.word	0x40010800
 8000398:	40012c00 	.word	0x40012c00

0800039c <Reset_Handler>:

/* Call the clock system initialization function.*/
//    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480b      	ldr	r0, [pc, #44]	; (80003cc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800039e:	490c      	ldr	r1, [pc, #48]	; (80003d0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003a0:	4a0c      	ldr	r2, [pc, #48]	; (80003d4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003b4:	4c09      	ldr	r4, [pc, #36]	; (80003dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003c2:	f000 f80f 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ff09 	bl	80001dc <main>
  bx lr
 80003ca:	4770      	bx	lr
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	2000001c 	.word	0x2000001c

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	2600      	movs	r6, #0
 80003e8:	4d0c      	ldr	r5, [pc, #48]	; (800041c <__libc_init_array+0x38>)
 80003ea:	4c0d      	ldr	r4, [pc, #52]	; (8000420 <__libc_init_array+0x3c>)
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	10a4      	asrs	r4, r4, #2
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	f000 f81a 	bl	800042c <_init>
 80003f8:	2600      	movs	r6, #0
 80003fa:	4d0a      	ldr	r5, [pc, #40]	; (8000424 <__libc_init_array+0x40>)
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <__libc_init_array+0x44>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr

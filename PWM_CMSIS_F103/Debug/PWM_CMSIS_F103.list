
PWM_CMSIS_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000036c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  4 .ARM          00000000  08000478  08000478  00010480  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000478  08000480  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000478  08000478  00010478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800047c  0800047c  0001047c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000480  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000480  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010480  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000064e  00000000  00000000  000104a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000197  00000000  00000000  00010af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe44  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005a3  00000000  00000000  00020b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f66  00000000  00000000  0002112f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00075095  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  000750e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000460 	.word	0x08000460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000460 	.word	0x08000460

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	; (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <setupRCCTo72MHz>:
/* USER CODE BEGIN 0 */
void delay(){
	for(uint32_t i=0; i < 250000; i++){}
}

void setupRCCTo72MHz(){
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON; // turn on ext. clock
 8000188:	4b16      	ldr	r3, [pc, #88]	; (80001e4 <setupRCCTo72MHz+0x60>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a15      	ldr	r2, [pc, #84]	; (80001e4 <setupRCCTo72MHz+0x60>)
 800018e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000192:	6013      	str	r3, [r2, #0]
	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000194:	4b13      	ldr	r3, [pc, #76]	; (80001e4 <setupRCCTo72MHz+0x60>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a12      	ldr	r2, [pc, #72]	; (80001e4 <setupRCCTo72MHz+0x60>)
 800019a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800019e:	6013      	str	r3, [r2, #0]
	// PLL Source = HSE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 80001a0:	4b10      	ldr	r3, [pc, #64]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001a2:	685b      	ldr	r3, [r3, #4]
 80001a4:	4a0f      	ldr	r2, [pc, #60]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001aa:	6053      	str	r3, [r2, #4]
	// HSE clock isn't divided
	RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 80001ac:	4b0d      	ldr	r3, [pc, #52]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001ae:	685b      	ldr	r3, [r3, #4]
 80001b0:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80001b6:	6053      	str	r3, [r2, #4]
	//set PLLMUL to 9
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4a09      	ldr	r2, [pc, #36]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001be:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001c2:	6053      	str	r3, [r2, #4]
	//set PLL as system clock
	RCC->CFGR |= (RCC_CFGR_SW_1);
 80001c4:	4b07      	ldr	r3, [pc, #28]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001c6:	685b      	ldr	r3, [r3, #4]
 80001c8:	4a06      	ldr	r2, [pc, #24]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001ca:	f043 0302 	orr.w	r3, r3, #2
 80001ce:	6053      	str	r3, [r2, #4]
	//set APB1 prescaller to 2
	RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	4a03      	ldr	r2, [pc, #12]	; (80001e4 <setupRCCTo72MHz+0x60>)
 80001d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001da:	6053      	str	r3, [r2, #4]

}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	40021000 	.word	0x40021000

080001e8 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	if ((TIM1->SR & TIM_SR_UIF) != 0){
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <TIM1_UP_IRQHandler+0x24>)
 80001ee:	691b      	ldr	r3, [r3, #16]
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d005      	beq.n	8000204 <TIM1_UP_IRQHandler+0x1c>
		TIM1->SR &= ~TIM_SR_UIF; // exit from interrupt
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <TIM1_UP_IRQHandler+0x24>)
 80001fa:	691b      	ldr	r3, [r3, #16]
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <TIM1_UP_IRQHandler+0x24>)
 80001fe:	f023 0301 	bic.w	r3, r3, #1
 8000202:	6113      	str	r3, [r2, #16]
	}

}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	40012c00 	.word	0x40012c00

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	// setup RCC
	setupRCCTo72MHz();
 8000214:	f7ff ffb6 	bl	8000184 <setupRCCTo72MHz>
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // turn on clock on port A
 8000218:	4b6a      	ldr	r3, [pc, #424]	; (80003c4 <main+0x1b4>)
 800021a:	699b      	ldr	r3, [r3, #24]
 800021c:	4a69      	ldr	r2, [pc, #420]	; (80003c4 <main+0x1b4>)
 800021e:	f043 0304 	orr.w	r3, r3, #4
 8000222:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // turn on clock on alternative funcs (interrupts)
 8000224:	4b67      	ldr	r3, [pc, #412]	; (80003c4 <main+0x1b4>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a66      	ldr	r2, [pc, #408]	; (80003c4 <main+0x1b4>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // turn on clock of timer 1
 8000230:	4b64      	ldr	r3, [pc, #400]	; (80003c4 <main+0x1b4>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a63      	ldr	r2, [pc, #396]	; (80003c4 <main+0x1b4>)
 8000236:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800023a:	6193      	str	r3, [r2, #24]

	//setup PA8-PA11 to alternative push-pull output with max speed 50 MHz (need for PWM)
	GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8 | GPIO_CRH_MODE9 | GPIO_CRH_CNF9); //reset PA8-PA9
 800023c:	4b62      	ldr	r3, [pc, #392]	; (80003c8 <main+0x1b8>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a61      	ldr	r2, [pc, #388]	; (80003c8 <main+0x1b8>)
 8000242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000246:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10 | GPIO_CRH_MODE11 | GPIO_CRH_CNF11); //reset PA10-PA11
 8000248:	4b5f      	ldr	r3, [pc, #380]	; (80003c8 <main+0x1b8>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a5e      	ldr	r2, [pc, #376]	; (80003c8 <main+0x1b8>)
 800024e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000252:	6053      	str	r3, [r2, #4]

	GPIOA->CRH |= (GPIO_CRH_MODE8_0 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1 ); //alternative push-pull output with max speed 50 MHz
 8000254:	4b5c      	ldr	r3, [pc, #368]	; (80003c8 <main+0x1b8>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	4a5b      	ldr	r2, [pc, #364]	; (80003c8 <main+0x1b8>)
 800025a:	f043 030b 	orr.w	r3, r3, #11
 800025e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (GPIO_CRH_MODE9_0 | GPIO_CRH_MODE9_1 | GPIO_CRH_CNF9_1 ); //alternative push-pull output with max speed 50 MHz
 8000260:	4b59      	ldr	r3, [pc, #356]	; (80003c8 <main+0x1b8>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a58      	ldr	r2, [pc, #352]	; (80003c8 <main+0x1b8>)
 8000266:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800026a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (GPIO_CRH_MODE10_0 | GPIO_CRH_MODE10_1 | GPIO_CRH_CNF10_1 ); //alternative push-pull output with max speed 50 MHz
 800026c:	4b56      	ldr	r3, [pc, #344]	; (80003c8 <main+0x1b8>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a55      	ldr	r2, [pc, #340]	; (80003c8 <main+0x1b8>)
 8000272:	f443 6330 	orr.w	r3, r3, #2816	; 0xb00
 8000276:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (GPIO_CRH_MODE11_0 | GPIO_CRH_MODE11_1 | GPIO_CRH_CNF11_1 ); //alternative push-pull output with max speed 50 MHz
 8000278:	4b53      	ldr	r3, [pc, #332]	; (80003c8 <main+0x1b8>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a52      	ldr	r2, [pc, #328]	; (80003c8 <main+0x1b8>)
 800027e:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
 8000282:	6053      	str	r3, [r2, #4]

	//general setup of tim1

	TIM1->CR1 &= ~(TIM_CR1_UDIS | TIM_CR1_URS); // not gererate general event or interrupt
 8000284:	4b51      	ldr	r3, [pc, #324]	; (80003cc <main+0x1bc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a50      	ldr	r2, [pc, #320]	; (80003cc <main+0x1bc>)
 800028a:	f023 0306 	bic.w	r3, r3, #6
 800028e:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(TIM_CR1_OPM); //one pulse mode off (Counter will not stop on every update)
 8000290:	4b4e      	ldr	r3, [pc, #312]	; (80003cc <main+0x1bc>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a4d      	ldr	r2, [pc, #308]	; (80003cc <main+0x1bc>)
 8000296:	f023 0308 	bic.w	r3, r3, #8
 800029a:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(TIM_CR1_DIR); //counter used as upcounter
 800029c:	4b4b      	ldr	r3, [pc, #300]	; (80003cc <main+0x1bc>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a4a      	ldr	r2, [pc, #296]	; (80003cc <main+0x1bc>)
 80002a2:	f023 0310 	bic.w	r3, r3, #16
 80002a6:	6013      	str	r3, [r2, #0]
	TIM1->CR1 &= ~(TIM_CR1_CMS); // edge-aligned mode
 80002a8:	4b48      	ldr	r3, [pc, #288]	; (80003cc <main+0x1bc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a47      	ldr	r2, [pc, #284]	; (80003cc <main+0x1bc>)
 80002ae:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80002b2:	6013      	str	r3, [r2, #0]
	TIM1->CR1 |= TIM_CR1_ARPE; //TIM1_ARR register is buffered
 80002b4:	4b45      	ldr	r3, [pc, #276]	; (80003cc <main+0x1bc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a44      	ldr	r2, [pc, #272]	; (80003cc <main+0x1bc>)
 80002ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002be:	6013      	str	r3, [r2, #0]

	// setup update interrupt
	TIM1->DIER |= TIM_DIER_UIE; // update interrupt enable
 80002c0:	4b42      	ldr	r3, [pc, #264]	; (80003cc <main+0x1bc>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	4a41      	ldr	r2, [pc, #260]	; (80003cc <main+0x1bc>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	60d3      	str	r3, [r2, #12]
	// setup timer freq
	TIM1->PSC = 72 - 1; // 72Mhz / 72 = 1MHz -> first prescaler
 80002cc:	4b3f      	ldr	r3, [pc, #252]	; (80003cc <main+0x1bc>)
 80002ce:	2247      	movs	r2, #71	; 0x47
 80002d0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 30 - 1; // 1MHz / 30 = 33.333kHz -> second prescaler --> finish freq = 33.333kHz
 80002d2:	4b3e      	ldr	r3, [pc, #248]	; (80003cc <main+0x1bc>)
 80002d4:	221d      	movs	r2, #29
 80002d6:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM1_UP_IRQn); //enable update irq
 80002d8:	2019      	movs	r0, #25
 80002da:	f7ff ff37 	bl	800014c <__NVIC_EnableIRQ>
	TIM1->CR1 |= TIM_CR1_CEN; // start timer
 80002de:	4b3b      	ldr	r3, [pc, #236]	; (80003cc <main+0x1bc>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a3a      	ldr	r2, [pc, #232]	; (80003cc <main+0x1bc>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6013      	str	r3, [r2, #0]

	//setup PWM
	////setup chanels
	TIM1->CCMR1 &= ~(TIM_CCMR1_CC1S); // chanel 1 to output
 80002ea:	4b38      	ldr	r3, [pc, #224]	; (80003cc <main+0x1bc>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	4a37      	ldr	r2, [pc, #220]	; (80003cc <main+0x1bc>)
 80002f0:	f023 0303 	bic.w	r3, r3, #3
 80002f4:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 &= ~(TIM_CCMR1_CC2S); // chanel 2 to output
 80002f6:	4b35      	ldr	r3, [pc, #212]	; (80003cc <main+0x1bc>)
 80002f8:	699b      	ldr	r3, [r3, #24]
 80002fa:	4a34      	ldr	r2, [pc, #208]	; (80003cc <main+0x1bc>)
 80002fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000300:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 &= ~(TIM_CCMR2_CC3S); //chanel 3 to output
 8000302:	4b32      	ldr	r3, [pc, #200]	; (80003cc <main+0x1bc>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	4a31      	ldr	r2, [pc, #196]	; (80003cc <main+0x1bc>)
 8000308:	f023 0303 	bic.w	r3, r3, #3
 800030c:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 &= ~(TIM_CCMR2_CC4S); //chanel 4 to output
 800030e:	4b2f      	ldr	r3, [pc, #188]	; (80003cc <main+0x1bc>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <main+0x1bc>)
 8000314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000318:	61d3      	str	r3, [r2, #28]
	////setup preload
	TIM1->CCMR1 |= (TIM_CCMR1_OC1PE); // chanel 1 preload enable
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <main+0x1bc>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a2b      	ldr	r2, [pc, #172]	; (80003cc <main+0x1bc>)
 8000320:	f043 0308 	orr.w	r3, r3, #8
 8000324:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (TIM_CCMR1_OC2PE); // chanel 2 preload enable
 8000326:	4b29      	ldr	r3, [pc, #164]	; (80003cc <main+0x1bc>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a28      	ldr	r2, [pc, #160]	; (80003cc <main+0x1bc>)
 800032c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000330:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 |= (TIM_CCMR2_OC3PE); // chanel 3 preload enable
 8000332:	4b26      	ldr	r3, [pc, #152]	; (80003cc <main+0x1bc>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4a25      	ldr	r2, [pc, #148]	; (80003cc <main+0x1bc>)
 8000338:	f043 0308 	orr.w	r3, r3, #8
 800033c:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= (TIM_CCMR2_OC4PE); // chanel 4 preload enable
 800033e:	4b23      	ldr	r3, [pc, #140]	; (80003cc <main+0x1bc>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	4a22      	ldr	r2, [pc, #136]	; (80003cc <main+0x1bc>)
 8000344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000348:	61d3      	str	r3, [r2, #28]
	//// setup PWM mode 1
	TIM1->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1); // chanel 1 to PWM mode 1
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <main+0x1bc>)
 800034c:	699b      	ldr	r3, [r3, #24]
 800034e:	4a1f      	ldr	r2, [pc, #124]	; (80003cc <main+0x1bc>)
 8000350:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000354:	6193      	str	r3, [r2, #24]
	TIM1->CCMR1 |= (TIM_CCMR1_OC2M_2 | TIM_CCMR1_OC2M_1); // chanel 2 to PWM mode 1
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <main+0x1bc>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a1c      	ldr	r2, [pc, #112]	; (80003cc <main+0x1bc>)
 800035c:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000360:	6193      	str	r3, [r2, #24]
	TIM1->CCMR2 |= (TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1); // chanel 3 to PWM mode 1
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <main+0x1bc>)
 8000364:	69db      	ldr	r3, [r3, #28]
 8000366:	4a19      	ldr	r2, [pc, #100]	; (80003cc <main+0x1bc>)
 8000368:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800036c:	61d3      	str	r3, [r2, #28]
	TIM1->CCMR2 |= (TIM_CCMR2_OC4M_2 | TIM_CCMR2_OC4M_1); // chanel 4 to PWM mode 1
 800036e:	4b17      	ldr	r3, [pc, #92]	; (80003cc <main+0x1bc>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a16      	ldr	r2, [pc, #88]	; (80003cc <main+0x1bc>)
 8000374:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8000378:	61d3      	str	r3, [r2, #28]
	//turn on PWM
	TIM1->CCER |= (TIM_CCER_CC1E);
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <main+0x1bc>)
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	4a13      	ldr	r2, [pc, #76]	; (80003cc <main+0x1bc>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (TIM_CCER_CC2E);
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <main+0x1bc>)
 8000388:	6a1b      	ldr	r3, [r3, #32]
 800038a:	4a10      	ldr	r2, [pc, #64]	; (80003cc <main+0x1bc>)
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (TIM_CCER_CC3E);
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <main+0x1bc>)
 8000394:	6a1b      	ldr	r3, [r3, #32]
 8000396:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <main+0x1bc>)
 8000398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800039c:	6213      	str	r3, [r2, #32]
	TIM1->CCER |= (TIM_CCER_CC4E);
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <main+0x1bc>)
 80003a0:	6a1b      	ldr	r3, [r3, #32]
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <main+0x1bc>)
 80003a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003a8:	6213      	str	r3, [r2, #32]

	//set duty to chanels
	TIM1->CCR1 = 10;
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <main+0x1bc>)
 80003ac:	220a      	movs	r2, #10
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 15;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <main+0x1bc>)
 80003b2:	220f      	movs	r2, #15
 80003b4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 20;
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <main+0x1bc>)
 80003b8:	2214      	movs	r2, #20
 80003ba:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 30;
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <main+0x1bc>)
 80003be:	221e      	movs	r2, #30
 80003c0:	641a      	str	r2, [r3, #64]	; 0x40

  while (1)
 80003c2:	e7fe      	b.n	80003c2 <main+0x1b2>
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010800 	.word	0x40010800
 80003cc:	40012c00 	.word	0x40012c00

080003d0 <Reset_Handler>:

/* Call the clock system initialization function.*/
 //   bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d0:	480b      	ldr	r0, [pc, #44]	; (8000400 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003d2:	490c      	ldr	r1, [pc, #48]	; (8000404 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003d4:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <LoopFillZerobss+0x16>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d8:	e002      	b.n	80003e0 <LoopCopyDataInit>

080003da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003de:	3304      	adds	r3, #4

080003e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e4:	d3f9      	bcc.n	80003da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e6:	4a09      	ldr	r2, [pc, #36]	; (800040c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003e8:	4c09      	ldr	r4, [pc, #36]	; (8000410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ec:	e001      	b.n	80003f2 <LoopFillZerobss>

080003ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f0:	3204      	adds	r2, #4

080003f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f4:	d3fb      	bcc.n	80003ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003f6:	f000 f80f 	bl	8000418 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003fa:	f7ff ff09 	bl	8000210 <main>
  bx lr
 80003fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000408:	08000480 	.word	0x08000480
  ldr r2, =_sbss
 800040c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000410:	2000001c 	.word	0x2000001c

08000414 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC1_2_IRQHandler>
	...

08000418 <__libc_init_array>:
 8000418:	b570      	push	{r4, r5, r6, lr}
 800041a:	2600      	movs	r6, #0
 800041c:	4d0c      	ldr	r5, [pc, #48]	; (8000450 <__libc_init_array+0x38>)
 800041e:	4c0d      	ldr	r4, [pc, #52]	; (8000454 <__libc_init_array+0x3c>)
 8000420:	1b64      	subs	r4, r4, r5
 8000422:	10a4      	asrs	r4, r4, #2
 8000424:	42a6      	cmp	r6, r4
 8000426:	d109      	bne.n	800043c <__libc_init_array+0x24>
 8000428:	f000 f81a 	bl	8000460 <_init>
 800042c:	2600      	movs	r6, #0
 800042e:	4d0a      	ldr	r5, [pc, #40]	; (8000458 <__libc_init_array+0x40>)
 8000430:	4c0a      	ldr	r4, [pc, #40]	; (800045c <__libc_init_array+0x44>)
 8000432:	1b64      	subs	r4, r4, r5
 8000434:	10a4      	asrs	r4, r4, #2
 8000436:	42a6      	cmp	r6, r4
 8000438:	d105      	bne.n	8000446 <__libc_init_array+0x2e>
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000440:	4798      	blx	r3
 8000442:	3601      	adds	r6, #1
 8000444:	e7ee      	b.n	8000424 <__libc_init_array+0xc>
 8000446:	f855 3b04 	ldr.w	r3, [r5], #4
 800044a:	4798      	blx	r3
 800044c:	3601      	adds	r6, #1
 800044e:	e7f2      	b.n	8000436 <__libc_init_array+0x1e>
 8000450:	08000478 	.word	0x08000478
 8000454:	08000478 	.word	0x08000478
 8000458:	08000478 	.word	0x08000478
 800045c:	0800047c 	.word	0x0800047c

08000460 <_init>:
 8000460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000462:	bf00      	nop
 8000464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000466:	bc08      	pop	{r3}
 8000468:	469e      	mov	lr, r3
 800046a:	4770      	bx	lr

0800046c <_fini>:
 800046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800046e:	bf00      	nop
 8000470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000472:	bc08      	pop	{r3}
 8000474:	469e      	mov	lr, r3
 8000476:	4770      	bx	lr

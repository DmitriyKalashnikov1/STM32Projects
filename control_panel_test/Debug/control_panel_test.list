
control_panel_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019d8  080019d8  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080019d8  080019d8  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019d8  080019d8  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019d8  080019d8  000119d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080019e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000064  08001a44  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001a44  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c9d  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000286  00000000  00000000  00020d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00020fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  00021058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bd8  00000000  00000000  000210e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000009c9  00000000  00000000  00031cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000581c6  00000000  00000000  00032689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008a84f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ae4  00000000  00000000  0008a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  0008b384  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0008b420  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	080018dc 	.word	0x080018dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	080018dc 	.word	0x080018dc

0800014c <SysTick_Handler>:
// end setup swd printf

__IO uint32_t SysTick_CNT = 0; //SysTick tick count var
__IO uint32_t speedDisplay = 0; // Speed for out to display leds

void SysTick_Handler() {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (SysTick_CNT > 0) {
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <SysTick_Handler+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d004      	beq.n	8000162 <SysTick_Handler+0x16>
		SysTick_CNT--;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <SysTick_Handler+0x20>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	4a03      	ldr	r2, [pc, #12]	; (800016c <SysTick_Handler+0x20>)
 8000160:	6013      	str	r3, [r2, #0]
	}
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	20000080 	.word	0x20000080

08000170 <setupSysTick>:

void setupSysTick() {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	SysTick->LOAD &= ~SysTick_LOAD_RELOAD_Msk; // Reset Load val
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <setupSysTick+0x38>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <setupSysTick+0x38>)
 800017a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800017e:	6053      	str	r3, [r2, #4]
	SysTick->LOAD = SystemCoreClock / (1000 - 1); // Set timer period to 1 ms
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <setupSysTick+0x38>)
 8000182:	4a0a      	ldr	r2, [pc, #40]	; (80001ac <setupSysTick+0x3c>)
 8000184:	605a      	str	r2, [r3, #4]
	SysTick->VAL &= ~SysTick_VAL_CURRENT_Msk; // reset Val
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <setupSysTick+0x38>)
 8000188:	689b      	ldr	r3, [r3, #8]
 800018a:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <setupSysTick+0x38>)
 800018c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000190:	6093      	str	r3, [r2, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <setupSysTick+0x38>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <setupSysTick+0x38>)
 8000198:	f043 0307 	orr.w	r3, r3, #7
 800019c:	6013      	str	r3, [r2, #0]
			| SysTick_CTRL_ENABLE_Msk; // select core clock for timer, enable irq, start timer
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	e000e010 	.word	0xe000e010
 80001ac:	00011988 	.word	0x00011988

080001b0 <ADC_setup>:

void ADC_setup() {
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
	ADC1->CR2 |= (ADC_CR2_ADON); // turn on adc
 80001b4:	4b17      	ldr	r3, [pc, #92]	; (8000214 <ADC_setup+0x64>)
 80001b6:	689b      	ldr	r3, [r3, #8]
 80001b8:	4a16      	ldr	r2, [pc, #88]	; (8000214 <ADC_setup+0x64>)
 80001ba:	f043 0301 	orr.w	r3, r3, #1
 80001be:	6093      	str	r3, [r2, #8]
	//	 adc calib
	ADC1->CR2 |= (ADC_CR2_CAL); // start calib
 80001c0:	4b14      	ldr	r3, [pc, #80]	; (8000214 <ADC_setup+0x64>)
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	4a13      	ldr	r2, [pc, #76]	; (8000214 <ADC_setup+0x64>)
 80001c6:	f043 0304 	orr.w	r3, r3, #4
 80001ca:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & ADC_CR2_CAL))
 80001cc:	bf00      	nop
 80001ce:	4b11      	ldr	r3, [pc, #68]	; (8000214 <ADC_setup+0x64>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f003 0304 	and.w	r3, r3, #4
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d0f9      	beq.n	80001ce <ADC_setup+0x1e>
		; //wait for end of calib
//	//enable adc interrupt
//	ADC1->CR1 |= ADC_CR1_EOCIE;
//	NVIC_EnableIRQ(ADC1_2_IRQn);
	ADC1->CR2 |= (ADC_CR2_EXTSEL); // adc started on SWSTART bit
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <ADC_setup+0x64>)
 80001dc:	689b      	ldr	r3, [r3, #8]
 80001de:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <ADC_setup+0x64>)
 80001e0:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80001e4:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (ADC_CR2_EXTTRIG); // enable external adc turn on for single convert
 80001e6:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <ADC_setup+0x64>)
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	4a0a      	ldr	r2, [pc, #40]	; (8000214 <ADC_setup+0x64>)
 80001ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001f0:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_CONT); // continious mode
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <ADC_setup+0x64>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <ADC_setup+0x64>)
 80001f8:	f023 0302 	bic.w	r3, r3, #2
 80001fc:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_ADON); // turn of adc
 80001fe:	4b05      	ldr	r3, [pc, #20]	; (8000214 <ADC_setup+0x64>)
 8000200:	689b      	ldr	r3, [r3, #8]
 8000202:	4a04      	ldr	r2, [pc, #16]	; (8000214 <ADC_setup+0x64>)
 8000204:	f023 0301 	bic.w	r3, r3, #1
 8000208:	6093      	str	r3, [r2, #8]
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40012400 	.word	0x40012400

08000218 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	SysTick->VAL &= ~SysTick_VAL_CURRENT_Msk; // reset Val
 8000220:	4b0b      	ldr	r3, [pc, #44]	; (8000250 <delay_ms+0x38>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a0a      	ldr	r2, [pc, #40]	; (8000250 <delay_ms+0x38>)
 8000226:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800022a:	6093      	str	r3, [r2, #8]
	// set delay period
	SysTick->VAL = SystemCoreClock / (1000 - 1); // Set timer period to 1 ms
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <delay_ms+0x38>)
 800022e:	4a09      	ldr	r2, [pc, #36]	; (8000254 <delay_ms+0x3c>)
 8000230:	609a      	str	r2, [r3, #8]
	SysTick_CNT = ms;
 8000232:	4a09      	ldr	r2, [pc, #36]	; (8000258 <delay_ms+0x40>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	6013      	str	r3, [r2, #0]
	while (SysTick_CNT)
 8000238:	bf00      	nop
 800023a:	4b07      	ldr	r3, [pc, #28]	; (8000258 <delay_ms+0x40>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d1fb      	bne.n	800023a <delay_ms+0x22>
		; //sleep for delay time
}
 8000242:	bf00      	nop
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	bc80      	pop	{r7}
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e010 	.word	0xe000e010
 8000254:	00011988 	.word	0x00011988
 8000258:	20000080 	.word	0x20000080

0800025c <setupRCCTo72MHz>:

void setupRCCTo72MHz() {
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON; // turn on ext. clock
 8000260:	4b19      	ldr	r3, [pc, #100]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a18      	ldr	r2, [pc, #96]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 8000266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800026a:	6013      	str	r3, [r2, #0]
	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 800026c:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 8000272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000276:	6013      	str	r3, [r2, #0]
	// PLL Source = HSE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a12      	ldr	r2, [pc, #72]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 800027e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000282:	6053      	str	r3, [r2, #4]
	// HSE clock isn't divided
	RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 800028a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800028e:	6053      	str	r3, [r2, #4]
	//set PLLMUL to 9
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 8000296:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800029a:	6053      	str	r3, [r2, #4]
	//set PLL as system clock
	RCC->CFGR |= (RCC_CFGR_SW_1);
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a09      	ldr	r2, [pc, #36]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6053      	str	r3, [r2, #4]
	//set APB1 prescaller to 2
	RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 80002ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b2:	6053      	str	r3, [r2, #4]
	// setup adc prescaller to 8
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	4a03      	ldr	r2, [pc, #12]	; (80002c8 <setupRCCTo72MHz+0x6c>)
 80002ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002be:	6053      	str	r3, [r2, #4]

}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <beep>:

void beep(uint32_t count, uint32_t ms) { // function for zummer signal
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
	for (int f = 0; f < count; f++) {
 80002d6:	2300      	movs	r3, #0
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	e014      	b.n	8000306 <beep+0x3a>
		GPIOA->ODR |= GPIO_ODR_ODR15;
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <beep+0x4c>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <beep+0x4c>)
 80002e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002e6:	60d3      	str	r3, [r2, #12]
		delay_ms(ms);
 80002e8:	6838      	ldr	r0, [r7, #0]
 80002ea:	f7ff ff95 	bl	8000218 <delay_ms>
		GPIOA->ODR &= ~GPIO_ODR_ODR15;
 80002ee:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <beep+0x4c>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	4a09      	ldr	r2, [pc, #36]	; (8000318 <beep+0x4c>)
 80002f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002f8:	60d3      	str	r3, [r2, #12]
		delay_ms(ms);
 80002fa:	6838      	ldr	r0, [r7, #0]
 80002fc:	f7ff ff8c 	bl	8000218 <delay_ms>
	for (int f = 0; f < count; f++) {
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3301      	adds	r3, #1
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	429a      	cmp	r2, r3
 800030c:	d8e6      	bhi.n	80002dc <beep+0x10>
	}
}
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40010800 	.word	0x40010800

0800031c <displaySpeed>:

void displaySpeed(uint32_t speed) { // function for display speed
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	switch (speed) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2b04      	cmp	r3, #4
 8000328:	f200 80a9 	bhi.w	800047e <displaySpeed+0x162>
 800032c:	a201      	add	r2, pc, #4	; (adr r2, 8000334 <displaySpeed+0x18>)
 800032e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000332:	bf00      	nop
 8000334:	08000349 	.word	0x08000349
 8000338:	08000387 	.word	0x08000387
 800033c:	080003c5 	.word	0x080003c5
 8000340:	08000403 	.word	0x08000403
 8000344:	08000441 	.word	0x08000441
	case 0:
		GPIOB->ODR |= GPIO_ODR_ODR0;
 8000348:	4b4f      	ldr	r3, [pc, #316]	; (8000488 <displaySpeed+0x16c>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a4e      	ldr	r2, [pc, #312]	; (8000488 <displaySpeed+0x16c>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR1;
 8000354:	4b4c      	ldr	r3, [pc, #304]	; (8000488 <displaySpeed+0x16c>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4a4b      	ldr	r2, [pc, #300]	; (8000488 <displaySpeed+0x16c>)
 800035a:	f023 0302 	bic.w	r3, r3, #2
 800035e:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR2;
 8000360:	4b49      	ldr	r3, [pc, #292]	; (8000488 <displaySpeed+0x16c>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a48      	ldr	r2, [pc, #288]	; (8000488 <displaySpeed+0x16c>)
 8000366:	f023 0304 	bic.w	r3, r3, #4
 800036a:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR4;
 800036c:	4b46      	ldr	r3, [pc, #280]	; (8000488 <displaySpeed+0x16c>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a45      	ldr	r2, [pc, #276]	; (8000488 <displaySpeed+0x16c>)
 8000372:	f023 0310 	bic.w	r3, r3, #16
 8000376:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR5;
 8000378:	4b43      	ldr	r3, [pc, #268]	; (8000488 <displaySpeed+0x16c>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a42      	ldr	r2, [pc, #264]	; (8000488 <displaySpeed+0x16c>)
 800037e:	f023 0320 	bic.w	r3, r3, #32
 8000382:	60d3      	str	r3, [r2, #12]
		break;
 8000384:	e07b      	b.n	800047e <displaySpeed+0x162>
	case 1:
		GPIOB->ODR |= GPIO_ODR_ODR0;
 8000386:	4b40      	ldr	r3, [pc, #256]	; (8000488 <displaySpeed+0x16c>)
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	4a3f      	ldr	r2, [pc, #252]	; (8000488 <displaySpeed+0x16c>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR1;
 8000392:	4b3d      	ldr	r3, [pc, #244]	; (8000488 <displaySpeed+0x16c>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	4a3c      	ldr	r2, [pc, #240]	; (8000488 <displaySpeed+0x16c>)
 8000398:	f043 0302 	orr.w	r3, r3, #2
 800039c:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR2;
 800039e:	4b3a      	ldr	r3, [pc, #232]	; (8000488 <displaySpeed+0x16c>)
 80003a0:	68db      	ldr	r3, [r3, #12]
 80003a2:	4a39      	ldr	r2, [pc, #228]	; (8000488 <displaySpeed+0x16c>)
 80003a4:	f023 0304 	bic.w	r3, r3, #4
 80003a8:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR4;
 80003aa:	4b37      	ldr	r3, [pc, #220]	; (8000488 <displaySpeed+0x16c>)
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	4a36      	ldr	r2, [pc, #216]	; (8000488 <displaySpeed+0x16c>)
 80003b0:	f023 0310 	bic.w	r3, r3, #16
 80003b4:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR5;
 80003b6:	4b34      	ldr	r3, [pc, #208]	; (8000488 <displaySpeed+0x16c>)
 80003b8:	68db      	ldr	r3, [r3, #12]
 80003ba:	4a33      	ldr	r2, [pc, #204]	; (8000488 <displaySpeed+0x16c>)
 80003bc:	f023 0320 	bic.w	r3, r3, #32
 80003c0:	60d3      	str	r3, [r2, #12]
		break;
 80003c2:	e05c      	b.n	800047e <displaySpeed+0x162>
	case 2:
		GPIOB->ODR |= GPIO_ODR_ODR0;
 80003c4:	4b30      	ldr	r3, [pc, #192]	; (8000488 <displaySpeed+0x16c>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a2f      	ldr	r2, [pc, #188]	; (8000488 <displaySpeed+0x16c>)
 80003ca:	f043 0301 	orr.w	r3, r3, #1
 80003ce:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR1;
 80003d0:	4b2d      	ldr	r3, [pc, #180]	; (8000488 <displaySpeed+0x16c>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a2c      	ldr	r2, [pc, #176]	; (8000488 <displaySpeed+0x16c>)
 80003d6:	f043 0302 	orr.w	r3, r3, #2
 80003da:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR2;
 80003dc:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <displaySpeed+0x16c>)
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	4a29      	ldr	r2, [pc, #164]	; (8000488 <displaySpeed+0x16c>)
 80003e2:	f043 0304 	orr.w	r3, r3, #4
 80003e6:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR4;
 80003e8:	4b27      	ldr	r3, [pc, #156]	; (8000488 <displaySpeed+0x16c>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	4a26      	ldr	r2, [pc, #152]	; (8000488 <displaySpeed+0x16c>)
 80003ee:	f023 0310 	bic.w	r3, r3, #16
 80003f2:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR5;
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <displaySpeed+0x16c>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4a23      	ldr	r2, [pc, #140]	; (8000488 <displaySpeed+0x16c>)
 80003fa:	f023 0320 	bic.w	r3, r3, #32
 80003fe:	60d3      	str	r3, [r2, #12]
		break;
 8000400:	e03d      	b.n	800047e <displaySpeed+0x162>
	case 3:
		GPIOB->ODR |= GPIO_ODR_ODR0;
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <displaySpeed+0x16c>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	4a20      	ldr	r2, [pc, #128]	; (8000488 <displaySpeed+0x16c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR1;
 800040e:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <displaySpeed+0x16c>)
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	4a1d      	ldr	r2, [pc, #116]	; (8000488 <displaySpeed+0x16c>)
 8000414:	f043 0302 	orr.w	r3, r3, #2
 8000418:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR2;
 800041a:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <displaySpeed+0x16c>)
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <displaySpeed+0x16c>)
 8000420:	f043 0304 	orr.w	r3, r3, #4
 8000424:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR4;
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <displaySpeed+0x16c>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <displaySpeed+0x16c>)
 800042c:	f043 0310 	orr.w	r3, r3, #16
 8000430:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR5;
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <displaySpeed+0x16c>)
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <displaySpeed+0x16c>)
 8000438:	f023 0320 	bic.w	r3, r3, #32
 800043c:	60d3      	str	r3, [r2, #12]
		break;
 800043e:	e01e      	b.n	800047e <displaySpeed+0x162>
	case 4:
		GPIOB->ODR |= GPIO_ODR_ODR0;
 8000440:	4b11      	ldr	r3, [pc, #68]	; (8000488 <displaySpeed+0x16c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a10      	ldr	r2, [pc, #64]	; (8000488 <displaySpeed+0x16c>)
 8000446:	f043 0301 	orr.w	r3, r3, #1
 800044a:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR1;
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <displaySpeed+0x16c>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <displaySpeed+0x16c>)
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR2;
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <displaySpeed+0x16c>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <displaySpeed+0x16c>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR4;
 8000464:	4b08      	ldr	r3, [pc, #32]	; (8000488 <displaySpeed+0x16c>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a07      	ldr	r2, [pc, #28]	; (8000488 <displaySpeed+0x16c>)
 800046a:	f043 0310 	orr.w	r3, r3, #16
 800046e:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR5;
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <displaySpeed+0x16c>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <displaySpeed+0x16c>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	60d3      	str	r3, [r2, #12]
		break;
 800047c:	bf00      	nop
	}
}
 800047e:	bf00      	nop
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40010c00 	.word	0x40010c00

0800048c <ADC_Read_VBAT>:

uint32_t ADC_Read_VBAT() {
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~(ADC_CR2_ADON); // turn of adc
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <ADC_Read_VBAT+0x58>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	4a13      	ldr	r2, [pc, #76]	; (80004e4 <ADC_Read_VBAT+0x58>)
 8000496:	f023 0301 	bic.w	r3, r3, #1
 800049a:	6093      	str	r3, [r2, #8]
	// select 4 channel
	ADC1->SQR1 = 0; // 1 regular channel
 800049c:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <ADC_Read_VBAT+0x58>)
 800049e:	2200      	movs	r2, #0
 80004a0:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0x00000000;
 80004a2:	4b10      	ldr	r3, [pc, #64]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 = 0x00000100; // 1 convert - channel 4
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ae:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= (ADC_CR2_ADON); // turn on adc
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004b6:	f043 0301 	orr.w	r3, r3, #1
 80004ba:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART; // start adc convert
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004c6:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & ADC_SR_EOC)) {
 80004c8:	bf00      	nop
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f003 0302 	and.w	r3, r3, #2
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d0f9      	beq.n	80004ca <ADC_Read_VBAT+0x3e>
	}; //wait for end of convert

	return ADC1->DR; // read adc data
 80004d6:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <ADC_Read_VBAT+0x58>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80004da:	4618      	mov	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	bc80      	pop	{r7}
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40012400 	.word	0x40012400

080004e8 <ADC_Read_JoystickA>:

uint32_t ADC_Read_JoystickA() {
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~(ADC_CR2_ADON); // turn of adc
 80004ec:	4b13      	ldr	r3, [pc, #76]	; (800053c <ADC_Read_JoystickA+0x54>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a12      	ldr	r2, [pc, #72]	; (800053c <ADC_Read_JoystickA+0x54>)
 80004f2:	f023 0301 	bic.w	r3, r3, #1
 80004f6:	6093      	str	r3, [r2, #8]
	// select 0 channel
	ADC1->SQR1 = 0; // 1 regular channel
 80004f8:	4b10      	ldr	r3, [pc, #64]	; (800053c <ADC_Read_JoystickA+0x54>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0x00000000;
 80004fe:	4b0f      	ldr	r3, [pc, #60]	; (800053c <ADC_Read_JoystickA+0x54>)
 8000500:	2200      	movs	r2, #0
 8000502:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 = 0x00000000; // 1 convert - channel 0
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <ADC_Read_JoystickA+0x54>)
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= (ADC_CR2_ADON); // turn on adc
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <ADC_Read_JoystickA+0x54>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	4a0b      	ldr	r2, [pc, #44]	; (800053c <ADC_Read_JoystickA+0x54>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART; // start adc convert
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <ADC_Read_JoystickA+0x54>)
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <ADC_Read_JoystickA+0x54>)
 800051c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000520:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & ADC_SR_EOC)) {
 8000522:	bf00      	nop
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <ADC_Read_JoystickA+0x54>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f003 0302 	and.w	r3, r3, #2
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f9      	beq.n	8000524 <ADC_Read_JoystickA+0x3c>
	}; //wait for end of convert

	return ADC1->DR; // read adc data
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <ADC_Read_JoystickA+0x54>)
 8000532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40012400 	.word	0x40012400

08000540 <ADC_Read_JoystickB>:

uint32_t ADC_Read_JoystickB() {
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
	ADC1->CR2 &= ~(ADC_CR2_ADON); // turn of adc
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <ADC_Read_JoystickB+0x54>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <ADC_Read_JoystickB+0x54>)
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	6093      	str	r3, [r2, #8]
	// select 1 channel
	ADC1->SQR1 = 0; // 1 regular channel
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <ADC_Read_JoystickB+0x54>)
 8000552:	2200      	movs	r2, #0
 8000554:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0x00000000;
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <ADC_Read_JoystickB+0x54>)
 8000558:	2200      	movs	r2, #0
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 = 0x00000001; // 1 convert - channel 1
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <ADC_Read_JoystickB+0x54>)
 800055e:	2201      	movs	r2, #1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= (ADC_CR2_ADON); // turn on adc
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <ADC_Read_JoystickB+0x54>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <ADC_Read_JoystickB+0x54>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART; // start adc convert
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <ADC_Read_JoystickB+0x54>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	4a08      	ldr	r2, [pc, #32]	; (8000594 <ADC_Read_JoystickB+0x54>)
 8000574:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000578:	6093      	str	r3, [r2, #8]
	while (!(ADC1->SR & ADC_SR_EOC)) {
 800057a:	bf00      	nop
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <ADC_Read_JoystickB+0x54>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f003 0302 	and.w	r3, r3, #2
 8000584:	2b00      	cmp	r3, #0
 8000586:	d0f9      	beq.n	800057c <ADC_Read_JoystickB+0x3c>
	}; //wait for end of convert

	return ADC1->DR; // read adc data
 8000588:	4b02      	ldr	r3, [pc, #8]	; (8000594 <ADC_Read_JoystickB+0x54>)
 800058a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	40012400 	.word	0x40012400

08000598 <displayBat>:

void displayBat(uint32_t batVal) {
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (batVal < 500) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005a6:	d21e      	bcs.n	80005e6 <displayBat+0x4e>
		GPIOB->ODR |= GPIO_ODR_ODR6;
 80005a8:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <displayBat+0x190>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	4a5e      	ldr	r2, [pc, #376]	; (8000728 <displayBat+0x190>)
 80005ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b2:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR7;
 80005b4:	4b5c      	ldr	r3, [pc, #368]	; (8000728 <displayBat+0x190>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a5b      	ldr	r2, [pc, #364]	; (8000728 <displayBat+0x190>)
 80005ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005be:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR8;
 80005c0:	4b59      	ldr	r3, [pc, #356]	; (8000728 <displayBat+0x190>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	4a58      	ldr	r2, [pc, #352]	; (8000728 <displayBat+0x190>)
 80005c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005ca:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR9;
 80005cc:	4b56      	ldr	r3, [pc, #344]	; (8000728 <displayBat+0x190>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	4a55      	ldr	r2, [pc, #340]	; (8000728 <displayBat+0x190>)
 80005d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005d6:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR10;
 80005d8:	4b53      	ldr	r3, [pc, #332]	; (8000728 <displayBat+0x190>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a52      	ldr	r2, [pc, #328]	; (8000728 <displayBat+0x190>)
 80005de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005e2:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR7;
		GPIOB->ODR |= GPIO_ODR_ODR8;
		GPIOB->ODR |= GPIO_ODR_ODR9;
		GPIOB->ODR |= GPIO_ODR_ODR10;
	}
}
 80005e4:	e09a      	b.n	800071c <displayBat+0x184>
	} else if ((batVal >= 500) && (batVal < 1500)) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ec:	d323      	bcc.n	8000636 <displayBat+0x9e>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f240 52db 	movw	r2, #1499	; 0x5db
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d81e      	bhi.n	8000636 <displayBat+0x9e>
		GPIOB->ODR |= GPIO_ODR_ODR6;
 80005f8:	4b4b      	ldr	r3, [pc, #300]	; (8000728 <displayBat+0x190>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a4a      	ldr	r2, [pc, #296]	; (8000728 <displayBat+0x190>)
 80005fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000602:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR7;
 8000604:	4b48      	ldr	r3, [pc, #288]	; (8000728 <displayBat+0x190>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a47      	ldr	r2, [pc, #284]	; (8000728 <displayBat+0x190>)
 800060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060e:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR8;
 8000610:	4b45      	ldr	r3, [pc, #276]	; (8000728 <displayBat+0x190>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	4a44      	ldr	r2, [pc, #272]	; (8000728 <displayBat+0x190>)
 8000616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800061a:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR9;
 800061c:	4b42      	ldr	r3, [pc, #264]	; (8000728 <displayBat+0x190>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	4a41      	ldr	r2, [pc, #260]	; (8000728 <displayBat+0x190>)
 8000622:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000626:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR10;
 8000628:	4b3f      	ldr	r3, [pc, #252]	; (8000728 <displayBat+0x190>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4a3e      	ldr	r2, [pc, #248]	; (8000728 <displayBat+0x190>)
 800062e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000632:	60d3      	str	r3, [r2, #12]
 8000634:	e072      	b.n	800071c <displayBat+0x184>
	} else if ((batVal >= 1500) && (batVal < 2000)) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f240 52db 	movw	r2, #1499	; 0x5db
 800063c:	4293      	cmp	r3, r2
 800063e:	d922      	bls.n	8000686 <displayBat+0xee>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000646:	d21e      	bcs.n	8000686 <displayBat+0xee>
		GPIOB->ODR |= GPIO_ODR_ODR6;
 8000648:	4b37      	ldr	r3, [pc, #220]	; (8000728 <displayBat+0x190>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4a36      	ldr	r2, [pc, #216]	; (8000728 <displayBat+0x190>)
 800064e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000652:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR7;
 8000654:	4b34      	ldr	r3, [pc, #208]	; (8000728 <displayBat+0x190>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	4a33      	ldr	r2, [pc, #204]	; (8000728 <displayBat+0x190>)
 800065a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065e:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR8;
 8000660:	4b31      	ldr	r3, [pc, #196]	; (8000728 <displayBat+0x190>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	4a30      	ldr	r2, [pc, #192]	; (8000728 <displayBat+0x190>)
 8000666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066a:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR9;
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <displayBat+0x190>)
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <displayBat+0x190>)
 8000672:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000676:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR10;
 8000678:	4b2b      	ldr	r3, [pc, #172]	; (8000728 <displayBat+0x190>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	4a2a      	ldr	r2, [pc, #168]	; (8000728 <displayBat+0x190>)
 800067e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000682:	60d3      	str	r3, [r2, #12]
 8000684:	e04a      	b.n	800071c <displayBat+0x184>
	} else if ((batVal >= 2000) && (batVal < 3000)) {
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800068c:	d323      	bcc.n	80006d6 <displayBat+0x13e>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000694:	4293      	cmp	r3, r2
 8000696:	d81e      	bhi.n	80006d6 <displayBat+0x13e>
		GPIOB->ODR |= GPIO_ODR_ODR6;
 8000698:	4b23      	ldr	r3, [pc, #140]	; (8000728 <displayBat+0x190>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <displayBat+0x190>)
 800069e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006a2:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR7;
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <displayBat+0x190>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	4a1f      	ldr	r2, [pc, #124]	; (8000728 <displayBat+0x190>)
 80006aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ae:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR8;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <displayBat+0x190>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <displayBat+0x190>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006ba:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR9;
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <displayBat+0x190>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <displayBat+0x190>)
 80006c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006c6:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR &= ~GPIO_ODR_ODR10;
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <displayBat+0x190>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4a16      	ldr	r2, [pc, #88]	; (8000728 <displayBat+0x190>)
 80006ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006d2:	60d3      	str	r3, [r2, #12]
 80006d4:	e022      	b.n	800071c <displayBat+0x184>
	} else if ((batVal >= 300)) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80006dc:	d31e      	bcc.n	800071c <displayBat+0x184>
		GPIOB->ODR |= GPIO_ODR_ODR6;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <displayBat+0x190>)
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	4a11      	ldr	r2, [pc, #68]	; (8000728 <displayBat+0x190>)
 80006e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e8:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR7;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <displayBat+0x190>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <displayBat+0x190>)
 80006f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f4:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR8;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <displayBat+0x190>)
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <displayBat+0x190>)
 80006fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000700:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR9;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <displayBat+0x190>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <displayBat+0x190>)
 8000708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070c:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= GPIO_ODR_ODR10;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <displayBat+0x190>)
 8000710:	68db      	ldr	r3, [r3, #12]
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <displayBat+0x190>)
 8000714:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000718:	60d3      	str	r3, [r2, #12]
}
 800071a:	e7ff      	b.n	800071c <displayBat+0x184>
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40010c00 	.word	0x40010c00

0800072c <main>:

int main(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af02      	add	r7, sp, #8
	//setup perif
	// setup clock system
	setupRCCTo72MHz();
 8000732:	f7ff fd93 	bl	800025c <setupRCCTo72MHz>
	setupSysTick();
 8000736:	f7ff fd1b 	bl	8000170 <setupSysTick>
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN
 800073a:	4b51      	ldr	r3, [pc, #324]	; (8000880 <main+0x154>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a50      	ldr	r2, [pc, #320]	; (8000880 <main+0x154>)
 8000740:	f443 7303 	orr.w	r3, r3, #524	; 0x20c
 8000744:	6193      	str	r3, [r2, #24]
			| RCC_APB2ENR_ADC1EN); // turn on clock on ports A, B and ADC1
	//setup PA0 to analog mode
	GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0); //reset PA0 to analog
 8000746:	4b4f      	ldr	r3, [pc, #316]	; (8000884 <main+0x158>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a4e      	ldr	r2, [pc, #312]	; (8000884 <main+0x158>)
 800074c:	f023 030f 	bic.w	r3, r3, #15
 8000750:	6013      	str	r3, [r2, #0]
	//setup PA1 to analog mode
	GPIOA->CRL &= ~(GPIO_CRL_MODE1 | GPIO_CRL_CNF1); //reset PA1 to analog
 8000752:	4b4c      	ldr	r3, [pc, #304]	; (8000884 <main+0x158>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a4b      	ldr	r2, [pc, #300]	; (8000884 <main+0x158>)
 8000758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800075c:	6013      	str	r3, [r2, #0]
	//setup PA4 to analog mode
	GPIOA->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4); //reset PA4 to analog
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <main+0x158>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a48      	ldr	r2, [pc, #288]	; (8000884 <main+0x158>)
 8000764:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000768:	6013      	str	r3, [r2, #0]
	// setup leds
	GPIOB->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0 | GPIO_CRL_MODE1
 800076a:	4b47      	ldr	r3, [pc, #284]	; (8000888 <main+0x15c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a46      	ldr	r2, [pc, #280]	; (8000888 <main+0x15c>)
 8000770:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8000774:	6013      	str	r3, [r2, #0]
			| GPIO_CRL_CNF1 | GPIO_CRL_MODE2 | GPIO_CRL_CNF2 |
			GPIO_CRL_MODE4 | GPIO_CRL_CNF4 | GPIO_CRL_MODE5 | GPIO_CRL_CNF5
			| GPIO_CRL_MODE6 | GPIO_CRL_CNF6 |
			GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
	GPIOB->CRH &= ~( GPIO_CRH_MODE8 | GPIO_CRH_CNF8 | GPIO_CRH_MODE9
 8000776:	4b44      	ldr	r3, [pc, #272]	; (8000888 <main+0x15c>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	4a43      	ldr	r2, [pc, #268]	; (8000888 <main+0x15c>)
 800077c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000780:	f023 030f 	bic.w	r3, r3, #15
 8000784:	6053      	str	r3, [r2, #4]
			| GPIO_CRH_CNF9 |
			GPIO_CRH_MODE10 | GPIO_CRH_CNF10); //reset leds

	GPIOB->CRL |= (GPIO_CRL_MODE0_1 | GPIO_CRL_MODE1_1 | GPIO_CRL_MODE2_1
 8000786:	4b40      	ldr	r3, [pc, #256]	; (8000888 <main+0x15c>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	493f      	ldr	r1, [pc, #252]	; (8000888 <main+0x15c>)
 800078c:	4b3f      	ldr	r3, [pc, #252]	; (800088c <main+0x160>)
 800078e:	4313      	orrs	r3, r2
 8000790:	600b      	str	r3, [r1, #0]
			| GPIO_CRL_MODE4_1 | GPIO_CRL_MODE5_1 |
			GPIO_CRL_MODE6_1 | GPIO_CRL_MODE7_1);
	GPIOB->CRH |= (GPIO_CRH_MODE8_1 | GPIO_CRH_MODE9_1 | GPIO_CRH_MODE10_1); //leds to output with max speed 2MHz
 8000792:	4b3d      	ldr	r3, [pc, #244]	; (8000888 <main+0x15c>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4a3c      	ldr	r2, [pc, #240]	; (8000888 <main+0x15c>)
 8000798:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6053      	str	r3, [r2, #4]

	// setup buttons
	GPIOB->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11); //reset BZ
 80007a2:	4b39      	ldr	r3, [pc, #228]	; (8000888 <main+0x15c>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	4a38      	ldr	r2, [pc, #224]	; (8000888 <main+0x15c>)
 80007a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80007ac:	6053      	str	r3, [r2, #4]
	GPIOA->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <main+0x158>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a34      	ldr	r2, [pc, #208]	; (8000884 <main+0x158>)
 80007b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007b8:	6013      	str	r3, [r2, #0]
			| GPIO_CRL_CNF7); //reset Sp+, Sp-

	GPIOB->CRH |= GPIO_CRH_CNF11_1; //Bz to input pull down
 80007ba:	4b33      	ldr	r3, [pc, #204]	; (8000888 <main+0x15c>)
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4a32      	ldr	r2, [pc, #200]	; (8000888 <main+0x15c>)
 80007c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c4:	6053      	str	r3, [r2, #4]
	GPIOB->ODR |= GPIO_ODR_ODR11;
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <main+0x15c>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <main+0x15c>)
 80007cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d0:	60d3      	str	r3, [r2, #12]
	GPIOA->CRL |= (GPIO_CRL_CNF6_0 | GPIO_CRL_CNF7_0); //Sp+, Sp- to input pull down
 80007d2:	4b2c      	ldr	r3, [pc, #176]	; (8000884 <main+0x158>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a2b      	ldr	r2, [pc, #172]	; (8000884 <main+0x158>)
 80007d8:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 80007dc:	6013      	str	r3, [r2, #0]
	GPIOB->ODR |= (GPIO_ODR_ODR6 | GPIO_ODR_ODR7);
 80007de:	4b2a      	ldr	r3, [pc, #168]	; (8000888 <main+0x15c>)
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	4a29      	ldr	r2, [pc, #164]	; (8000888 <main+0x15c>)
 80007e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80007e8:	60d3      	str	r3, [r2, #12]

	ADC_setup();
 80007ea:	f7ff fce1 	bl	80001b0 <ADC_setup>

	beep(2, 500);
 80007ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff fd6a 	bl	80002cc <beep>

	while (1) {
		uint32_t jA = ADC_Read_JoystickA();
 80007f8:	f7ff fe76 	bl	80004e8 <ADC_Read_JoystickA>
 80007fc:	60f8      	str	r0, [r7, #12]
		uint32_t jB = ADC_Read_JoystickB();
 80007fe:	f7ff fe9f 	bl	8000540 <ADC_Read_JoystickB>
 8000802:	60b8      	str	r0, [r7, #8]
		uint32_t vBat = ADC_Read_VBAT();
 8000804:	f7ff fe42 	bl	800048c <ADC_Read_VBAT>
 8000808:	6078      	str	r0, [r7, #4]
		printf(
 800080a:	4b21      	ldr	r3, [pc, #132]	; (8000890 <main+0x164>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	68f9      	ldr	r1, [r7, #12]
 8000816:	481f      	ldr	r0, [pc, #124]	; (8000894 <main+0x168>)
 8000818:	f000 f88e 	bl	8000938 <iprintf>
				"Joystick Alpha 1: %lu, Joystick Beta 1: %lu, vBat adc data: %lu, speed: %lu",
				jA, jB, vBat, speedDisplay);

		displayBat(vBat);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff febb 	bl	8000598 <displayBat>

		// zomer
		if ((GPIOB->IDR & GPIO_IDR_IDR11) != 0) {
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <main+0x15c>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800082a:	2b00      	cmp	r3, #0
 800082c:	d004      	beq.n	8000838 <main+0x10c>
			beep(1, 1000);
 800082e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000832:	2001      	movs	r0, #1
 8000834:	f7ff fd4a 	bl	80002cc <beep>
		}

		//Sp+
		if ((GPIOB->IDR & GPIO_IDR_IDR6) != 0) {
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <main+0x15c>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000840:	2b00      	cmp	r3, #0
 8000842:	d008      	beq.n	8000856 <main+0x12a>
			if (speedDisplay < 5) {
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <main+0x164>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b04      	cmp	r3, #4
 800084a:	d804      	bhi.n	8000856 <main+0x12a>
				speedDisplay++;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <main+0x164>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <main+0x164>)
 8000854:	6013      	str	r3, [r2, #0]
			}
		}
		//Sp+
		if ((GPIOB->IDR & GPIO_IDR_IDR7) != 0) {
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <main+0x15c>)
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	2b00      	cmp	r3, #0
 8000860:	d008      	beq.n	8000874 <main+0x148>
			if (speedDisplay > 0) {
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <main+0x164>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d004      	beq.n	8000874 <main+0x148>
				speedDisplay--;
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <main+0x164>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	3b01      	subs	r3, #1
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <main+0x164>)
 8000872:	6013      	str	r3, [r2, #0]
			}
		}

		displaySpeed(speedDisplay);
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <main+0x164>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fd4f 	bl	800031c <displaySpeed>
	while (1) {
 800087e:	e7bb      	b.n	80007f8 <main+0xcc>
 8000880:	40021000 	.word	0x40021000
 8000884:	40010800 	.word	0x40010800
 8000888:	40010c00 	.word	0x40010c00
 800088c:	22220222 	.word	0x22220222
 8000890:	20000084 	.word	0x20000084
 8000894:	080018f4 	.word	0x080018f4

08000898 <Reset_Handler>:

/* Call the clock system initialization function.*/
//    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800089a:	490c      	ldr	r1, [pc, #48]	; (80008cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a09      	ldr	r2, [pc, #36]	; (80008d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008b0:	4c09      	ldr	r4, [pc, #36]	; (80008d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f000 f80f 	bl	80008e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c2:	f7ff ff33 	bl	800072c <main>
  bx lr
 80008c6:	4770      	bx	lr
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80008d0:	080019e0 	.word	0x080019e0
  ldr r2, =_sbss
 80008d4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80008d8:	2000009c 	.word	0x2000009c

080008dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC1_2_IRQHandler>
	...

080008e0 <__libc_init_array>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	2600      	movs	r6, #0
 80008e4:	4d0c      	ldr	r5, [pc, #48]	; (8000918 <__libc_init_array+0x38>)
 80008e6:	4c0d      	ldr	r4, [pc, #52]	; (800091c <__libc_init_array+0x3c>)
 80008e8:	1b64      	subs	r4, r4, r5
 80008ea:	10a4      	asrs	r4, r4, #2
 80008ec:	42a6      	cmp	r6, r4
 80008ee:	d109      	bne.n	8000904 <__libc_init_array+0x24>
 80008f0:	f000 fff4 	bl	80018dc <_init>
 80008f4:	2600      	movs	r6, #0
 80008f6:	4d0a      	ldr	r5, [pc, #40]	; (8000920 <__libc_init_array+0x40>)
 80008f8:	4c0a      	ldr	r4, [pc, #40]	; (8000924 <__libc_init_array+0x44>)
 80008fa:	1b64      	subs	r4, r4, r5
 80008fc:	10a4      	asrs	r4, r4, #2
 80008fe:	42a6      	cmp	r6, r4
 8000900:	d105      	bne.n	800090e <__libc_init_array+0x2e>
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f855 3b04 	ldr.w	r3, [r5], #4
 8000908:	4798      	blx	r3
 800090a:	3601      	adds	r6, #1
 800090c:	e7ee      	b.n	80008ec <__libc_init_array+0xc>
 800090e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000912:	4798      	blx	r3
 8000914:	3601      	adds	r6, #1
 8000916:	e7f2      	b.n	80008fe <__libc_init_array+0x1e>
 8000918:	080019d8 	.word	0x080019d8
 800091c:	080019d8 	.word	0x080019d8
 8000920:	080019d8 	.word	0x080019d8
 8000924:	080019dc 	.word	0x080019dc

08000928 <memset>:
 8000928:	4603      	mov	r3, r0
 800092a:	4402      	add	r2, r0
 800092c:	4293      	cmp	r3, r2
 800092e:	d100      	bne.n	8000932 <memset+0xa>
 8000930:	4770      	bx	lr
 8000932:	f803 1b01 	strb.w	r1, [r3], #1
 8000936:	e7f9      	b.n	800092c <memset+0x4>

08000938 <iprintf>:
 8000938:	b40f      	push	{r0, r1, r2, r3}
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <iprintf+0x2c>)
 800093c:	b513      	push	{r0, r1, r4, lr}
 800093e:	681c      	ldr	r4, [r3, #0]
 8000940:	b124      	cbz	r4, 800094c <iprintf+0x14>
 8000942:	69a3      	ldr	r3, [r4, #24]
 8000944:	b913      	cbnz	r3, 800094c <iprintf+0x14>
 8000946:	4620      	mov	r0, r4
 8000948:	f000 f866 	bl	8000a18 <__sinit>
 800094c:	ab05      	add	r3, sp, #20
 800094e:	4620      	mov	r0, r4
 8000950:	9a04      	ldr	r2, [sp, #16]
 8000952:	68a1      	ldr	r1, [r4, #8]
 8000954:	9301      	str	r3, [sp, #4]
 8000956:	f000 f9bb 	bl	8000cd0 <_vfiprintf_r>
 800095a:	b002      	add	sp, #8
 800095c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr
 8000964:	20000000 	.word	0x20000000

08000968 <std>:
 8000968:	2300      	movs	r3, #0
 800096a:	b510      	push	{r4, lr}
 800096c:	4604      	mov	r4, r0
 800096e:	e9c0 3300 	strd	r3, r3, [r0]
 8000972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000976:	6083      	str	r3, [r0, #8]
 8000978:	8181      	strh	r1, [r0, #12]
 800097a:	6643      	str	r3, [r0, #100]	; 0x64
 800097c:	81c2      	strh	r2, [r0, #14]
 800097e:	6183      	str	r3, [r0, #24]
 8000980:	4619      	mov	r1, r3
 8000982:	2208      	movs	r2, #8
 8000984:	305c      	adds	r0, #92	; 0x5c
 8000986:	f7ff ffcf 	bl	8000928 <memset>
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <std+0x38>)
 800098c:	6224      	str	r4, [r4, #32]
 800098e:	6263      	str	r3, [r4, #36]	; 0x24
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <std+0x3c>)
 8000992:	62a3      	str	r3, [r4, #40]	; 0x28
 8000994:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <std+0x40>)
 8000996:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <std+0x44>)
 800099a:	6323      	str	r3, [r4, #48]	; 0x30
 800099c:	bd10      	pop	{r4, pc}
 800099e:	bf00      	nop
 80009a0:	0800127d 	.word	0x0800127d
 80009a4:	0800129f 	.word	0x0800129f
 80009a8:	080012d7 	.word	0x080012d7
 80009ac:	080012fb 	.word	0x080012fb

080009b0 <_cleanup_r>:
 80009b0:	4901      	ldr	r1, [pc, #4]	; (80009b8 <_cleanup_r+0x8>)
 80009b2:	f000 b8af 	b.w	8000b14 <_fwalk_reent>
 80009b6:	bf00      	nop
 80009b8:	080015cd 	.word	0x080015cd

080009bc <__sfmoreglue>:
 80009bc:	2268      	movs	r2, #104	; 0x68
 80009be:	b570      	push	{r4, r5, r6, lr}
 80009c0:	1e4d      	subs	r5, r1, #1
 80009c2:	4355      	muls	r5, r2
 80009c4:	460e      	mov	r6, r1
 80009c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80009ca:	f000 f8e5 	bl	8000b98 <_malloc_r>
 80009ce:	4604      	mov	r4, r0
 80009d0:	b140      	cbz	r0, 80009e4 <__sfmoreglue+0x28>
 80009d2:	2100      	movs	r1, #0
 80009d4:	e9c0 1600 	strd	r1, r6, [r0]
 80009d8:	300c      	adds	r0, #12
 80009da:	60a0      	str	r0, [r4, #8]
 80009dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80009e0:	f7ff ffa2 	bl	8000928 <memset>
 80009e4:	4620      	mov	r0, r4
 80009e6:	bd70      	pop	{r4, r5, r6, pc}

080009e8 <__sfp_lock_acquire>:
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <__sfp_lock_acquire+0x8>)
 80009ea:	f000 b8b3 	b.w	8000b54 <__retarget_lock_acquire_recursive>
 80009ee:	bf00      	nop
 80009f0:	20000089 	.word	0x20000089

080009f4 <__sfp_lock_release>:
 80009f4:	4801      	ldr	r0, [pc, #4]	; (80009fc <__sfp_lock_release+0x8>)
 80009f6:	f000 b8ae 	b.w	8000b56 <__retarget_lock_release_recursive>
 80009fa:	bf00      	nop
 80009fc:	20000089 	.word	0x20000089

08000a00 <__sinit_lock_acquire>:
 8000a00:	4801      	ldr	r0, [pc, #4]	; (8000a08 <__sinit_lock_acquire+0x8>)
 8000a02:	f000 b8a7 	b.w	8000b54 <__retarget_lock_acquire_recursive>
 8000a06:	bf00      	nop
 8000a08:	2000008a 	.word	0x2000008a

08000a0c <__sinit_lock_release>:
 8000a0c:	4801      	ldr	r0, [pc, #4]	; (8000a14 <__sinit_lock_release+0x8>)
 8000a0e:	f000 b8a2 	b.w	8000b56 <__retarget_lock_release_recursive>
 8000a12:	bf00      	nop
 8000a14:	2000008a 	.word	0x2000008a

08000a18 <__sinit>:
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	f7ff fff0 	bl	8000a00 <__sinit_lock_acquire>
 8000a20:	69a3      	ldr	r3, [r4, #24]
 8000a22:	b11b      	cbz	r3, 8000a2c <__sinit+0x14>
 8000a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a28:	f7ff bff0 	b.w	8000a0c <__sinit_lock_release>
 8000a2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000a30:	6523      	str	r3, [r4, #80]	; 0x50
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <__sinit+0x68>)
 8000a34:	4a13      	ldr	r2, [pc, #76]	; (8000a84 <__sinit+0x6c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	62a2      	str	r2, [r4, #40]	; 0x28
 8000a3a:	42a3      	cmp	r3, r4
 8000a3c:	bf08      	it	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	4620      	mov	r0, r4
 8000a42:	bf08      	it	eq
 8000a44:	61a3      	streq	r3, [r4, #24]
 8000a46:	f000 f81f 	bl	8000a88 <__sfp>
 8000a4a:	6060      	str	r0, [r4, #4]
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f000 f81b 	bl	8000a88 <__sfp>
 8000a52:	60a0      	str	r0, [r4, #8]
 8000a54:	4620      	mov	r0, r4
 8000a56:	f000 f817 	bl	8000a88 <__sfp>
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	60e0      	str	r0, [r4, #12]
 8000a60:	6860      	ldr	r0, [r4, #4]
 8000a62:	f7ff ff81 	bl	8000968 <std>
 8000a66:	2201      	movs	r2, #1
 8000a68:	2109      	movs	r1, #9
 8000a6a:	68a0      	ldr	r0, [r4, #8]
 8000a6c:	f7ff ff7c 	bl	8000968 <std>
 8000a70:	2202      	movs	r2, #2
 8000a72:	2112      	movs	r1, #18
 8000a74:	68e0      	ldr	r0, [r4, #12]
 8000a76:	f7ff ff77 	bl	8000968 <std>
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61a3      	str	r3, [r4, #24]
 8000a7e:	e7d1      	b.n	8000a24 <__sinit+0xc>
 8000a80:	08001940 	.word	0x08001940
 8000a84:	080009b1 	.word	0x080009b1

08000a88 <__sfp>:
 8000a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8a:	4607      	mov	r7, r0
 8000a8c:	f7ff ffac 	bl	80009e8 <__sfp_lock_acquire>
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <__sfp+0x84>)
 8000a92:	681e      	ldr	r6, [r3, #0]
 8000a94:	69b3      	ldr	r3, [r6, #24]
 8000a96:	b913      	cbnz	r3, 8000a9e <__sfp+0x16>
 8000a98:	4630      	mov	r0, r6
 8000a9a:	f7ff ffbd 	bl	8000a18 <__sinit>
 8000a9e:	3648      	adds	r6, #72	; 0x48
 8000aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000aa4:	3b01      	subs	r3, #1
 8000aa6:	d503      	bpl.n	8000ab0 <__sfp+0x28>
 8000aa8:	6833      	ldr	r3, [r6, #0]
 8000aaa:	b30b      	cbz	r3, 8000af0 <__sfp+0x68>
 8000aac:	6836      	ldr	r6, [r6, #0]
 8000aae:	e7f7      	b.n	8000aa0 <__sfp+0x18>
 8000ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ab4:	b9d5      	cbnz	r5, 8000aec <__sfp+0x64>
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <__sfp+0x88>)
 8000ab8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000abc:	60e3      	str	r3, [r4, #12]
 8000abe:	6665      	str	r5, [r4, #100]	; 0x64
 8000ac0:	f000 f847 	bl	8000b52 <__retarget_lock_init_recursive>
 8000ac4:	f7ff ff96 	bl	80009f4 <__sfp_lock_release>
 8000ac8:	2208      	movs	r2, #8
 8000aca:	4629      	mov	r1, r5
 8000acc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000ad4:	6025      	str	r5, [r4, #0]
 8000ad6:	61a5      	str	r5, [r4, #24]
 8000ad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000adc:	f7ff ff24 	bl	8000928 <memset>
 8000ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ae8:	4620      	mov	r0, r4
 8000aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000aec:	3468      	adds	r4, #104	; 0x68
 8000aee:	e7d9      	b.n	8000aa4 <__sfp+0x1c>
 8000af0:	2104      	movs	r1, #4
 8000af2:	4638      	mov	r0, r7
 8000af4:	f7ff ff62 	bl	80009bc <__sfmoreglue>
 8000af8:	4604      	mov	r4, r0
 8000afa:	6030      	str	r0, [r6, #0]
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d1d5      	bne.n	8000aac <__sfp+0x24>
 8000b00:	f7ff ff78 	bl	80009f4 <__sfp_lock_release>
 8000b04:	230c      	movs	r3, #12
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	e7ee      	b.n	8000ae8 <__sfp+0x60>
 8000b0a:	bf00      	nop
 8000b0c:	08001940 	.word	0x08001940
 8000b10:	ffff0001 	.word	0xffff0001

08000b14 <_fwalk_reent>:
 8000b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b18:	4606      	mov	r6, r0
 8000b1a:	4688      	mov	r8, r1
 8000b1c:	2700      	movs	r7, #0
 8000b1e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b26:	f1b9 0901 	subs.w	r9, r9, #1
 8000b2a:	d505      	bpl.n	8000b38 <_fwalk_reent+0x24>
 8000b2c:	6824      	ldr	r4, [r4, #0]
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d1f7      	bne.n	8000b22 <_fwalk_reent+0xe>
 8000b32:	4638      	mov	r0, r7
 8000b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b38:	89ab      	ldrh	r3, [r5, #12]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d907      	bls.n	8000b4e <_fwalk_reent+0x3a>
 8000b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b42:	3301      	adds	r3, #1
 8000b44:	d003      	beq.n	8000b4e <_fwalk_reent+0x3a>
 8000b46:	4629      	mov	r1, r5
 8000b48:	4630      	mov	r0, r6
 8000b4a:	47c0      	blx	r8
 8000b4c:	4307      	orrs	r7, r0
 8000b4e:	3568      	adds	r5, #104	; 0x68
 8000b50:	e7e9      	b.n	8000b26 <_fwalk_reent+0x12>

08000b52 <__retarget_lock_init_recursive>:
 8000b52:	4770      	bx	lr

08000b54 <__retarget_lock_acquire_recursive>:
 8000b54:	4770      	bx	lr

08000b56 <__retarget_lock_release_recursive>:
 8000b56:	4770      	bx	lr

08000b58 <sbrk_aligned>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4e0e      	ldr	r6, [pc, #56]	; (8000b94 <sbrk_aligned+0x3c>)
 8000b5c:	460c      	mov	r4, r1
 8000b5e:	6831      	ldr	r1, [r6, #0]
 8000b60:	4605      	mov	r5, r0
 8000b62:	b911      	cbnz	r1, 8000b6a <sbrk_aligned+0x12>
 8000b64:	f000 fb7a 	bl	800125c <_sbrk_r>
 8000b68:	6030      	str	r0, [r6, #0]
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f000 fb75 	bl	800125c <_sbrk_r>
 8000b72:	1c43      	adds	r3, r0, #1
 8000b74:	d00a      	beq.n	8000b8c <sbrk_aligned+0x34>
 8000b76:	1cc4      	adds	r4, r0, #3
 8000b78:	f024 0403 	bic.w	r4, r4, #3
 8000b7c:	42a0      	cmp	r0, r4
 8000b7e:	d007      	beq.n	8000b90 <sbrk_aligned+0x38>
 8000b80:	1a21      	subs	r1, r4, r0
 8000b82:	4628      	mov	r0, r5
 8000b84:	f000 fb6a 	bl	800125c <_sbrk_r>
 8000b88:	3001      	adds	r0, #1
 8000b8a:	d101      	bne.n	8000b90 <sbrk_aligned+0x38>
 8000b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8000b90:	4620      	mov	r0, r4
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	20000090 	.word	0x20000090

08000b98 <_malloc_r>:
 8000b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b9c:	1ccd      	adds	r5, r1, #3
 8000b9e:	f025 0503 	bic.w	r5, r5, #3
 8000ba2:	3508      	adds	r5, #8
 8000ba4:	2d0c      	cmp	r5, #12
 8000ba6:	bf38      	it	cc
 8000ba8:	250c      	movcc	r5, #12
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	4607      	mov	r7, r0
 8000bae:	db01      	blt.n	8000bb4 <_malloc_r+0x1c>
 8000bb0:	42a9      	cmp	r1, r5
 8000bb2:	d905      	bls.n	8000bc0 <_malloc_r+0x28>
 8000bb4:	230c      	movs	r3, #12
 8000bb6:	2600      	movs	r6, #0
 8000bb8:	603b      	str	r3, [r7, #0]
 8000bba:	4630      	mov	r0, r6
 8000bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000bc0:	4e2e      	ldr	r6, [pc, #184]	; (8000c7c <_malloc_r+0xe4>)
 8000bc2:	f000 fdc5 	bl	8001750 <__malloc_lock>
 8000bc6:	6833      	ldr	r3, [r6, #0]
 8000bc8:	461c      	mov	r4, r3
 8000bca:	bb34      	cbnz	r4, 8000c1a <_malloc_r+0x82>
 8000bcc:	4629      	mov	r1, r5
 8000bce:	4638      	mov	r0, r7
 8000bd0:	f7ff ffc2 	bl	8000b58 <sbrk_aligned>
 8000bd4:	1c43      	adds	r3, r0, #1
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	d14d      	bne.n	8000c76 <_malloc_r+0xde>
 8000bda:	6834      	ldr	r4, [r6, #0]
 8000bdc:	4626      	mov	r6, r4
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d140      	bne.n	8000c64 <_malloc_r+0xcc>
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	4631      	mov	r1, r6
 8000be6:	4638      	mov	r0, r7
 8000be8:	eb04 0803 	add.w	r8, r4, r3
 8000bec:	f000 fb36 	bl	800125c <_sbrk_r>
 8000bf0:	4580      	cmp	r8, r0
 8000bf2:	d13a      	bne.n	8000c6a <_malloc_r+0xd2>
 8000bf4:	6821      	ldr	r1, [r4, #0]
 8000bf6:	3503      	adds	r5, #3
 8000bf8:	1a6d      	subs	r5, r5, r1
 8000bfa:	f025 0503 	bic.w	r5, r5, #3
 8000bfe:	3508      	adds	r5, #8
 8000c00:	2d0c      	cmp	r5, #12
 8000c02:	bf38      	it	cc
 8000c04:	250c      	movcc	r5, #12
 8000c06:	4638      	mov	r0, r7
 8000c08:	4629      	mov	r1, r5
 8000c0a:	f7ff ffa5 	bl	8000b58 <sbrk_aligned>
 8000c0e:	3001      	adds	r0, #1
 8000c10:	d02b      	beq.n	8000c6a <_malloc_r+0xd2>
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	442b      	add	r3, r5
 8000c16:	6023      	str	r3, [r4, #0]
 8000c18:	e00e      	b.n	8000c38 <_malloc_r+0xa0>
 8000c1a:	6822      	ldr	r2, [r4, #0]
 8000c1c:	1b52      	subs	r2, r2, r5
 8000c1e:	d41e      	bmi.n	8000c5e <_malloc_r+0xc6>
 8000c20:	2a0b      	cmp	r2, #11
 8000c22:	d916      	bls.n	8000c52 <_malloc_r+0xba>
 8000c24:	1961      	adds	r1, r4, r5
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	6025      	str	r5, [r4, #0]
 8000c2a:	bf18      	it	ne
 8000c2c:	6059      	strne	r1, [r3, #4]
 8000c2e:	6863      	ldr	r3, [r4, #4]
 8000c30:	bf08      	it	eq
 8000c32:	6031      	streq	r1, [r6, #0]
 8000c34:	5162      	str	r2, [r4, r5]
 8000c36:	604b      	str	r3, [r1, #4]
 8000c38:	4638      	mov	r0, r7
 8000c3a:	f104 060b 	add.w	r6, r4, #11
 8000c3e:	f000 fd8d 	bl	800175c <__malloc_unlock>
 8000c42:	f026 0607 	bic.w	r6, r6, #7
 8000c46:	1d23      	adds	r3, r4, #4
 8000c48:	1af2      	subs	r2, r6, r3
 8000c4a:	d0b6      	beq.n	8000bba <_malloc_r+0x22>
 8000c4c:	1b9b      	subs	r3, r3, r6
 8000c4e:	50a3      	str	r3, [r4, r2]
 8000c50:	e7b3      	b.n	8000bba <_malloc_r+0x22>
 8000c52:	6862      	ldr	r2, [r4, #4]
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	bf0c      	ite	eq
 8000c58:	6032      	streq	r2, [r6, #0]
 8000c5a:	605a      	strne	r2, [r3, #4]
 8000c5c:	e7ec      	b.n	8000c38 <_malloc_r+0xa0>
 8000c5e:	4623      	mov	r3, r4
 8000c60:	6864      	ldr	r4, [r4, #4]
 8000c62:	e7b2      	b.n	8000bca <_malloc_r+0x32>
 8000c64:	4634      	mov	r4, r6
 8000c66:	6876      	ldr	r6, [r6, #4]
 8000c68:	e7b9      	b.n	8000bde <_malloc_r+0x46>
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	4638      	mov	r0, r7
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	f000 fd74 	bl	800175c <__malloc_unlock>
 8000c74:	e7a1      	b.n	8000bba <_malloc_r+0x22>
 8000c76:	6025      	str	r5, [r4, #0]
 8000c78:	e7de      	b.n	8000c38 <_malloc_r+0xa0>
 8000c7a:	bf00      	nop
 8000c7c:	2000008c 	.word	0x2000008c

08000c80 <__sfputc_r>:
 8000c80:	6893      	ldr	r3, [r2, #8]
 8000c82:	b410      	push	{r4}
 8000c84:	3b01      	subs	r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	6093      	str	r3, [r2, #8]
 8000c8a:	da07      	bge.n	8000c9c <__sfputc_r+0x1c>
 8000c8c:	6994      	ldr	r4, [r2, #24]
 8000c8e:	42a3      	cmp	r3, r4
 8000c90:	db01      	blt.n	8000c96 <__sfputc_r+0x16>
 8000c92:	290a      	cmp	r1, #10
 8000c94:	d102      	bne.n	8000c9c <__sfputc_r+0x1c>
 8000c96:	bc10      	pop	{r4}
 8000c98:	f000 bb34 	b.w	8001304 <__swbuf_r>
 8000c9c:	6813      	ldr	r3, [r2, #0]
 8000c9e:	1c58      	adds	r0, r3, #1
 8000ca0:	6010      	str	r0, [r2, #0]
 8000ca2:	7019      	strb	r1, [r3, #0]
 8000ca4:	4608      	mov	r0, r1
 8000ca6:	bc10      	pop	{r4}
 8000ca8:	4770      	bx	lr

08000caa <__sfputs_r>:
 8000caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cac:	4606      	mov	r6, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	4614      	mov	r4, r2
 8000cb2:	18d5      	adds	r5, r2, r3
 8000cb4:	42ac      	cmp	r4, r5
 8000cb6:	d101      	bne.n	8000cbc <__sfputs_r+0x12>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e007      	b.n	8000ccc <__sfputs_r+0x22>
 8000cbc:	463a      	mov	r2, r7
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cc4:	f7ff ffdc 	bl	8000c80 <__sfputc_r>
 8000cc8:	1c43      	adds	r3, r0, #1
 8000cca:	d1f3      	bne.n	8000cb4 <__sfputs_r+0xa>
 8000ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cd0 <_vfiprintf_r>:
 8000cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	4614      	mov	r4, r2
 8000cd8:	4698      	mov	r8, r3
 8000cda:	4606      	mov	r6, r0
 8000cdc:	b09d      	sub	sp, #116	; 0x74
 8000cde:	b118      	cbz	r0, 8000ce8 <_vfiprintf_r+0x18>
 8000ce0:	6983      	ldr	r3, [r0, #24]
 8000ce2:	b90b      	cbnz	r3, 8000ce8 <_vfiprintf_r+0x18>
 8000ce4:	f7ff fe98 	bl	8000a18 <__sinit>
 8000ce8:	4b89      	ldr	r3, [pc, #548]	; (8000f10 <_vfiprintf_r+0x240>)
 8000cea:	429d      	cmp	r5, r3
 8000cec:	d11b      	bne.n	8000d26 <_vfiprintf_r+0x56>
 8000cee:	6875      	ldr	r5, [r6, #4]
 8000cf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cf2:	07d9      	lsls	r1, r3, #31
 8000cf4:	d405      	bmi.n	8000d02 <_vfiprintf_r+0x32>
 8000cf6:	89ab      	ldrh	r3, [r5, #12]
 8000cf8:	059a      	lsls	r2, r3, #22
 8000cfa:	d402      	bmi.n	8000d02 <_vfiprintf_r+0x32>
 8000cfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cfe:	f7ff ff29 	bl	8000b54 <__retarget_lock_acquire_recursive>
 8000d02:	89ab      	ldrh	r3, [r5, #12]
 8000d04:	071b      	lsls	r3, r3, #28
 8000d06:	d501      	bpl.n	8000d0c <_vfiprintf_r+0x3c>
 8000d08:	692b      	ldr	r3, [r5, #16]
 8000d0a:	b9eb      	cbnz	r3, 8000d48 <_vfiprintf_r+0x78>
 8000d0c:	4629      	mov	r1, r5
 8000d0e:	4630      	mov	r0, r6
 8000d10:	f000 fb5c 	bl	80013cc <__swsetup_r>
 8000d14:	b1c0      	cbz	r0, 8000d48 <_vfiprintf_r+0x78>
 8000d16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d18:	07dc      	lsls	r4, r3, #31
 8000d1a:	d50e      	bpl.n	8000d3a <_vfiprintf_r+0x6a>
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	b01d      	add	sp, #116	; 0x74
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d26:	4b7b      	ldr	r3, [pc, #492]	; (8000f14 <_vfiprintf_r+0x244>)
 8000d28:	429d      	cmp	r5, r3
 8000d2a:	d101      	bne.n	8000d30 <_vfiprintf_r+0x60>
 8000d2c:	68b5      	ldr	r5, [r6, #8]
 8000d2e:	e7df      	b.n	8000cf0 <_vfiprintf_r+0x20>
 8000d30:	4b79      	ldr	r3, [pc, #484]	; (8000f18 <_vfiprintf_r+0x248>)
 8000d32:	429d      	cmp	r5, r3
 8000d34:	bf08      	it	eq
 8000d36:	68f5      	ldreq	r5, [r6, #12]
 8000d38:	e7da      	b.n	8000cf0 <_vfiprintf_r+0x20>
 8000d3a:	89ab      	ldrh	r3, [r5, #12]
 8000d3c:	0598      	lsls	r0, r3, #22
 8000d3e:	d4ed      	bmi.n	8000d1c <_vfiprintf_r+0x4c>
 8000d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d42:	f7ff ff08 	bl	8000b56 <__retarget_lock_release_recursive>
 8000d46:	e7e9      	b.n	8000d1c <_vfiprintf_r+0x4c>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d52:	2330      	movs	r3, #48	; 0x30
 8000d54:	f04f 0901 	mov.w	r9, #1
 8000d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d5c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000f1c <_vfiprintf_r+0x24c>
 8000d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d64:	4623      	mov	r3, r4
 8000d66:	469a      	mov	sl, r3
 8000d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d6c:	b10a      	cbz	r2, 8000d72 <_vfiprintf_r+0xa2>
 8000d6e:	2a25      	cmp	r2, #37	; 0x25
 8000d70:	d1f9      	bne.n	8000d66 <_vfiprintf_r+0x96>
 8000d72:	ebba 0b04 	subs.w	fp, sl, r4
 8000d76:	d00b      	beq.n	8000d90 <_vfiprintf_r+0xc0>
 8000d78:	465b      	mov	r3, fp
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f7ff ff93 	bl	8000caa <__sfputs_r>
 8000d84:	3001      	adds	r0, #1
 8000d86:	f000 80aa 	beq.w	8000ede <_vfiprintf_r+0x20e>
 8000d8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d8c:	445a      	add	r2, fp
 8000d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8000d90:	f89a 3000 	ldrb.w	r3, [sl]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80a2 	beq.w	8000ede <_vfiprintf_r+0x20e>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000da4:	f10a 0a01 	add.w	sl, sl, #1
 8000da8:	9304      	str	r3, [sp, #16]
 8000daa:	9307      	str	r3, [sp, #28]
 8000dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000db0:	931a      	str	r3, [sp, #104]	; 0x68
 8000db2:	4654      	mov	r4, sl
 8000db4:	2205      	movs	r2, #5
 8000db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dba:	4858      	ldr	r0, [pc, #352]	; (8000f1c <_vfiprintf_r+0x24c>)
 8000dbc:	f000 fcba 	bl	8001734 <memchr>
 8000dc0:	9a04      	ldr	r2, [sp, #16]
 8000dc2:	b9d8      	cbnz	r0, 8000dfc <_vfiprintf_r+0x12c>
 8000dc4:	06d1      	lsls	r1, r2, #27
 8000dc6:	bf44      	itt	mi
 8000dc8:	2320      	movmi	r3, #32
 8000dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dce:	0713      	lsls	r3, r2, #28
 8000dd0:	bf44      	itt	mi
 8000dd2:	232b      	movmi	r3, #43	; 0x2b
 8000dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8000dde:	d015      	beq.n	8000e0c <_vfiprintf_r+0x13c>
 8000de0:	4654      	mov	r4, sl
 8000de2:	2000      	movs	r0, #0
 8000de4:	f04f 0c0a 	mov.w	ip, #10
 8000de8:	9a07      	ldr	r2, [sp, #28]
 8000dea:	4621      	mov	r1, r4
 8000dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000df0:	3b30      	subs	r3, #48	; 0x30
 8000df2:	2b09      	cmp	r3, #9
 8000df4:	d94e      	bls.n	8000e94 <_vfiprintf_r+0x1c4>
 8000df6:	b1b0      	cbz	r0, 8000e26 <_vfiprintf_r+0x156>
 8000df8:	9207      	str	r2, [sp, #28]
 8000dfa:	e014      	b.n	8000e26 <_vfiprintf_r+0x156>
 8000dfc:	eba0 0308 	sub.w	r3, r0, r8
 8000e00:	fa09 f303 	lsl.w	r3, r9, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	46a2      	mov	sl, r4
 8000e08:	9304      	str	r3, [sp, #16]
 8000e0a:	e7d2      	b.n	8000db2 <_vfiprintf_r+0xe2>
 8000e0c:	9b03      	ldr	r3, [sp, #12]
 8000e0e:	1d19      	adds	r1, r3, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	9103      	str	r1, [sp, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	bfbb      	ittet	lt
 8000e18:	425b      	neglt	r3, r3
 8000e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8000e1e:	9307      	strge	r3, [sp, #28]
 8000e20:	9307      	strlt	r3, [sp, #28]
 8000e22:	bfb8      	it	lt
 8000e24:	9204      	strlt	r2, [sp, #16]
 8000e26:	7823      	ldrb	r3, [r4, #0]
 8000e28:	2b2e      	cmp	r3, #46	; 0x2e
 8000e2a:	d10c      	bne.n	8000e46 <_vfiprintf_r+0x176>
 8000e2c:	7863      	ldrb	r3, [r4, #1]
 8000e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e30:	d135      	bne.n	8000e9e <_vfiprintf_r+0x1ce>
 8000e32:	9b03      	ldr	r3, [sp, #12]
 8000e34:	3402      	adds	r4, #2
 8000e36:	1d1a      	adds	r2, r3, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	9203      	str	r2, [sp, #12]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bfb8      	it	lt
 8000e40:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e44:	9305      	str	r3, [sp, #20]
 8000e46:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000f20 <_vfiprintf_r+0x250>
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	4650      	mov	r0, sl
 8000e4e:	7821      	ldrb	r1, [r4, #0]
 8000e50:	f000 fc70 	bl	8001734 <memchr>
 8000e54:	b140      	cbz	r0, 8000e68 <_vfiprintf_r+0x198>
 8000e56:	2340      	movs	r3, #64	; 0x40
 8000e58:	eba0 000a 	sub.w	r0, r0, sl
 8000e5c:	fa03 f000 	lsl.w	r0, r3, r0
 8000e60:	9b04      	ldr	r3, [sp, #16]
 8000e62:	3401      	adds	r4, #1
 8000e64:	4303      	orrs	r3, r0
 8000e66:	9304      	str	r3, [sp, #16]
 8000e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6c:	2206      	movs	r2, #6
 8000e6e:	482d      	ldr	r0, [pc, #180]	; (8000f24 <_vfiprintf_r+0x254>)
 8000e70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e74:	f000 fc5e 	bl	8001734 <memchr>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d03f      	beq.n	8000efc <_vfiprintf_r+0x22c>
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <_vfiprintf_r+0x258>)
 8000e7e:	bb1b      	cbnz	r3, 8000ec8 <_vfiprintf_r+0x1f8>
 8000e80:	9b03      	ldr	r3, [sp, #12]
 8000e82:	3307      	adds	r3, #7
 8000e84:	f023 0307 	bic.w	r3, r3, #7
 8000e88:	3308      	adds	r3, #8
 8000e8a:	9303      	str	r3, [sp, #12]
 8000e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e8e:	443b      	add	r3, r7
 8000e90:	9309      	str	r3, [sp, #36]	; 0x24
 8000e92:	e767      	b.n	8000d64 <_vfiprintf_r+0x94>
 8000e94:	460c      	mov	r4, r1
 8000e96:	2001      	movs	r0, #1
 8000e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e9c:	e7a5      	b.n	8000dea <_vfiprintf_r+0x11a>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f04f 0c0a 	mov.w	ip, #10
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	3401      	adds	r4, #1
 8000ea8:	9305      	str	r3, [sp, #20]
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000eb0:	3a30      	subs	r2, #48	; 0x30
 8000eb2:	2a09      	cmp	r2, #9
 8000eb4:	d903      	bls.n	8000ebe <_vfiprintf_r+0x1ee>
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0c5      	beq.n	8000e46 <_vfiprintf_r+0x176>
 8000eba:	9105      	str	r1, [sp, #20]
 8000ebc:	e7c3      	b.n	8000e46 <_vfiprintf_r+0x176>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ec6:	e7f0      	b.n	8000eaa <_vfiprintf_r+0x1da>
 8000ec8:	ab03      	add	r3, sp, #12
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	462a      	mov	r2, r5
 8000ece:	4630      	mov	r0, r6
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <_vfiprintf_r+0x25c>)
 8000ed2:	a904      	add	r1, sp, #16
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	4607      	mov	r7, r0
 8000eda:	1c78      	adds	r0, r7, #1
 8000edc:	d1d6      	bne.n	8000e8c <_vfiprintf_r+0x1bc>
 8000ede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ee0:	07d9      	lsls	r1, r3, #31
 8000ee2:	d405      	bmi.n	8000ef0 <_vfiprintf_r+0x220>
 8000ee4:	89ab      	ldrh	r3, [r5, #12]
 8000ee6:	059a      	lsls	r2, r3, #22
 8000ee8:	d402      	bmi.n	8000ef0 <_vfiprintf_r+0x220>
 8000eea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000eec:	f7ff fe33 	bl	8000b56 <__retarget_lock_release_recursive>
 8000ef0:	89ab      	ldrh	r3, [r5, #12]
 8000ef2:	065b      	lsls	r3, r3, #25
 8000ef4:	f53f af12 	bmi.w	8000d1c <_vfiprintf_r+0x4c>
 8000ef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000efa:	e711      	b.n	8000d20 <_vfiprintf_r+0x50>
 8000efc:	ab03      	add	r3, sp, #12
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	462a      	mov	r2, r5
 8000f02:	4630      	mov	r0, r6
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <_vfiprintf_r+0x25c>)
 8000f06:	a904      	add	r1, sp, #16
 8000f08:	f000 f882 	bl	8001010 <_printf_i>
 8000f0c:	e7e4      	b.n	8000ed8 <_vfiprintf_r+0x208>
 8000f0e:	bf00      	nop
 8000f10:	08001964 	.word	0x08001964
 8000f14:	08001984 	.word	0x08001984
 8000f18:	08001944 	.word	0x08001944
 8000f1c:	080019a4 	.word	0x080019a4
 8000f20:	080019aa 	.word	0x080019aa
 8000f24:	080019ae 	.word	0x080019ae
 8000f28:	00000000 	.word	0x00000000
 8000f2c:	08000cab 	.word	0x08000cab

08000f30 <_printf_common>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	4616      	mov	r6, r2
 8000f36:	4699      	mov	r9, r3
 8000f38:	688a      	ldr	r2, [r1, #8]
 8000f3a:	690b      	ldr	r3, [r1, #16]
 8000f3c:	4607      	mov	r7, r0
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	bfb8      	it	lt
 8000f42:	4613      	movlt	r3, r2
 8000f44:	6033      	str	r3, [r6, #0]
 8000f46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000f4a:	460c      	mov	r4, r1
 8000f4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000f50:	b10a      	cbz	r2, 8000f56 <_printf_common+0x26>
 8000f52:	3301      	adds	r3, #1
 8000f54:	6033      	str	r3, [r6, #0]
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	0699      	lsls	r1, r3, #26
 8000f5a:	bf42      	ittt	mi
 8000f5c:	6833      	ldrmi	r3, [r6, #0]
 8000f5e:	3302      	addmi	r3, #2
 8000f60:	6033      	strmi	r3, [r6, #0]
 8000f62:	6825      	ldr	r5, [r4, #0]
 8000f64:	f015 0506 	ands.w	r5, r5, #6
 8000f68:	d106      	bne.n	8000f78 <_printf_common+0x48>
 8000f6a:	f104 0a19 	add.w	sl, r4, #25
 8000f6e:	68e3      	ldr	r3, [r4, #12]
 8000f70:	6832      	ldr	r2, [r6, #0]
 8000f72:	1a9b      	subs	r3, r3, r2
 8000f74:	42ab      	cmp	r3, r5
 8000f76:	dc28      	bgt.n	8000fca <_printf_common+0x9a>
 8000f78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000f7c:	1e13      	subs	r3, r2, #0
 8000f7e:	6822      	ldr	r2, [r4, #0]
 8000f80:	bf18      	it	ne
 8000f82:	2301      	movne	r3, #1
 8000f84:	0692      	lsls	r2, r2, #26
 8000f86:	d42d      	bmi.n	8000fe4 <_printf_common+0xb4>
 8000f88:	4649      	mov	r1, r9
 8000f8a:	4638      	mov	r0, r7
 8000f8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000f90:	47c0      	blx	r8
 8000f92:	3001      	adds	r0, #1
 8000f94:	d020      	beq.n	8000fd8 <_printf_common+0xa8>
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	68e5      	ldr	r5, [r4, #12]
 8000f9a:	f003 0306 	and.w	r3, r3, #6
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	2500      	movne	r5, #0
 8000fa4:	6832      	ldr	r2, [r6, #0]
 8000fa6:	f04f 0600 	mov.w	r6, #0
 8000faa:	68a3      	ldr	r3, [r4, #8]
 8000fac:	bf08      	it	eq
 8000fae:	1aad      	subeq	r5, r5, r2
 8000fb0:	6922      	ldr	r2, [r4, #16]
 8000fb2:	bf08      	it	eq
 8000fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	bfc4      	itt	gt
 8000fbc:	1a9b      	subgt	r3, r3, r2
 8000fbe:	18ed      	addgt	r5, r5, r3
 8000fc0:	341a      	adds	r4, #26
 8000fc2:	42b5      	cmp	r5, r6
 8000fc4:	d11a      	bne.n	8000ffc <_printf_common+0xcc>
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	e008      	b.n	8000fdc <_printf_common+0xac>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	4652      	mov	r2, sl
 8000fce:	4649      	mov	r1, r9
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	47c0      	blx	r8
 8000fd4:	3001      	adds	r0, #1
 8000fd6:	d103      	bne.n	8000fe0 <_printf_common+0xb0>
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe0:	3501      	adds	r5, #1
 8000fe2:	e7c4      	b.n	8000f6e <_printf_common+0x3e>
 8000fe4:	2030      	movs	r0, #48	; 0x30
 8000fe6:	18e1      	adds	r1, r4, r3
 8000fe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ff2:	4422      	add	r2, r4
 8000ff4:	3302      	adds	r3, #2
 8000ff6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ffa:	e7c5      	b.n	8000f88 <_printf_common+0x58>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	4622      	mov	r2, r4
 8001000:	4649      	mov	r1, r9
 8001002:	4638      	mov	r0, r7
 8001004:	47c0      	blx	r8
 8001006:	3001      	adds	r0, #1
 8001008:	d0e6      	beq.n	8000fd8 <_printf_common+0xa8>
 800100a:	3601      	adds	r6, #1
 800100c:	e7d9      	b.n	8000fc2 <_printf_common+0x92>
	...

08001010 <_printf_i>:
 8001010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001014:	7e0f      	ldrb	r7, [r1, #24]
 8001016:	4691      	mov	r9, r2
 8001018:	2f78      	cmp	r7, #120	; 0x78
 800101a:	4680      	mov	r8, r0
 800101c:	460c      	mov	r4, r1
 800101e:	469a      	mov	sl, r3
 8001020:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001026:	d807      	bhi.n	8001038 <_printf_i+0x28>
 8001028:	2f62      	cmp	r7, #98	; 0x62
 800102a:	d80a      	bhi.n	8001042 <_printf_i+0x32>
 800102c:	2f00      	cmp	r7, #0
 800102e:	f000 80d9 	beq.w	80011e4 <_printf_i+0x1d4>
 8001032:	2f58      	cmp	r7, #88	; 0x58
 8001034:	f000 80a4 	beq.w	8001180 <_printf_i+0x170>
 8001038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800103c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001040:	e03a      	b.n	80010b8 <_printf_i+0xa8>
 8001042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001046:	2b15      	cmp	r3, #21
 8001048:	d8f6      	bhi.n	8001038 <_printf_i+0x28>
 800104a:	a101      	add	r1, pc, #4	; (adr r1, 8001050 <_printf_i+0x40>)
 800104c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001050:	080010a9 	.word	0x080010a9
 8001054:	080010bd 	.word	0x080010bd
 8001058:	08001039 	.word	0x08001039
 800105c:	08001039 	.word	0x08001039
 8001060:	08001039 	.word	0x08001039
 8001064:	08001039 	.word	0x08001039
 8001068:	080010bd 	.word	0x080010bd
 800106c:	08001039 	.word	0x08001039
 8001070:	08001039 	.word	0x08001039
 8001074:	08001039 	.word	0x08001039
 8001078:	08001039 	.word	0x08001039
 800107c:	080011cb 	.word	0x080011cb
 8001080:	080010ed 	.word	0x080010ed
 8001084:	080011ad 	.word	0x080011ad
 8001088:	08001039 	.word	0x08001039
 800108c:	08001039 	.word	0x08001039
 8001090:	080011ed 	.word	0x080011ed
 8001094:	08001039 	.word	0x08001039
 8001098:	080010ed 	.word	0x080010ed
 800109c:	08001039 	.word	0x08001039
 80010a0:	08001039 	.word	0x08001039
 80010a4:	080011b5 	.word	0x080011b5
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	1d1a      	adds	r2, r3, #4
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	602a      	str	r2, [r5, #0]
 80010b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0a4      	b.n	8001206 <_printf_i+0x1f6>
 80010bc:	6820      	ldr	r0, [r4, #0]
 80010be:	6829      	ldr	r1, [r5, #0]
 80010c0:	0606      	lsls	r6, r0, #24
 80010c2:	f101 0304 	add.w	r3, r1, #4
 80010c6:	d50a      	bpl.n	80010de <_printf_i+0xce>
 80010c8:	680e      	ldr	r6, [r1, #0]
 80010ca:	602b      	str	r3, [r5, #0]
 80010cc:	2e00      	cmp	r6, #0
 80010ce:	da03      	bge.n	80010d8 <_printf_i+0xc8>
 80010d0:	232d      	movs	r3, #45	; 0x2d
 80010d2:	4276      	negs	r6, r6
 80010d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010d8:	230a      	movs	r3, #10
 80010da:	485e      	ldr	r0, [pc, #376]	; (8001254 <_printf_i+0x244>)
 80010dc:	e019      	b.n	8001112 <_printf_i+0x102>
 80010de:	680e      	ldr	r6, [r1, #0]
 80010e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80010e4:	602b      	str	r3, [r5, #0]
 80010e6:	bf18      	it	ne
 80010e8:	b236      	sxthne	r6, r6
 80010ea:	e7ef      	b.n	80010cc <_printf_i+0xbc>
 80010ec:	682b      	ldr	r3, [r5, #0]
 80010ee:	6820      	ldr	r0, [r4, #0]
 80010f0:	1d19      	adds	r1, r3, #4
 80010f2:	6029      	str	r1, [r5, #0]
 80010f4:	0601      	lsls	r1, r0, #24
 80010f6:	d501      	bpl.n	80010fc <_printf_i+0xec>
 80010f8:	681e      	ldr	r6, [r3, #0]
 80010fa:	e002      	b.n	8001102 <_printf_i+0xf2>
 80010fc:	0646      	lsls	r6, r0, #25
 80010fe:	d5fb      	bpl.n	80010f8 <_printf_i+0xe8>
 8001100:	881e      	ldrh	r6, [r3, #0]
 8001102:	2f6f      	cmp	r7, #111	; 0x6f
 8001104:	bf0c      	ite	eq
 8001106:	2308      	moveq	r3, #8
 8001108:	230a      	movne	r3, #10
 800110a:	4852      	ldr	r0, [pc, #328]	; (8001254 <_printf_i+0x244>)
 800110c:	2100      	movs	r1, #0
 800110e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001112:	6865      	ldr	r5, [r4, #4]
 8001114:	2d00      	cmp	r5, #0
 8001116:	bfa8      	it	ge
 8001118:	6821      	ldrge	r1, [r4, #0]
 800111a:	60a5      	str	r5, [r4, #8]
 800111c:	bfa4      	itt	ge
 800111e:	f021 0104 	bicge.w	r1, r1, #4
 8001122:	6021      	strge	r1, [r4, #0]
 8001124:	b90e      	cbnz	r6, 800112a <_printf_i+0x11a>
 8001126:	2d00      	cmp	r5, #0
 8001128:	d04d      	beq.n	80011c6 <_printf_i+0x1b6>
 800112a:	4615      	mov	r5, r2
 800112c:	fbb6 f1f3 	udiv	r1, r6, r3
 8001130:	fb03 6711 	mls	r7, r3, r1, r6
 8001134:	5dc7      	ldrb	r7, [r0, r7]
 8001136:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800113a:	4637      	mov	r7, r6
 800113c:	42bb      	cmp	r3, r7
 800113e:	460e      	mov	r6, r1
 8001140:	d9f4      	bls.n	800112c <_printf_i+0x11c>
 8001142:	2b08      	cmp	r3, #8
 8001144:	d10b      	bne.n	800115e <_printf_i+0x14e>
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	07de      	lsls	r6, r3, #31
 800114a:	d508      	bpl.n	800115e <_printf_i+0x14e>
 800114c:	6923      	ldr	r3, [r4, #16]
 800114e:	6861      	ldr	r1, [r4, #4]
 8001150:	4299      	cmp	r1, r3
 8001152:	bfde      	ittt	le
 8001154:	2330      	movle	r3, #48	; 0x30
 8001156:	f805 3c01 	strble.w	r3, [r5, #-1]
 800115a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800115e:	1b52      	subs	r2, r2, r5
 8001160:	6122      	str	r2, [r4, #16]
 8001162:	464b      	mov	r3, r9
 8001164:	4621      	mov	r1, r4
 8001166:	4640      	mov	r0, r8
 8001168:	f8cd a000 	str.w	sl, [sp]
 800116c:	aa03      	add	r2, sp, #12
 800116e:	f7ff fedf 	bl	8000f30 <_printf_common>
 8001172:	3001      	adds	r0, #1
 8001174:	d14c      	bne.n	8001210 <_printf_i+0x200>
 8001176:	f04f 30ff 	mov.w	r0, #4294967295
 800117a:	b004      	add	sp, #16
 800117c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001180:	4834      	ldr	r0, [pc, #208]	; (8001254 <_printf_i+0x244>)
 8001182:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001186:	6829      	ldr	r1, [r5, #0]
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	f851 6b04 	ldr.w	r6, [r1], #4
 800118e:	6029      	str	r1, [r5, #0]
 8001190:	061d      	lsls	r5, r3, #24
 8001192:	d514      	bpl.n	80011be <_printf_i+0x1ae>
 8001194:	07df      	lsls	r7, r3, #31
 8001196:	bf44      	itt	mi
 8001198:	f043 0320 	orrmi.w	r3, r3, #32
 800119c:	6023      	strmi	r3, [r4, #0]
 800119e:	b91e      	cbnz	r6, 80011a8 <_printf_i+0x198>
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	f023 0320 	bic.w	r3, r3, #32
 80011a6:	6023      	str	r3, [r4, #0]
 80011a8:	2310      	movs	r3, #16
 80011aa:	e7af      	b.n	800110c <_printf_i+0xfc>
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	f043 0320 	orr.w	r3, r3, #32
 80011b2:	6023      	str	r3, [r4, #0]
 80011b4:	2378      	movs	r3, #120	; 0x78
 80011b6:	4828      	ldr	r0, [pc, #160]	; (8001258 <_printf_i+0x248>)
 80011b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80011bc:	e7e3      	b.n	8001186 <_printf_i+0x176>
 80011be:	0659      	lsls	r1, r3, #25
 80011c0:	bf48      	it	mi
 80011c2:	b2b6      	uxthmi	r6, r6
 80011c4:	e7e6      	b.n	8001194 <_printf_i+0x184>
 80011c6:	4615      	mov	r5, r2
 80011c8:	e7bb      	b.n	8001142 <_printf_i+0x132>
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	6826      	ldr	r6, [r4, #0]
 80011ce:	1d18      	adds	r0, r3, #4
 80011d0:	6961      	ldr	r1, [r4, #20]
 80011d2:	6028      	str	r0, [r5, #0]
 80011d4:	0635      	lsls	r5, r6, #24
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	d501      	bpl.n	80011de <_printf_i+0x1ce>
 80011da:	6019      	str	r1, [r3, #0]
 80011dc:	e002      	b.n	80011e4 <_printf_i+0x1d4>
 80011de:	0670      	lsls	r0, r6, #25
 80011e0:	d5fb      	bpl.n	80011da <_printf_i+0x1ca>
 80011e2:	8019      	strh	r1, [r3, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	4615      	mov	r5, r2
 80011e8:	6123      	str	r3, [r4, #16]
 80011ea:	e7ba      	b.n	8001162 <_printf_i+0x152>
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	2100      	movs	r1, #0
 80011f0:	1d1a      	adds	r2, r3, #4
 80011f2:	602a      	str	r2, [r5, #0]
 80011f4:	681d      	ldr	r5, [r3, #0]
 80011f6:	6862      	ldr	r2, [r4, #4]
 80011f8:	4628      	mov	r0, r5
 80011fa:	f000 fa9b 	bl	8001734 <memchr>
 80011fe:	b108      	cbz	r0, 8001204 <_printf_i+0x1f4>
 8001200:	1b40      	subs	r0, r0, r5
 8001202:	6060      	str	r0, [r4, #4]
 8001204:	6863      	ldr	r3, [r4, #4]
 8001206:	6123      	str	r3, [r4, #16]
 8001208:	2300      	movs	r3, #0
 800120a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800120e:	e7a8      	b.n	8001162 <_printf_i+0x152>
 8001210:	462a      	mov	r2, r5
 8001212:	4649      	mov	r1, r9
 8001214:	4640      	mov	r0, r8
 8001216:	6923      	ldr	r3, [r4, #16]
 8001218:	47d0      	blx	sl
 800121a:	3001      	adds	r0, #1
 800121c:	d0ab      	beq.n	8001176 <_printf_i+0x166>
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	079b      	lsls	r3, r3, #30
 8001222:	d413      	bmi.n	800124c <_printf_i+0x23c>
 8001224:	68e0      	ldr	r0, [r4, #12]
 8001226:	9b03      	ldr	r3, [sp, #12]
 8001228:	4298      	cmp	r0, r3
 800122a:	bfb8      	it	lt
 800122c:	4618      	movlt	r0, r3
 800122e:	e7a4      	b.n	800117a <_printf_i+0x16a>
 8001230:	2301      	movs	r3, #1
 8001232:	4632      	mov	r2, r6
 8001234:	4649      	mov	r1, r9
 8001236:	4640      	mov	r0, r8
 8001238:	47d0      	blx	sl
 800123a:	3001      	adds	r0, #1
 800123c:	d09b      	beq.n	8001176 <_printf_i+0x166>
 800123e:	3501      	adds	r5, #1
 8001240:	68e3      	ldr	r3, [r4, #12]
 8001242:	9903      	ldr	r1, [sp, #12]
 8001244:	1a5b      	subs	r3, r3, r1
 8001246:	42ab      	cmp	r3, r5
 8001248:	dcf2      	bgt.n	8001230 <_printf_i+0x220>
 800124a:	e7eb      	b.n	8001224 <_printf_i+0x214>
 800124c:	2500      	movs	r5, #0
 800124e:	f104 0619 	add.w	r6, r4, #25
 8001252:	e7f5      	b.n	8001240 <_printf_i+0x230>
 8001254:	080019b5 	.word	0x080019b5
 8001258:	080019c6 	.word	0x080019c6

0800125c <_sbrk_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	2300      	movs	r3, #0
 8001260:	4d05      	ldr	r5, [pc, #20]	; (8001278 <_sbrk_r+0x1c>)
 8001262:	4604      	mov	r4, r0
 8001264:	4608      	mov	r0, r1
 8001266:	602b      	str	r3, [r5, #0]
 8001268:	f000 fb22 	bl	80018b0 <_sbrk>
 800126c:	1c43      	adds	r3, r0, #1
 800126e:	d102      	bne.n	8001276 <_sbrk_r+0x1a>
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	b103      	cbz	r3, 8001276 <_sbrk_r+0x1a>
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	bd38      	pop	{r3, r4, r5, pc}
 8001278:	20000094 	.word	0x20000094

0800127c <__sread>:
 800127c:	b510      	push	{r4, lr}
 800127e:	460c      	mov	r4, r1
 8001280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001284:	f000 fab8 	bl	80017f8 <_read_r>
 8001288:	2800      	cmp	r0, #0
 800128a:	bfab      	itete	ge
 800128c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800128e:	89a3      	ldrhlt	r3, [r4, #12]
 8001290:	181b      	addge	r3, r3, r0
 8001292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001296:	bfac      	ite	ge
 8001298:	6563      	strge	r3, [r4, #84]	; 0x54
 800129a:	81a3      	strhlt	r3, [r4, #12]
 800129c:	bd10      	pop	{r4, pc}

0800129e <__swrite>:
 800129e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012a2:	461f      	mov	r7, r3
 80012a4:	898b      	ldrh	r3, [r1, #12]
 80012a6:	4605      	mov	r5, r0
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	460c      	mov	r4, r1
 80012ac:	4616      	mov	r6, r2
 80012ae:	d505      	bpl.n	80012bc <__swrite+0x1e>
 80012b0:	2302      	movs	r3, #2
 80012b2:	2200      	movs	r2, #0
 80012b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012b8:	f000 f9c4 	bl	8001644 <_lseek_r>
 80012bc:	89a3      	ldrh	r3, [r4, #12]
 80012be:	4632      	mov	r2, r6
 80012c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012c4:	81a3      	strh	r3, [r4, #12]
 80012c6:	4628      	mov	r0, r5
 80012c8:	463b      	mov	r3, r7
 80012ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80012ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012d2:	f000 b869 	b.w	80013a8 <_write_r>

080012d6 <__sseek>:
 80012d6:	b510      	push	{r4, lr}
 80012d8:	460c      	mov	r4, r1
 80012da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012de:	f000 f9b1 	bl	8001644 <_lseek_r>
 80012e2:	1c43      	adds	r3, r0, #1
 80012e4:	89a3      	ldrh	r3, [r4, #12]
 80012e6:	bf15      	itete	ne
 80012e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80012ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80012ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80012f2:	81a3      	strheq	r3, [r4, #12]
 80012f4:	bf18      	it	ne
 80012f6:	81a3      	strhne	r3, [r4, #12]
 80012f8:	bd10      	pop	{r4, pc}

080012fa <__sclose>:
 80012fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012fe:	f000 b8d3 	b.w	80014a8 <_close_r>
	...

08001304 <__swbuf_r>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	460e      	mov	r6, r1
 8001308:	4614      	mov	r4, r2
 800130a:	4605      	mov	r5, r0
 800130c:	b118      	cbz	r0, 8001316 <__swbuf_r+0x12>
 800130e:	6983      	ldr	r3, [r0, #24]
 8001310:	b90b      	cbnz	r3, 8001316 <__swbuf_r+0x12>
 8001312:	f7ff fb81 	bl	8000a18 <__sinit>
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <__swbuf_r+0x98>)
 8001318:	429c      	cmp	r4, r3
 800131a:	d12b      	bne.n	8001374 <__swbuf_r+0x70>
 800131c:	686c      	ldr	r4, [r5, #4]
 800131e:	69a3      	ldr	r3, [r4, #24]
 8001320:	60a3      	str	r3, [r4, #8]
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	071a      	lsls	r2, r3, #28
 8001326:	d52f      	bpl.n	8001388 <__swbuf_r+0x84>
 8001328:	6923      	ldr	r3, [r4, #16]
 800132a:	b36b      	cbz	r3, 8001388 <__swbuf_r+0x84>
 800132c:	6923      	ldr	r3, [r4, #16]
 800132e:	6820      	ldr	r0, [r4, #0]
 8001330:	b2f6      	uxtb	r6, r6
 8001332:	1ac0      	subs	r0, r0, r3
 8001334:	6963      	ldr	r3, [r4, #20]
 8001336:	4637      	mov	r7, r6
 8001338:	4283      	cmp	r3, r0
 800133a:	dc04      	bgt.n	8001346 <__swbuf_r+0x42>
 800133c:	4621      	mov	r1, r4
 800133e:	4628      	mov	r0, r5
 8001340:	f000 f944 	bl	80015cc <_fflush_r>
 8001344:	bb30      	cbnz	r0, 8001394 <__swbuf_r+0x90>
 8001346:	68a3      	ldr	r3, [r4, #8]
 8001348:	3001      	adds	r0, #1
 800134a:	3b01      	subs	r3, #1
 800134c:	60a3      	str	r3, [r4, #8]
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	6022      	str	r2, [r4, #0]
 8001354:	701e      	strb	r6, [r3, #0]
 8001356:	6963      	ldr	r3, [r4, #20]
 8001358:	4283      	cmp	r3, r0
 800135a:	d004      	beq.n	8001366 <__swbuf_r+0x62>
 800135c:	89a3      	ldrh	r3, [r4, #12]
 800135e:	07db      	lsls	r3, r3, #31
 8001360:	d506      	bpl.n	8001370 <__swbuf_r+0x6c>
 8001362:	2e0a      	cmp	r6, #10
 8001364:	d104      	bne.n	8001370 <__swbuf_r+0x6c>
 8001366:	4621      	mov	r1, r4
 8001368:	4628      	mov	r0, r5
 800136a:	f000 f92f 	bl	80015cc <_fflush_r>
 800136e:	b988      	cbnz	r0, 8001394 <__swbuf_r+0x90>
 8001370:	4638      	mov	r0, r7
 8001372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <__swbuf_r+0x9c>)
 8001376:	429c      	cmp	r4, r3
 8001378:	d101      	bne.n	800137e <__swbuf_r+0x7a>
 800137a:	68ac      	ldr	r4, [r5, #8]
 800137c:	e7cf      	b.n	800131e <__swbuf_r+0x1a>
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <__swbuf_r+0xa0>)
 8001380:	429c      	cmp	r4, r3
 8001382:	bf08      	it	eq
 8001384:	68ec      	ldreq	r4, [r5, #12]
 8001386:	e7ca      	b.n	800131e <__swbuf_r+0x1a>
 8001388:	4621      	mov	r1, r4
 800138a:	4628      	mov	r0, r5
 800138c:	f000 f81e 	bl	80013cc <__swsetup_r>
 8001390:	2800      	cmp	r0, #0
 8001392:	d0cb      	beq.n	800132c <__swbuf_r+0x28>
 8001394:	f04f 37ff 	mov.w	r7, #4294967295
 8001398:	e7ea      	b.n	8001370 <__swbuf_r+0x6c>
 800139a:	bf00      	nop
 800139c:	08001964 	.word	0x08001964
 80013a0:	08001984 	.word	0x08001984
 80013a4:	08001944 	.word	0x08001944

080013a8 <_write_r>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	4604      	mov	r4, r0
 80013ac:	4608      	mov	r0, r1
 80013ae:	4611      	mov	r1, r2
 80013b0:	2200      	movs	r2, #0
 80013b2:	4d05      	ldr	r5, [pc, #20]	; (80013c8 <_write_r+0x20>)
 80013b4:	602a      	str	r2, [r5, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f000 fa88 	bl	80018cc <_write>
 80013bc:	1c43      	adds	r3, r0, #1
 80013be:	d102      	bne.n	80013c6 <_write_r+0x1e>
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	b103      	cbz	r3, 80013c6 <_write_r+0x1e>
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
 80013c8:	20000094 	.word	0x20000094

080013cc <__swsetup_r>:
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <__swsetup_r+0xcc>)
 80013ce:	b570      	push	{r4, r5, r6, lr}
 80013d0:	681d      	ldr	r5, [r3, #0]
 80013d2:	4606      	mov	r6, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	b125      	cbz	r5, 80013e2 <__swsetup_r+0x16>
 80013d8:	69ab      	ldr	r3, [r5, #24]
 80013da:	b913      	cbnz	r3, 80013e2 <__swsetup_r+0x16>
 80013dc:	4628      	mov	r0, r5
 80013de:	f7ff fb1b 	bl	8000a18 <__sinit>
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <__swsetup_r+0xd0>)
 80013e4:	429c      	cmp	r4, r3
 80013e6:	d10f      	bne.n	8001408 <__swsetup_r+0x3c>
 80013e8:	686c      	ldr	r4, [r5, #4]
 80013ea:	89a3      	ldrh	r3, [r4, #12]
 80013ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80013f0:	0719      	lsls	r1, r3, #28
 80013f2:	d42c      	bmi.n	800144e <__swsetup_r+0x82>
 80013f4:	06dd      	lsls	r5, r3, #27
 80013f6:	d411      	bmi.n	800141c <__swsetup_r+0x50>
 80013f8:	2309      	movs	r3, #9
 80013fa:	6033      	str	r3, [r6, #0]
 80013fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	81a3      	strh	r3, [r4, #12]
 8001406:	e03e      	b.n	8001486 <__swsetup_r+0xba>
 8001408:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <__swsetup_r+0xd4>)
 800140a:	429c      	cmp	r4, r3
 800140c:	d101      	bne.n	8001412 <__swsetup_r+0x46>
 800140e:	68ac      	ldr	r4, [r5, #8]
 8001410:	e7eb      	b.n	80013ea <__swsetup_r+0x1e>
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <__swsetup_r+0xd8>)
 8001414:	429c      	cmp	r4, r3
 8001416:	bf08      	it	eq
 8001418:	68ec      	ldreq	r4, [r5, #12]
 800141a:	e7e6      	b.n	80013ea <__swsetup_r+0x1e>
 800141c:	0758      	lsls	r0, r3, #29
 800141e:	d512      	bpl.n	8001446 <__swsetup_r+0x7a>
 8001420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001422:	b141      	cbz	r1, 8001436 <__swsetup_r+0x6a>
 8001424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001428:	4299      	cmp	r1, r3
 800142a:	d002      	beq.n	8001432 <__swsetup_r+0x66>
 800142c:	4630      	mov	r0, r6
 800142e:	f000 f99b 	bl	8001768 <_free_r>
 8001432:	2300      	movs	r3, #0
 8001434:	6363      	str	r3, [r4, #52]	; 0x34
 8001436:	89a3      	ldrh	r3, [r4, #12]
 8001438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800143c:	81a3      	strh	r3, [r4, #12]
 800143e:	2300      	movs	r3, #0
 8001440:	6063      	str	r3, [r4, #4]
 8001442:	6923      	ldr	r3, [r4, #16]
 8001444:	6023      	str	r3, [r4, #0]
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	f043 0308 	orr.w	r3, r3, #8
 800144c:	81a3      	strh	r3, [r4, #12]
 800144e:	6923      	ldr	r3, [r4, #16]
 8001450:	b94b      	cbnz	r3, 8001466 <__swsetup_r+0x9a>
 8001452:	89a3      	ldrh	r3, [r4, #12]
 8001454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800145c:	d003      	beq.n	8001466 <__swsetup_r+0x9a>
 800145e:	4621      	mov	r1, r4
 8001460:	4630      	mov	r0, r6
 8001462:	f000 f927 	bl	80016b4 <__smakebuf_r>
 8001466:	89a0      	ldrh	r0, [r4, #12]
 8001468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800146c:	f010 0301 	ands.w	r3, r0, #1
 8001470:	d00a      	beq.n	8001488 <__swsetup_r+0xbc>
 8001472:	2300      	movs	r3, #0
 8001474:	60a3      	str	r3, [r4, #8]
 8001476:	6963      	ldr	r3, [r4, #20]
 8001478:	425b      	negs	r3, r3
 800147a:	61a3      	str	r3, [r4, #24]
 800147c:	6923      	ldr	r3, [r4, #16]
 800147e:	b943      	cbnz	r3, 8001492 <__swsetup_r+0xc6>
 8001480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001484:	d1ba      	bne.n	80013fc <__swsetup_r+0x30>
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	0781      	lsls	r1, r0, #30
 800148a:	bf58      	it	pl
 800148c:	6963      	ldrpl	r3, [r4, #20]
 800148e:	60a3      	str	r3, [r4, #8]
 8001490:	e7f4      	b.n	800147c <__swsetup_r+0xb0>
 8001492:	2000      	movs	r0, #0
 8001494:	e7f7      	b.n	8001486 <__swsetup_r+0xba>
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000
 800149c:	08001964 	.word	0x08001964
 80014a0:	08001984 	.word	0x08001984
 80014a4:	08001944 	.word	0x08001944

080014a8 <_close_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	2300      	movs	r3, #0
 80014ac:	4d05      	ldr	r5, [pc, #20]	; (80014c4 <_close_r+0x1c>)
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	602b      	str	r3, [r5, #0]
 80014b4:	f000 f9d4 	bl	8001860 <_close>
 80014b8:	1c43      	adds	r3, r0, #1
 80014ba:	d102      	bne.n	80014c2 <_close_r+0x1a>
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	b103      	cbz	r3, 80014c2 <_close_r+0x1a>
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
 80014c4:	20000094 	.word	0x20000094

080014c8 <__sflush_r>:
 80014c8:	898a      	ldrh	r2, [r1, #12]
 80014ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014cc:	4605      	mov	r5, r0
 80014ce:	0710      	lsls	r0, r2, #28
 80014d0:	460c      	mov	r4, r1
 80014d2:	d457      	bmi.n	8001584 <__sflush_r+0xbc>
 80014d4:	684b      	ldr	r3, [r1, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dc04      	bgt.n	80014e4 <__sflush_r+0x1c>
 80014da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014dc:	2b00      	cmp	r3, #0
 80014de:	dc01      	bgt.n	80014e4 <__sflush_r+0x1c>
 80014e0:	2000      	movs	r0, #0
 80014e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d0fa      	beq.n	80014e0 <__sflush_r+0x18>
 80014ea:	2300      	movs	r3, #0
 80014ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014f0:	682f      	ldr	r7, [r5, #0]
 80014f2:	602b      	str	r3, [r5, #0]
 80014f4:	d032      	beq.n	800155c <__sflush_r+0x94>
 80014f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	075a      	lsls	r2, r3, #29
 80014fc:	d505      	bpl.n	800150a <__sflush_r+0x42>
 80014fe:	6863      	ldr	r3, [r4, #4]
 8001500:	1ac0      	subs	r0, r0, r3
 8001502:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001504:	b10b      	cbz	r3, 800150a <__sflush_r+0x42>
 8001506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001508:	1ac0      	subs	r0, r0, r3
 800150a:	2300      	movs	r3, #0
 800150c:	4602      	mov	r2, r0
 800150e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001510:	4628      	mov	r0, r5
 8001512:	6a21      	ldr	r1, [r4, #32]
 8001514:	47b0      	blx	r6
 8001516:	1c43      	adds	r3, r0, #1
 8001518:	89a3      	ldrh	r3, [r4, #12]
 800151a:	d106      	bne.n	800152a <__sflush_r+0x62>
 800151c:	6829      	ldr	r1, [r5, #0]
 800151e:	291d      	cmp	r1, #29
 8001520:	d82c      	bhi.n	800157c <__sflush_r+0xb4>
 8001522:	4a29      	ldr	r2, [pc, #164]	; (80015c8 <__sflush_r+0x100>)
 8001524:	40ca      	lsrs	r2, r1
 8001526:	07d6      	lsls	r6, r2, #31
 8001528:	d528      	bpl.n	800157c <__sflush_r+0xb4>
 800152a:	2200      	movs	r2, #0
 800152c:	6062      	str	r2, [r4, #4]
 800152e:	6922      	ldr	r2, [r4, #16]
 8001530:	04d9      	lsls	r1, r3, #19
 8001532:	6022      	str	r2, [r4, #0]
 8001534:	d504      	bpl.n	8001540 <__sflush_r+0x78>
 8001536:	1c42      	adds	r2, r0, #1
 8001538:	d101      	bne.n	800153e <__sflush_r+0x76>
 800153a:	682b      	ldr	r3, [r5, #0]
 800153c:	b903      	cbnz	r3, 8001540 <__sflush_r+0x78>
 800153e:	6560      	str	r0, [r4, #84]	; 0x54
 8001540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001542:	602f      	str	r7, [r5, #0]
 8001544:	2900      	cmp	r1, #0
 8001546:	d0cb      	beq.n	80014e0 <__sflush_r+0x18>
 8001548:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800154c:	4299      	cmp	r1, r3
 800154e:	d002      	beq.n	8001556 <__sflush_r+0x8e>
 8001550:	4628      	mov	r0, r5
 8001552:	f000 f909 	bl	8001768 <_free_r>
 8001556:	2000      	movs	r0, #0
 8001558:	6360      	str	r0, [r4, #52]	; 0x34
 800155a:	e7c2      	b.n	80014e2 <__sflush_r+0x1a>
 800155c:	6a21      	ldr	r1, [r4, #32]
 800155e:	2301      	movs	r3, #1
 8001560:	4628      	mov	r0, r5
 8001562:	47b0      	blx	r6
 8001564:	1c41      	adds	r1, r0, #1
 8001566:	d1c7      	bne.n	80014f8 <__sflush_r+0x30>
 8001568:	682b      	ldr	r3, [r5, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0c4      	beq.n	80014f8 <__sflush_r+0x30>
 800156e:	2b1d      	cmp	r3, #29
 8001570:	d001      	beq.n	8001576 <__sflush_r+0xae>
 8001572:	2b16      	cmp	r3, #22
 8001574:	d101      	bne.n	800157a <__sflush_r+0xb2>
 8001576:	602f      	str	r7, [r5, #0]
 8001578:	e7b2      	b.n	80014e0 <__sflush_r+0x18>
 800157a:	89a3      	ldrh	r3, [r4, #12]
 800157c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001580:	81a3      	strh	r3, [r4, #12]
 8001582:	e7ae      	b.n	80014e2 <__sflush_r+0x1a>
 8001584:	690f      	ldr	r7, [r1, #16]
 8001586:	2f00      	cmp	r7, #0
 8001588:	d0aa      	beq.n	80014e0 <__sflush_r+0x18>
 800158a:	0793      	lsls	r3, r2, #30
 800158c:	bf18      	it	ne
 800158e:	2300      	movne	r3, #0
 8001590:	680e      	ldr	r6, [r1, #0]
 8001592:	bf08      	it	eq
 8001594:	694b      	ldreq	r3, [r1, #20]
 8001596:	1bf6      	subs	r6, r6, r7
 8001598:	600f      	str	r7, [r1, #0]
 800159a:	608b      	str	r3, [r1, #8]
 800159c:	2e00      	cmp	r6, #0
 800159e:	dd9f      	ble.n	80014e0 <__sflush_r+0x18>
 80015a0:	4633      	mov	r3, r6
 80015a2:	463a      	mov	r2, r7
 80015a4:	4628      	mov	r0, r5
 80015a6:	6a21      	ldr	r1, [r4, #32]
 80015a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80015ac:	47e0      	blx	ip
 80015ae:	2800      	cmp	r0, #0
 80015b0:	dc06      	bgt.n	80015c0 <__sflush_r+0xf8>
 80015b2:	89a3      	ldrh	r3, [r4, #12]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015bc:	81a3      	strh	r3, [r4, #12]
 80015be:	e790      	b.n	80014e2 <__sflush_r+0x1a>
 80015c0:	4407      	add	r7, r0
 80015c2:	1a36      	subs	r6, r6, r0
 80015c4:	e7ea      	b.n	800159c <__sflush_r+0xd4>
 80015c6:	bf00      	nop
 80015c8:	20400001 	.word	0x20400001

080015cc <_fflush_r>:
 80015cc:	b538      	push	{r3, r4, r5, lr}
 80015ce:	690b      	ldr	r3, [r1, #16]
 80015d0:	4605      	mov	r5, r0
 80015d2:	460c      	mov	r4, r1
 80015d4:	b913      	cbnz	r3, 80015dc <_fflush_r+0x10>
 80015d6:	2500      	movs	r5, #0
 80015d8:	4628      	mov	r0, r5
 80015da:	bd38      	pop	{r3, r4, r5, pc}
 80015dc:	b118      	cbz	r0, 80015e6 <_fflush_r+0x1a>
 80015de:	6983      	ldr	r3, [r0, #24]
 80015e0:	b90b      	cbnz	r3, 80015e6 <_fflush_r+0x1a>
 80015e2:	f7ff fa19 	bl	8000a18 <__sinit>
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <_fflush_r+0x6c>)
 80015e8:	429c      	cmp	r4, r3
 80015ea:	d11b      	bne.n	8001624 <_fflush_r+0x58>
 80015ec:	686c      	ldr	r4, [r5, #4]
 80015ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ef      	beq.n	80015d6 <_fflush_r+0xa>
 80015f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015f8:	07d0      	lsls	r0, r2, #31
 80015fa:	d404      	bmi.n	8001606 <_fflush_r+0x3a>
 80015fc:	0599      	lsls	r1, r3, #22
 80015fe:	d402      	bmi.n	8001606 <_fflush_r+0x3a>
 8001600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001602:	f7ff faa7 	bl	8000b54 <__retarget_lock_acquire_recursive>
 8001606:	4628      	mov	r0, r5
 8001608:	4621      	mov	r1, r4
 800160a:	f7ff ff5d 	bl	80014c8 <__sflush_r>
 800160e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001610:	4605      	mov	r5, r0
 8001612:	07da      	lsls	r2, r3, #31
 8001614:	d4e0      	bmi.n	80015d8 <_fflush_r+0xc>
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	059b      	lsls	r3, r3, #22
 800161a:	d4dd      	bmi.n	80015d8 <_fflush_r+0xc>
 800161c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800161e:	f7ff fa9a 	bl	8000b56 <__retarget_lock_release_recursive>
 8001622:	e7d9      	b.n	80015d8 <_fflush_r+0xc>
 8001624:	4b05      	ldr	r3, [pc, #20]	; (800163c <_fflush_r+0x70>)
 8001626:	429c      	cmp	r4, r3
 8001628:	d101      	bne.n	800162e <_fflush_r+0x62>
 800162a:	68ac      	ldr	r4, [r5, #8]
 800162c:	e7df      	b.n	80015ee <_fflush_r+0x22>
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <_fflush_r+0x74>)
 8001630:	429c      	cmp	r4, r3
 8001632:	bf08      	it	eq
 8001634:	68ec      	ldreq	r4, [r5, #12]
 8001636:	e7da      	b.n	80015ee <_fflush_r+0x22>
 8001638:	08001964 	.word	0x08001964
 800163c:	08001984 	.word	0x08001984
 8001640:	08001944 	.word	0x08001944

08001644 <_lseek_r>:
 8001644:	b538      	push	{r3, r4, r5, lr}
 8001646:	4604      	mov	r4, r0
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	2200      	movs	r2, #0
 800164e:	4d05      	ldr	r5, [pc, #20]	; (8001664 <_lseek_r+0x20>)
 8001650:	602a      	str	r2, [r5, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	f000 f91c 	bl	8001890 <_lseek>
 8001658:	1c43      	adds	r3, r0, #1
 800165a:	d102      	bne.n	8001662 <_lseek_r+0x1e>
 800165c:	682b      	ldr	r3, [r5, #0]
 800165e:	b103      	cbz	r3, 8001662 <_lseek_r+0x1e>
 8001660:	6023      	str	r3, [r4, #0]
 8001662:	bd38      	pop	{r3, r4, r5, pc}
 8001664:	20000094 	.word	0x20000094

08001668 <__swhatbuf_r>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	460e      	mov	r6, r1
 800166c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001670:	4614      	mov	r4, r2
 8001672:	2900      	cmp	r1, #0
 8001674:	461d      	mov	r5, r3
 8001676:	b096      	sub	sp, #88	; 0x58
 8001678:	da08      	bge.n	800168c <__swhatbuf_r+0x24>
 800167a:	2200      	movs	r2, #0
 800167c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001680:	602a      	str	r2, [r5, #0]
 8001682:	061a      	lsls	r2, r3, #24
 8001684:	d410      	bmi.n	80016a8 <__swhatbuf_r+0x40>
 8001686:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168a:	e00e      	b.n	80016aa <__swhatbuf_r+0x42>
 800168c:	466a      	mov	r2, sp
 800168e:	f000 f8c5 	bl	800181c <_fstat_r>
 8001692:	2800      	cmp	r0, #0
 8001694:	dbf1      	blt.n	800167a <__swhatbuf_r+0x12>
 8001696:	9a01      	ldr	r2, [sp, #4]
 8001698:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800169c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80016a0:	425a      	negs	r2, r3
 80016a2:	415a      	adcs	r2, r3
 80016a4:	602a      	str	r2, [r5, #0]
 80016a6:	e7ee      	b.n	8001686 <__swhatbuf_r+0x1e>
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	2000      	movs	r0, #0
 80016ac:	6023      	str	r3, [r4, #0]
 80016ae:	b016      	add	sp, #88	; 0x58
 80016b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080016b4 <__smakebuf_r>:
 80016b4:	898b      	ldrh	r3, [r1, #12]
 80016b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80016b8:	079d      	lsls	r5, r3, #30
 80016ba:	4606      	mov	r6, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	d507      	bpl.n	80016d0 <__smakebuf_r+0x1c>
 80016c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80016c4:	6023      	str	r3, [r4, #0]
 80016c6:	6123      	str	r3, [r4, #16]
 80016c8:	2301      	movs	r3, #1
 80016ca:	6163      	str	r3, [r4, #20]
 80016cc:	b002      	add	sp, #8
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	466a      	mov	r2, sp
 80016d2:	ab01      	add	r3, sp, #4
 80016d4:	f7ff ffc8 	bl	8001668 <__swhatbuf_r>
 80016d8:	9900      	ldr	r1, [sp, #0]
 80016da:	4605      	mov	r5, r0
 80016dc:	4630      	mov	r0, r6
 80016de:	f7ff fa5b 	bl	8000b98 <_malloc_r>
 80016e2:	b948      	cbnz	r0, 80016f8 <__smakebuf_r+0x44>
 80016e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016e8:	059a      	lsls	r2, r3, #22
 80016ea:	d4ef      	bmi.n	80016cc <__smakebuf_r+0x18>
 80016ec:	f023 0303 	bic.w	r3, r3, #3
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	e7e3      	b.n	80016c0 <__smakebuf_r+0xc>
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <__smakebuf_r+0x7c>)
 80016fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80016fc:	89a3      	ldrh	r3, [r4, #12]
 80016fe:	6020      	str	r0, [r4, #0]
 8001700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001704:	81a3      	strh	r3, [r4, #12]
 8001706:	9b00      	ldr	r3, [sp, #0]
 8001708:	6120      	str	r0, [r4, #16]
 800170a:	6163      	str	r3, [r4, #20]
 800170c:	9b01      	ldr	r3, [sp, #4]
 800170e:	b15b      	cbz	r3, 8001728 <__smakebuf_r+0x74>
 8001710:	4630      	mov	r0, r6
 8001712:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001716:	f000 f893 	bl	8001840 <_isatty_r>
 800171a:	b128      	cbz	r0, 8001728 <__smakebuf_r+0x74>
 800171c:	89a3      	ldrh	r3, [r4, #12]
 800171e:	f023 0303 	bic.w	r3, r3, #3
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	81a3      	strh	r3, [r4, #12]
 8001728:	89a0      	ldrh	r0, [r4, #12]
 800172a:	4305      	orrs	r5, r0
 800172c:	81a5      	strh	r5, [r4, #12]
 800172e:	e7cd      	b.n	80016cc <__smakebuf_r+0x18>
 8001730:	080009b1 	.word	0x080009b1

08001734 <memchr>:
 8001734:	4603      	mov	r3, r0
 8001736:	b510      	push	{r4, lr}
 8001738:	b2c9      	uxtb	r1, r1
 800173a:	4402      	add	r2, r0
 800173c:	4293      	cmp	r3, r2
 800173e:	4618      	mov	r0, r3
 8001740:	d101      	bne.n	8001746 <memchr+0x12>
 8001742:	2000      	movs	r0, #0
 8001744:	e003      	b.n	800174e <memchr+0x1a>
 8001746:	7804      	ldrb	r4, [r0, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	428c      	cmp	r4, r1
 800174c:	d1f6      	bne.n	800173c <memchr+0x8>
 800174e:	bd10      	pop	{r4, pc}

08001750 <__malloc_lock>:
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <__malloc_lock+0x8>)
 8001752:	f7ff b9ff 	b.w	8000b54 <__retarget_lock_acquire_recursive>
 8001756:	bf00      	nop
 8001758:	20000088 	.word	0x20000088

0800175c <__malloc_unlock>:
 800175c:	4801      	ldr	r0, [pc, #4]	; (8001764 <__malloc_unlock+0x8>)
 800175e:	f7ff b9fa 	b.w	8000b56 <__retarget_lock_release_recursive>
 8001762:	bf00      	nop
 8001764:	20000088 	.word	0x20000088

08001768 <_free_r>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4605      	mov	r5, r0
 800176c:	2900      	cmp	r1, #0
 800176e:	d040      	beq.n	80017f2 <_free_r+0x8a>
 8001770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001774:	1f0c      	subs	r4, r1, #4
 8001776:	2b00      	cmp	r3, #0
 8001778:	bfb8      	it	lt
 800177a:	18e4      	addlt	r4, r4, r3
 800177c:	f7ff ffe8 	bl	8001750 <__malloc_lock>
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <_free_r+0x8c>)
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	b933      	cbnz	r3, 8001794 <_free_r+0x2c>
 8001786:	6063      	str	r3, [r4, #4]
 8001788:	6014      	str	r4, [r2, #0]
 800178a:	4628      	mov	r0, r5
 800178c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001790:	f7ff bfe4 	b.w	800175c <__malloc_unlock>
 8001794:	42a3      	cmp	r3, r4
 8001796:	d908      	bls.n	80017aa <_free_r+0x42>
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	1821      	adds	r1, r4, r0
 800179c:	428b      	cmp	r3, r1
 800179e:	bf01      	itttt	eq
 80017a0:	6819      	ldreq	r1, [r3, #0]
 80017a2:	685b      	ldreq	r3, [r3, #4]
 80017a4:	1809      	addeq	r1, r1, r0
 80017a6:	6021      	streq	r1, [r4, #0]
 80017a8:	e7ed      	b.n	8001786 <_free_r+0x1e>
 80017aa:	461a      	mov	r2, r3
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	b10b      	cbz	r3, 80017b4 <_free_r+0x4c>
 80017b0:	42a3      	cmp	r3, r4
 80017b2:	d9fa      	bls.n	80017aa <_free_r+0x42>
 80017b4:	6811      	ldr	r1, [r2, #0]
 80017b6:	1850      	adds	r0, r2, r1
 80017b8:	42a0      	cmp	r0, r4
 80017ba:	d10b      	bne.n	80017d4 <_free_r+0x6c>
 80017bc:	6820      	ldr	r0, [r4, #0]
 80017be:	4401      	add	r1, r0
 80017c0:	1850      	adds	r0, r2, r1
 80017c2:	4283      	cmp	r3, r0
 80017c4:	6011      	str	r1, [r2, #0]
 80017c6:	d1e0      	bne.n	800178a <_free_r+0x22>
 80017c8:	6818      	ldr	r0, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4401      	add	r1, r0
 80017ce:	6011      	str	r1, [r2, #0]
 80017d0:	6053      	str	r3, [r2, #4]
 80017d2:	e7da      	b.n	800178a <_free_r+0x22>
 80017d4:	d902      	bls.n	80017dc <_free_r+0x74>
 80017d6:	230c      	movs	r3, #12
 80017d8:	602b      	str	r3, [r5, #0]
 80017da:	e7d6      	b.n	800178a <_free_r+0x22>
 80017dc:	6820      	ldr	r0, [r4, #0]
 80017de:	1821      	adds	r1, r4, r0
 80017e0:	428b      	cmp	r3, r1
 80017e2:	bf01      	itttt	eq
 80017e4:	6819      	ldreq	r1, [r3, #0]
 80017e6:	685b      	ldreq	r3, [r3, #4]
 80017e8:	1809      	addeq	r1, r1, r0
 80017ea:	6021      	streq	r1, [r4, #0]
 80017ec:	6063      	str	r3, [r4, #4]
 80017ee:	6054      	str	r4, [r2, #4]
 80017f0:	e7cb      	b.n	800178a <_free_r+0x22>
 80017f2:	bd38      	pop	{r3, r4, r5, pc}
 80017f4:	2000008c 	.word	0x2000008c

080017f8 <_read_r>:
 80017f8:	b538      	push	{r3, r4, r5, lr}
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	2200      	movs	r2, #0
 8001802:	4d05      	ldr	r5, [pc, #20]	; (8001818 <_read_r+0x20>)
 8001804:	602a      	str	r2, [r5, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	f000 f84a 	bl	80018a0 <_read>
 800180c:	1c43      	adds	r3, r0, #1
 800180e:	d102      	bne.n	8001816 <_read_r+0x1e>
 8001810:	682b      	ldr	r3, [r5, #0]
 8001812:	b103      	cbz	r3, 8001816 <_read_r+0x1e>
 8001814:	6023      	str	r3, [r4, #0]
 8001816:	bd38      	pop	{r3, r4, r5, pc}
 8001818:	20000094 	.word	0x20000094

0800181c <_fstat_r>:
 800181c:	b538      	push	{r3, r4, r5, lr}
 800181e:	2300      	movs	r3, #0
 8001820:	4d06      	ldr	r5, [pc, #24]	; (800183c <_fstat_r+0x20>)
 8001822:	4604      	mov	r4, r0
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	602b      	str	r3, [r5, #0]
 800182a:	f000 f821 	bl	8001870 <_fstat>
 800182e:	1c43      	adds	r3, r0, #1
 8001830:	d102      	bne.n	8001838 <_fstat_r+0x1c>
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	b103      	cbz	r3, 8001838 <_fstat_r+0x1c>
 8001836:	6023      	str	r3, [r4, #0]
 8001838:	bd38      	pop	{r3, r4, r5, pc}
 800183a:	bf00      	nop
 800183c:	20000094 	.word	0x20000094

08001840 <_isatty_r>:
 8001840:	b538      	push	{r3, r4, r5, lr}
 8001842:	2300      	movs	r3, #0
 8001844:	4d05      	ldr	r5, [pc, #20]	; (800185c <_isatty_r+0x1c>)
 8001846:	4604      	mov	r4, r0
 8001848:	4608      	mov	r0, r1
 800184a:	602b      	str	r3, [r5, #0]
 800184c:	f000 f818 	bl	8001880 <_isatty>
 8001850:	1c43      	adds	r3, r0, #1
 8001852:	d102      	bne.n	800185a <_isatty_r+0x1a>
 8001854:	682b      	ldr	r3, [r5, #0]
 8001856:	b103      	cbz	r3, 800185a <_isatty_r+0x1a>
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	bd38      	pop	{r3, r4, r5, pc}
 800185c:	20000094 	.word	0x20000094

08001860 <_close>:
 8001860:	2258      	movs	r2, #88	; 0x58
 8001862:	4b02      	ldr	r3, [pc, #8]	; (800186c <_close+0xc>)
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4770      	bx	lr
 800186c:	20000094 	.word	0x20000094

08001870 <_fstat>:
 8001870:	2258      	movs	r2, #88	; 0x58
 8001872:	4b02      	ldr	r3, [pc, #8]	; (800187c <_fstat+0xc>)
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4770      	bx	lr
 800187c:	20000094 	.word	0x20000094

08001880 <_isatty>:
 8001880:	2258      	movs	r2, #88	; 0x58
 8001882:	4b02      	ldr	r3, [pc, #8]	; (800188c <_isatty+0xc>)
 8001884:	2000      	movs	r0, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000094 	.word	0x20000094

08001890 <_lseek>:
 8001890:	2258      	movs	r2, #88	; 0x58
 8001892:	4b02      	ldr	r3, [pc, #8]	; (800189c <_lseek+0xc>)
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	4770      	bx	lr
 800189c:	20000094 	.word	0x20000094

080018a0 <_read>:
 80018a0:	2258      	movs	r2, #88	; 0x58
 80018a2:	4b02      	ldr	r3, [pc, #8]	; (80018ac <_read+0xc>)
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	4770      	bx	lr
 80018ac:	20000094 	.word	0x20000094

080018b0 <_sbrk>:
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <_sbrk+0x14>)
 80018b2:	4603      	mov	r3, r0
 80018b4:	6811      	ldr	r1, [r2, #0]
 80018b6:	b909      	cbnz	r1, 80018bc <_sbrk+0xc>
 80018b8:	4903      	ldr	r1, [pc, #12]	; (80018c8 <_sbrk+0x18>)
 80018ba:	6011      	str	r1, [r2, #0]
 80018bc:	6810      	ldr	r0, [r2, #0]
 80018be:	4403      	add	r3, r0
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	4770      	bx	lr
 80018c4:	20000098 	.word	0x20000098
 80018c8:	200000a0 	.word	0x200000a0

080018cc <_write>:
 80018cc:	2258      	movs	r2, #88	; 0x58
 80018ce:	4b02      	ldr	r3, [pc, #8]	; (80018d8 <_write+0xc>)
 80018d0:	f04f 30ff 	mov.w	r0, #4294967295
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	4770      	bx	lr
 80018d8:	20000094 	.word	0x20000094

080018dc <_init>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	bf00      	nop
 80018e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e2:	bc08      	pop	{r3}
 80018e4:	469e      	mov	lr, r3
 80018e6:	4770      	bx	lr

080018e8 <_fini>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	bf00      	nop
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr

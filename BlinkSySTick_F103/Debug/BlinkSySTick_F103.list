
BlinkSySTick_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000374  0800037c  0001037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000374  08000374  0001037c  2**0
                  CONTENTS
  4 .ARM          00000000  08000374  08000374  0001037c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000374  0800037c  0001037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  0800037c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800037c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001037c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002a4  00000000  00000000  000103a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000110  00000000  00000000  00010649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  000107c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe4a  00000000  00000000  00010818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000055f  00000000  00000000  00020662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053ca3  00000000  00000000  00020bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e0  00000000  00000000  000748b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	0800035c 	.word	0x0800035c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	0800035c 	.word	0x0800035c

0800014c <SysTick_Handler>:
#include "stm32f103xb.h"
#define SystemCoreClock 72000000UL

__IO uint32_t SysTick_CNT = 0; //SysTick tick count var

void SysTick_Handler(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (SysTick_CNT > 0){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <SysTick_Handler+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d004      	beq.n	8000162 <SysTick_Handler+0x16>
		SysTick_CNT--;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <SysTick_Handler+0x20>)
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	3b01      	subs	r3, #1
 800015e:	4a03      	ldr	r2, [pc, #12]	; (800016c <SysTick_Handler+0x20>)
 8000160:	6013      	str	r3, [r2, #0]
	}
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
 800016a:	bf00      	nop
 800016c:	2000001c 	.word	0x2000001c

08000170 <setupSysTick>:

void setupSysTick(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	SysTick->LOAD &= ~SysTick_LOAD_RELOAD_Msk; // Reset Load val
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <setupSysTick+0x38>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a0b      	ldr	r2, [pc, #44]	; (80001a8 <setupSysTick+0x38>)
 800017a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800017e:	6053      	str	r3, [r2, #4]
	SysTick->LOAD = SystemCoreClock/(1000 - 1); // Set timer period to 1 ms
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <setupSysTick+0x38>)
 8000182:	4a0a      	ldr	r2, [pc, #40]	; (80001ac <setupSysTick+0x3c>)
 8000184:	605a      	str	r2, [r3, #4]
	SysTick->VAL &= ~SysTick_VAL_CURRENT_Msk; // reset Val
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <setupSysTick+0x38>)
 8000188:	689b      	ldr	r3, [r3, #8]
 800018a:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <setupSysTick+0x38>)
 800018c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000190:	6093      	str	r3, [r2, #8]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // select core clock for timer, enable irq, start timer
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <setupSysTick+0x38>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a04      	ldr	r2, [pc, #16]	; (80001a8 <setupSysTick+0x38>)
 8000198:	f043 0307 	orr.w	r3, r3, #7
 800019c:	6013      	str	r3, [r2, #0]
}
 800019e:	bf00      	nop
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bc80      	pop	{r7}
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop
 80001a8:	e000e010 	.word	0xe000e010
 80001ac:	00011988 	.word	0x00011988

080001b0 <delay_ms>:



void delay_ms(uint32_t ms){
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	SysTick->VAL &= ~SysTick_VAL_CURRENT_Msk; // reset Val
 80001b8:	4b0b      	ldr	r3, [pc, #44]	; (80001e8 <delay_ms+0x38>)
 80001ba:	689b      	ldr	r3, [r3, #8]
 80001bc:	4a0a      	ldr	r2, [pc, #40]	; (80001e8 <delay_ms+0x38>)
 80001be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80001c2:	6093      	str	r3, [r2, #8]
	// set delay period
	SysTick->VAL = SystemCoreClock/(1000 - 1); // Set timer period to 1 ms
 80001c4:	4b08      	ldr	r3, [pc, #32]	; (80001e8 <delay_ms+0x38>)
 80001c6:	4a09      	ldr	r2, [pc, #36]	; (80001ec <delay_ms+0x3c>)
 80001c8:	609a      	str	r2, [r3, #8]
	SysTick_CNT = ms;
 80001ca:	4a09      	ldr	r2, [pc, #36]	; (80001f0 <delay_ms+0x40>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	6013      	str	r3, [r2, #0]
	while(SysTick_CNT); //sleep for delay time
 80001d0:	bf00      	nop
 80001d2:	4b07      	ldr	r3, [pc, #28]	; (80001f0 <delay_ms+0x40>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d1fb      	bne.n	80001d2 <delay_ms+0x22>
}
 80001da:	bf00      	nop
 80001dc:	bf00      	nop
 80001de:	370c      	adds	r7, #12
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	e000e010 	.word	0xe000e010
 80001ec:	00011988 	.word	0x00011988
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <setupRCCTo72MHz>:

void setupRCCTo72MHz(){
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON; // turn on ext. clock
 80001f8:	4b19      	ldr	r3, [pc, #100]	; (8000260 <setupRCCTo72MHz+0x6c>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a18      	ldr	r2, [pc, #96]	; (8000260 <setupRCCTo72MHz+0x6c>)
 80001fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000202:	6013      	str	r3, [r2, #0]
	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000204:	4b16      	ldr	r3, [pc, #88]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a15      	ldr	r2, [pc, #84]	; (8000260 <setupRCCTo72MHz+0x6c>)
 800020a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800020e:	6013      	str	r3, [r2, #0]
	// PLL Source = HSE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000212:	685b      	ldr	r3, [r3, #4]
 8000214:	4a12      	ldr	r2, [pc, #72]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800021a:	6053      	str	r3, [r2, #4]
	// HSE clock isn't divided
	RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 800021c:	4b10      	ldr	r3, [pc, #64]	; (8000260 <setupRCCTo72MHz+0x6c>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000222:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000226:	6053      	str	r3, [r2, #4]
	//set PLLMUL to 9
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);
 8000228:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <setupRCCTo72MHz+0x6c>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a0c      	ldr	r2, [pc, #48]	; (8000260 <setupRCCTo72MHz+0x6c>)
 800022e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000232:	6053      	str	r3, [r2, #4]
	//set PLL as system clock
	RCC->CFGR |= (RCC_CFGR_SW_1);
 8000234:	4b0a      	ldr	r3, [pc, #40]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4a09      	ldr	r2, [pc, #36]	; (8000260 <setupRCCTo72MHz+0x6c>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6053      	str	r3, [r2, #4]
	//set APB1 prescaller to 2
	RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a06      	ldr	r2, [pc, #24]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800024a:	6053      	str	r3, [r2, #4]
	// setup adc prescaller to 8
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8;
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <setupRCCTo72MHz+0x6c>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <setupRCCTo72MHz+0x6c>)
 8000252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000256:	6053      	str	r3, [r2, #4]

}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	40021000 	.word	0x40021000

08000264 <main>:



int main(void){
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	setupRCCTo72MHz();
 8000268:	f7ff ffc4 	bl	80001f4 <setupRCCTo72MHz>
	setupSysTick();
 800026c:	f7ff ff80 	bl	8000170 <setupSysTick>
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // turn on clock on port A
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <main+0x60>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <main+0x60>)
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	6193      	str	r3, [r2, #24]

	GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0 | GPIO_CRL_MODE1 | GPIO_CRL_CNF1); //reset PA0, PA1
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <main+0x64>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <main+0x64>)
 8000282:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000286:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= GPIO_CRL_MODE0_1; //PA0 to output with max speed 2MHz
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <main+0x64>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0e      	ldr	r2, [pc, #56]	; (80002c8 <main+0x64>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE1_1; //PA1 to output with max speed 2MHz
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <main+0x64>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0b      	ldr	r2, [pc, #44]	; (80002c8 <main+0x64>)
 800029a:	f043 0320 	orr.w	r3, r3, #32
 800029e:	6013      	str	r3, [r2, #0]

	GPIOA->ODR |= GPIO_ODR_ODR0; // PA0 to HIGH
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <main+0x64>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <main+0x64>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	60d3      	str	r3, [r2, #12]

	while(1){
		GPIOA->ODR ^= GPIO_ODR_ODR1; //Invert state of PA1;
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <main+0x64>)
 80002ae:	68db      	ldr	r3, [r3, #12]
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <main+0x64>)
 80002b2:	f083 0302 	eor.w	r3, r3, #2
 80002b6:	60d3      	str	r3, [r2, #12]
		delay_ms(1000); // delay 1s
 80002b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002bc:	f7ff ff78 	bl	80001b0 <delay_ms>
		GPIOA->ODR ^= GPIO_ODR_ODR1; //Invert state of PA1;
 80002c0:	e7f4      	b.n	80002ac <main+0x48>
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010800 	.word	0x40010800

080002cc <Reset_Handler>:

/* Call the clock system initialization function.*/
  //  bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002cc:	480b      	ldr	r0, [pc, #44]	; (80002fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80002ce:	490c      	ldr	r1, [pc, #48]	; (8000300 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <LoopFillZerobss+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d4:	e002      	b.n	80002dc <LoopCopyDataInit>

080002d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002da:	3304      	adds	r3, #4

080002dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002e0:	d3f9      	bcc.n	80002d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002e2:	4a09      	ldr	r2, [pc, #36]	; (8000308 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80002e4:	4c09      	ldr	r4, [pc, #36]	; (800030c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80002e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e8:	e001      	b.n	80002ee <LoopFillZerobss>

080002ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ec:	3204      	adds	r2, #4

080002ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002f0:	d3fb      	bcc.n	80002ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002f2:	f000 f80f 	bl	8000314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f6:	f7ff ffb5 	bl	8000264 <main>
  bx lr
 80002fa:	4770      	bx	lr
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	0800037c 	.word	0x0800037c
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	20000020 	.word	0x20000020

08000310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC1_2_IRQHandler>
	...

08000314 <__libc_init_array>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	2600      	movs	r6, #0
 8000318:	4d0c      	ldr	r5, [pc, #48]	; (800034c <__libc_init_array+0x38>)
 800031a:	4c0d      	ldr	r4, [pc, #52]	; (8000350 <__libc_init_array+0x3c>)
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	42a6      	cmp	r6, r4
 8000322:	d109      	bne.n	8000338 <__libc_init_array+0x24>
 8000324:	f000 f81a 	bl	800035c <_init>
 8000328:	2600      	movs	r6, #0
 800032a:	4d0a      	ldr	r5, [pc, #40]	; (8000354 <__libc_init_array+0x40>)
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <__libc_init_array+0x44>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	42a6      	cmp	r6, r4
 8000334:	d105      	bne.n	8000342 <__libc_init_array+0x2e>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	f855 3b04 	ldr.w	r3, [r5], #4
 800033c:	4798      	blx	r3
 800033e:	3601      	adds	r6, #1
 8000340:	e7ee      	b.n	8000320 <__libc_init_array+0xc>
 8000342:	f855 3b04 	ldr.w	r3, [r5], #4
 8000346:	4798      	blx	r3
 8000348:	3601      	adds	r6, #1
 800034a:	e7f2      	b.n	8000332 <__libc_init_array+0x1e>
 800034c:	08000374 	.word	0x08000374
 8000350:	08000374 	.word	0x08000374
 8000354:	08000374 	.word	0x08000374
 8000358:	08000378 	.word	0x08000378

0800035c <_init>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr

08000368 <_fini>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	bf00      	nop
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr

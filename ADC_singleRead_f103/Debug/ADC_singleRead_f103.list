
ADC_singleRead_f103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003dc  000103dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  000103dc  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  000103dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003dc  000103dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003dc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004a6  00000000  00000000  00010405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000148  00000000  00000000  000108ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  000109f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00010a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe44  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000594  00000000  00000000  000208e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053ce7  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  00074bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080003bc 	.word	0x080003bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080003bc 	.word	0x080003bc

0800014c <setupRCCTo72MHz>:

void delay(){
	for(uint32_t i=0; i < 500000; i++){}
}

void setupRCCTo72MHz(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON; // turn on ext. clock
 8000150:	4b19      	ldr	r3, [pc, #100]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a18      	ldr	r2, [pc, #96]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 8000156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800015a:	6013      	str	r3, [r2, #0]
	//Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 800015c:	4b16      	ldr	r3, [pc, #88]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	4a15      	ldr	r2, [pc, #84]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 8000162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000166:	6013      	str	r3, [r2, #0]
	// PLL Source = HSE
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000168:	4b13      	ldr	r3, [pc, #76]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 800016a:	685b      	ldr	r3, [r3, #4]
 800016c:	4a12      	ldr	r2, [pc, #72]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 800016e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000172:	6053      	str	r3, [r2, #4]
	// HSE clock isn't divided
	RCC->CFGR &= ~(RCC_CFGR_PLLXTPRE);
 8000174:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a0f      	ldr	r2, [pc, #60]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 800017a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800017e:	6053      	str	r3, [r2, #4]
	//set PLLMUL to 9
	RCC->CFGR |= (RCC_CFGR_PLLMULL9);
 8000180:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a0c      	ldr	r2, [pc, #48]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 8000186:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800018a:	6053      	str	r3, [r2, #4]
	//set PLL as system clock
	RCC->CFGR |= (RCC_CFGR_SW_1);
 800018c:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a09      	ldr	r2, [pc, #36]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 8000192:	f043 0302 	orr.w	r3, r3, #2
 8000196:	6053      	str	r3, [r2, #4]
	//set APB1 prescaller to 2
	RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 8000198:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a06      	ldr	r2, [pc, #24]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 800019e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001a2:	6053      	str	r3, [r2, #4]
	// setup adc prescaller to 8
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8;
 80001a4:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a03      	ldr	r2, [pc, #12]	; (80001b8 <setupRCCTo72MHz+0x6c>)
 80001aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80001ae:	6053      	str	r3, [r2, #4]

}
 80001b0:	bf00      	nop
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	40021000 	.word	0x40021000

080001bc <ADC_Read>:
uint32_t ADC_Read(){
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
	ADC1->CR2 |= ADC_CR2_SWSTART; // start adc convert
 80001c0:	4b09      	ldr	r3, [pc, #36]	; (80001e8 <ADC_Read+0x2c>)
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	4a08      	ldr	r2, [pc, #32]	; (80001e8 <ADC_Read+0x2c>)
 80001c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001ca:	6093      	str	r3, [r2, #8]
    while(!(ADC1->SR & ADC_SR_EOC)){}; //wait for end of convert
 80001cc:	bf00      	nop
 80001ce:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <ADC_Read+0x2c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f003 0302 	and.w	r3, r3, #2
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d0f9      	beq.n	80001ce <ADC_Read+0x12>

	return ADC1->DR; // read adc data
 80001da:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <ADC_Read+0x2c>)
 80001dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80001de:	4618      	mov	r0, r3
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	40012400 	.word	0x40012400

080001ec <main>:


int main(void){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	setupRCCTo72MHz();
 80001f2:	f7ff ffab 	bl	800014c <setupRCCTo72MHz>
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_ADC1EN);  // turn on clock on port A and ADC1
 80001f6:	4b49      	ldr	r3, [pc, #292]	; (800031c <main+0x130>)
 80001f8:	699b      	ldr	r3, [r3, #24]
 80001fa:	4a48      	ldr	r2, [pc, #288]	; (800031c <main+0x130>)
 80001fc:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000200:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // turn on clock on alternative funcs (interrupts)
 8000202:	4b46      	ldr	r3, [pc, #280]	; (800031c <main+0x130>)
 8000204:	699b      	ldr	r3, [r3, #24]
 8000206:	4a45      	ldr	r2, [pc, #276]	; (800031c <main+0x130>)
 8000208:	f043 0301 	orr.w	r3, r3, #1
 800020c:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_TIM1EN; // turn on clock of timer 1
 800020e:	4b43      	ldr	r3, [pc, #268]	; (800031c <main+0x130>)
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	4a42      	ldr	r2, [pc, #264]	; (800031c <main+0x130>)
 8000214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000218:	6193      	str	r3, [r2, #24]
	//setup PA0 to analog mode
	GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0); //reset PA0 to analog
 800021a:	4b41      	ldr	r3, [pc, #260]	; (8000320 <main+0x134>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a40      	ldr	r2, [pc, #256]	; (8000320 <main+0x134>)
 8000220:	f023 030f 	bic.w	r3, r3, #15
 8000224:	6013      	str	r3, [r2, #0]
	//setup PA8 to alternative push-pull output with max speed 50 MHz (need for PWM)
		GPIOA->CRH &= ~(GPIO_CRH_MODE8 | GPIO_CRH_CNF8); //reset PA8
 8000226:	4b3e      	ldr	r3, [pc, #248]	; (8000320 <main+0x134>)
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	4a3d      	ldr	r2, [pc, #244]	; (8000320 <main+0x134>)
 800022c:	f023 030f 	bic.w	r3, r3, #15
 8000230:	6053      	str	r3, [r2, #4]

		GPIOA->CRH |= (GPIO_CRH_MODE8_0 | GPIO_CRH_MODE8_1 | GPIO_CRH_CNF8_1 ); //alternative push-pull output with max speed 50 MHz
 8000232:	4b3b      	ldr	r3, [pc, #236]	; (8000320 <main+0x134>)
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	4a3a      	ldr	r2, [pc, #232]	; (8000320 <main+0x134>)
 8000238:	f043 030b 	orr.w	r3, r3, #11
 800023c:	6053      	str	r3, [r2, #4]
		//general setup of tim1

		TIM1->CR1 &= ~(TIM_CR1_UDIS | TIM_CR1_URS); // not gererate general event or interrupt
 800023e:	4b39      	ldr	r3, [pc, #228]	; (8000324 <main+0x138>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a38      	ldr	r2, [pc, #224]	; (8000324 <main+0x138>)
 8000244:	f023 0306 	bic.w	r3, r3, #6
 8000248:	6013      	str	r3, [r2, #0]
		TIM1->CR1 &= ~(TIM_CR1_OPM); //one pulse mode off (Counter will not stop on every update)
 800024a:	4b36      	ldr	r3, [pc, #216]	; (8000324 <main+0x138>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a35      	ldr	r2, [pc, #212]	; (8000324 <main+0x138>)
 8000250:	f023 0308 	bic.w	r3, r3, #8
 8000254:	6013      	str	r3, [r2, #0]
		TIM1->CR1 &= ~(TIM_CR1_DIR); //counter used as upcounter
 8000256:	4b33      	ldr	r3, [pc, #204]	; (8000324 <main+0x138>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	4a32      	ldr	r2, [pc, #200]	; (8000324 <main+0x138>)
 800025c:	f023 0310 	bic.w	r3, r3, #16
 8000260:	6013      	str	r3, [r2, #0]
		TIM1->CR1 &= ~(TIM_CR1_CMS); // edge-aligned mode
 8000262:	4b30      	ldr	r3, [pc, #192]	; (8000324 <main+0x138>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a2f      	ldr	r2, [pc, #188]	; (8000324 <main+0x138>)
 8000268:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800026c:	6013      	str	r3, [r2, #0]
		// setup timer freq
		TIM1->PSC = 1 - 1; // 72Mhz / 1 = 72MHz -> first prescaler
 800026e:	4b2d      	ldr	r3, [pc, #180]	; (8000324 <main+0x138>)
 8000270:	2200      	movs	r2, #0
 8000272:	629a      	str	r2, [r3, #40]	; 0x28
		TIM1->ARR = 4096 - 1; // 72MHz / 4096 = 17.57kHz -> second prescaler
 8000274:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <main+0x138>)
 8000276:	f640 72ff 	movw	r2, #4095	; 0xfff
 800027a:	62da      	str	r2, [r3, #44]	; 0x2c
		// (max tick count in one PWM Pulse) --> finish freq = 17.57kHz,
		//setup PWM
		////setup chanels
		TIM1->CCMR1 &= ~(TIM_CCMR1_CC1S); // chanel 1 to output
 800027c:	4b29      	ldr	r3, [pc, #164]	; (8000324 <main+0x138>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a28      	ldr	r2, [pc, #160]	; (8000324 <main+0x138>)
 8000282:	f023 0303 	bic.w	r3, r3, #3
 8000286:	6193      	str	r3, [r2, #24]
		TIM1->BDTR |= TIM_BDTR_MOE; // assing timer output to pins
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <main+0x138>)
 800028a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800028c:	4a25      	ldr	r2, [pc, #148]	; (8000324 <main+0x138>)
 800028e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000292:	6453      	str	r3, [r2, #68]	; 0x44
		//// setup PWM mode 1
		TIM1->CCMR1 |= (TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1); // chanel 1 to PWM mode 1
 8000294:	4b23      	ldr	r3, [pc, #140]	; (8000324 <main+0x138>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a22      	ldr	r2, [pc, #136]	; (8000324 <main+0x138>)
 800029a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800029e:	6193      	str	r3, [r2, #24]
		//turn on PWM (active -> high)
		TIM1->CCER |= (TIM_CCER_CC1E | TIM_CCER_CC1P);
 80002a0:	4b20      	ldr	r3, [pc, #128]	; (8000324 <main+0x138>)
 80002a2:	6a1b      	ldr	r3, [r3, #32]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <main+0x138>)
 80002a6:	f043 0303 	orr.w	r3, r3, #3
 80002aa:	6213      	str	r3, [r2, #32]

		//set duty to chanels
		TIM1->CCR1 = 0;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <main+0x138>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	635a      	str	r2, [r3, #52]	; 0x34

		TIM1->CR1 |= TIM_CR1_CEN; // start timer
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <main+0x138>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a1b      	ldr	r2, [pc, #108]	; (8000324 <main+0x138>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6013      	str	r3, [r2, #0]
	// setup adc
	ADC1->CR2 |= (ADC_CR2_ADON); // turn on adc
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <main+0x13c>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4a19      	ldr	r2, [pc, #100]	; (8000328 <main+0x13c>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6093      	str	r3, [r2, #8]
//	NVIC_EnableIRQ(ADC1_2_IRQn);
//	//для первого канала между выборками 7.5 цикла
//	ADC1->SMPR2 = ADC_SMPR2_SMP1_0;
//	//разрешаем прерывания по окончанию преобразования
//	ADC1->CR1 |= ADC_CR1_EOCIE;
	ADC1->CR2 |= (ADC_CR2_EXTSEL); // adc started on SWSTART bit
 80002ca:	4b17      	ldr	r3, [pc, #92]	; (8000328 <main+0x13c>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a16      	ldr	r2, [pc, #88]	; (8000328 <main+0x13c>)
 80002d0:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80002d4:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (ADC_CR2_EXTTRIG); // enable external adc turn on for single convert
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <main+0x13c>)
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	4a13      	ldr	r2, [pc, #76]	; (8000328 <main+0x13c>)
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	6093      	str	r3, [r2, #8]
	ADC1->CR2 &= ~(ADC_CR2_CONT); // continious mode
 80002e2:	4b11      	ldr	r3, [pc, #68]	; (8000328 <main+0x13c>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	4a10      	ldr	r2, [pc, #64]	; (8000328 <main+0x13c>)
 80002e8:	f023 0302 	bic.w	r3, r3, #2
 80002ec:	6093      	str	r3, [r2, #8]
	// выбор каналов
	ADC1->SQR1 =0; // 1 регулярный канал
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <main+0x13c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR2 = 0x00000000;
 80002f4:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <main+0x13c>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	631a      	str	r2, [r3, #48]	; 0x30
	ADC1->SQR3 =0x00000000; // 1 преобразование - канал 0
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <main+0x13c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= ADC_CR2_SWSTART; // start adc convert
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <main+0x13c>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a08      	ldr	r2, [pc, #32]	; (8000328 <main+0x13c>)
 8000306:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800030a:	6093      	str	r3, [r2, #8]


	while(1){
		uint32_t res = ADC_Read();
 800030c:	f7ff ff56 	bl	80001bc <ADC_Read>
 8000310:	6078      	str	r0, [r7, #4]
		TIM1->CCR1 = res;
 8000312:	4a04      	ldr	r2, [pc, #16]	; (8000324 <main+0x138>)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	6353      	str	r3, [r2, #52]	; 0x34
	while(1){
 8000318:	e7f8      	b.n	800030c <main+0x120>
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000
 8000320:	40010800 	.word	0x40010800
 8000324:	40012c00 	.word	0x40012c00
 8000328:	40012400 	.word	0x40012400

0800032c <Reset_Handler>:

/* Call the clock system initialization function.*/
//    bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800032c:	480b      	ldr	r0, [pc, #44]	; (800035c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800032e:	490c      	ldr	r1, [pc, #48]	; (8000360 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000330:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000334:	e002      	b.n	800033c <LoopCopyDataInit>

08000336 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000336:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000338:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033a:	3304      	adds	r3, #4

0800033c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800033c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000340:	d3f9      	bcc.n	8000336 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000342:	4a09      	ldr	r2, [pc, #36]	; (8000368 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000344:	4c09      	ldr	r4, [pc, #36]	; (800036c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000348:	e001      	b.n	800034e <LoopFillZerobss>

0800034a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800034c:	3204      	adds	r2, #4

0800034e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000350:	d3fb      	bcc.n	800034a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000352:	f000 f80f 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000356:	f7ff ff49 	bl	80001ec <main>
  bx lr
 800035a:	4770      	bx	lr
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800036c:	2000001c 	.word	0x2000001c

08000370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC1_2_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	2600      	movs	r6, #0
 8000378:	4d0c      	ldr	r5, [pc, #48]	; (80003ac <__libc_init_array+0x38>)
 800037a:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	f000 f81a 	bl	80003bc <_init>
 8000388:	2600      	movs	r6, #0
 800038a:	4d0a      	ldr	r5, [pc, #40]	; (80003b4 <__libc_init_array+0x40>)
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <__libc_init_array+0x44>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr


SWOTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c3c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ddc  08001ddc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08001ddc  08001ddc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ddc  08001ddc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ddc  08001ddc  00011ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001de0  08001de0  00011de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08001de4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08001e54  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001e54  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000364a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001106  00000000  00000000  000236e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  000247f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000400  00000000  00000000  00024c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017297  00000000  00000000  00025098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000053ea  00000000  00000000  0003c32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080fe5  00000000  00000000  00041719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c26fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f0  00000000  00000000  000c2750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d30 	.word	0x08001d30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08001d30 	.word	0x08001d30

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <__io_putchar>:
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
int __io_putchar(int ch){
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4618      	mov	r0, r3
 80001a4:	f7ff ffd2 	bl	800014c <ITM_SendChar>
	return ch;
 80001a8:	687b      	ldr	r3, [r7, #4]
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
	...

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f000 f9c6 	bl	8000548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f80c 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f846 	bl	8000250 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("SWO Test\n");
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <main+0x20>)
 80001c6:	f001 f92b 	bl	8001420 <puts>
	  HAL_Delay(1000);
 80001ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001ce:	f000 fa1d 	bl	800060c <HAL_Delay>
	  printf("SWO Test\n");
 80001d2:	e7f7      	b.n	80001c4 <main+0x10>
 80001d4:	08001d48 	.word	0x08001d48

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	; 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 f8a4 	bl	8001334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fa:	2302      	movs	r3, #2
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000202:	2310      	movs	r3, #16
 8000204:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000206:	2300      	movs	r3, #0
 8000208:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0318 	add.w	r3, r7, #24
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fc88 	bl	8000b24 <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800021a:	f000 f86b 	bl	80002f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000222:	2300      	movs	r3, #0
 8000224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fef6 	bl	8001028 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000242:	f000 f857 	bl	80002f4 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3740      	adds	r7, #64	; 0x40
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <MX_GPIO_Init+0x98>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a1f      	ldr	r2, [pc, #124]	; (80002e8 <MX_GPIO_Init+0x98>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <MX_GPIO_Init+0x98>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_GPIO_Init+0x98>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a19      	ldr	r2, [pc, #100]	; (80002e8 <MX_GPIO_Init+0x98>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_GPIO_Init+0x98>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_GPIO_Init+0x98>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a13      	ldr	r2, [pc, #76]	; (80002e8 <MX_GPIO_Init+0x98>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <MX_GPIO_Init+0x98>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80002ac:	23c0      	movs	r3, #192	; 0xc0
 80002ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002b4:	2302      	movs	r3, #2
 80002b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002b8:	f107 0310 	add.w	r3, r7, #16
 80002bc:	4619      	mov	r1, r3
 80002be:	480b      	ldr	r0, [pc, #44]	; (80002ec <MX_GPIO_Init+0x9c>)
 80002c0:	f000 faac 	bl	800081c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN3_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin;
 80002c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002ca:	2300      	movs	r3, #0
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002ce:	2302      	movs	r3, #2
 80002d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	4619      	mov	r1, r3
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <MX_GPIO_Init+0xa0>)
 80002da:	f000 fa9f 	bl	800081c <HAL_GPIO_Init>

}
 80002de:	bf00      	nop
 80002e0:	3720      	adds	r7, #32
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40010c00 	.word	0x40010c00

080002f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002f8:	b672      	cpsid	i
}
 80002fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002fc:	e7fe      	b.n	80002fc <Error_Handler+0x8>
	...

08000300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <HAL_MspInit+0x5c>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	4a14      	ldr	r2, [pc, #80]	; (800035c <HAL_MspInit+0x5c>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	6193      	str	r3, [r2, #24]
 8000312:	4b12      	ldr	r3, [pc, #72]	; (800035c <HAL_MspInit+0x5c>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_MspInit+0x5c>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	4a0e      	ldr	r2, [pc, #56]	; (800035c <HAL_MspInit+0x5c>)
 8000324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000328:	61d3      	str	r3, [r2, #28]
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <HAL_MspInit+0x5c>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000336:	4b0a      	ldr	r3, [pc, #40]	; (8000360 <HAL_MspInit+0x60>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	60fb      	str	r3, [r7, #12]
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <HAL_MspInit+0x60>)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	40021000 	.word	0x40021000
 8000360:	40010000 	.word	0x40010000

08000364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000368:	e7fe      	b.n	8000368 <NMI_Handler+0x4>

0800036a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036a:	b480      	push	{r7}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036e:	e7fe      	b.n	800036e <HardFault_Handler+0x4>

08000370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000374:	e7fe      	b.n	8000374 <MemManage_Handler+0x4>

08000376 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000376:	b480      	push	{r7}
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037a:	e7fe      	b.n	800037a <BusFault_Handler+0x4>

0800037c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000380:	e7fe      	b.n	8000380 <UsageFault_Handler+0x4>

08000382 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr

0800038e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr

0800039a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039e:	bf00      	nop
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr

080003a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a6:	b580      	push	{r7, lr}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003aa:	f000 f913 	bl	80005d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}

080003b2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b086      	sub	sp, #24
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	60f8      	str	r0, [r7, #12]
 80003ba:	60b9      	str	r1, [r7, #8]
 80003bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e00a      	b.n	80003da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003c4:	f3af 8000 	nop.w
 80003c8:	4601      	mov	r1, r0
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	60ba      	str	r2, [r7, #8]
 80003d0:	b2ca      	uxtb	r2, r1
 80003d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	3301      	adds	r3, #1
 80003d8:	617b      	str	r3, [r7, #20]
 80003da:	697a      	ldr	r2, [r7, #20]
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	429a      	cmp	r2, r3
 80003e0:	dbf0      	blt.n	80003c4 <_read+0x12>
	}

return len;
 80003e2:	687b      	ldr	r3, [r7, #4]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}

080003ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
 80003fc:	e009      	b.n	8000412 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	60ba      	str	r2, [r7, #8]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff fec6 	bl	8000198 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	3301      	adds	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	429a      	cmp	r2, r3
 8000418:	dbf1      	blt.n	80003fe <_write+0x12>
	}
	return len;
 800041a:	687b      	ldr	r3, [r7, #4]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <_close>:

int _close(int file)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	return -1;
 800042c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
 8000442:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800044a:	605a      	str	r2, [r3, #4]
	return 0;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <_isatty>:

int _isatty(int file)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	return 1;
 8000460:	2301      	movs	r3, #1
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	60b9      	str	r1, [r7, #8]
 8000476:	607a      	str	r2, [r7, #4]
	return 0;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3714      	adds	r7, #20
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800048c:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <_sbrk+0x5c>)
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <_sbrk+0x60>)
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <_sbrk+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d102      	bne.n	80004a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <_sbrk+0x64>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <_sbrk+0x68>)
 80004a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <_sbrk+0x64>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4413      	add	r3, r2
 80004ae:	693a      	ldr	r2, [r7, #16]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d207      	bcs.n	80004c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b4:	f000 ff14 	bl	80012e0 <__errno>
 80004b8:	4603      	mov	r3, r0
 80004ba:	220c      	movs	r2, #12
 80004bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
 80004c2:	e009      	b.n	80004d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <_sbrk+0x64>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <_sbrk+0x64>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <_sbrk+0x64>)
 80004d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3718      	adds	r7, #24
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20005000 	.word	0x20005000
 80004e4:	00000400 	.word	0x00000400
 80004e8:	2000008c 	.word	0x2000008c
 80004ec:	200000a8 	.word	0x200000a8

080004f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr

080004fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004fc:	f7ff fff8 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480b      	ldr	r0, [pc, #44]	; (8000530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000502:	490c      	ldr	r1, [pc, #48]	; (8000534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000504:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a09      	ldr	r2, [pc, #36]	; (800053c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000518:	4c09      	ldr	r4, [pc, #36]	; (8000540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000526:	f000 fee1 	bl	80012ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052a:	f7ff fe43 	bl	80001b4 <main>
  bx lr
 800052e:	4770      	bx	lr
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000538:	08001de4 	.word	0x08001de4
  ldr r2, =_sbss
 800053c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000540:	200000a4 	.word	0x200000a4

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>
	...

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <HAL_Init+0x28>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <HAL_Init+0x28>)
 8000552:	f043 0310 	orr.w	r3, r3, #16
 8000556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 f92b 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	200f      	movs	r0, #15
 8000560:	f000 f808 	bl	8000574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000564:	f7ff fecc 	bl	8000300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40022000 	.word	0x40022000

08000574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_InitTick+0x54>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <HAL_InitTick+0x58>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058a:	fbb3 f3f1 	udiv	r3, r3, r1
 800058e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000592:	4618      	mov	r0, r3
 8000594:	f000 f935 	bl	8000802 <HAL_SYSTICK_Config>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e00e      	b.n	80005c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b0f      	cmp	r3, #15
 80005a6:	d80a      	bhi.n	80005be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005a8:	2200      	movs	r2, #0
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	f04f 30ff 	mov.w	r0, #4294967295
 80005b0:	f000 f90b 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b4:	4a06      	ldr	r2, [pc, #24]	; (80005d0 <HAL_InitTick+0x5c>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000000 	.word	0x20000000
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000004 	.word	0x20000004

080005d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_IncTick+0x1c>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <HAL_IncTick+0x20>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4413      	add	r3, r2
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <HAL_IncTick+0x20>)
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	20000008 	.word	0x20000008
 80005f4:	20000090 	.word	0x20000090

080005f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  return uwTick;
 80005fc:	4b02      	ldr	r3, [pc, #8]	; (8000608 <HAL_GetTick+0x10>)
 80005fe:	681b      	ldr	r3, [r3, #0]
}
 8000600:	4618      	mov	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	20000090 	.word	0x20000090

0800060c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000614:	f7ff fff0 	bl	80005f8 <HAL_GetTick>
 8000618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000624:	d005      	beq.n	8000632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <HAL_Delay+0x44>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	461a      	mov	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	4413      	add	r3, r2
 8000630:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000632:	bf00      	nop
 8000634:	f7ff ffe0 	bl	80005f8 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	429a      	cmp	r2, r3
 8000642:	d8f7      	bhi.n	8000634 <HAL_Delay+0x28>
  {
  }
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000008 	.word	0x20000008

08000654 <__NVIC_SetPriorityGrouping>:
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800067c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_GetPriorityGrouping>:
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <__NVIC_GetPriorityGrouping+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 0307 	and.w	r3, r3, #7
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_SetPriority>:
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Config>:
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff49 	bl	8000654 <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff5e 	bl	800069c <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffb0 	bl	8000770 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b08b      	sub	sp, #44	; 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e169      	b.n	8000b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000830:	2201      	movs	r2, #1
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	4013      	ands	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 8158 	bne.w	8000afe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a9a      	ldr	r2, [pc, #616]	; (8000abc <HAL_GPIO_Init+0x2a0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d05e      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000858:	4a98      	ldr	r2, [pc, #608]	; (8000abc <HAL_GPIO_Init+0x2a0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d875      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800085e:	4a98      	ldr	r2, [pc, #608]	; (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d058      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000864:	4a96      	ldr	r2, [pc, #600]	; (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d86f      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800086a:	4a96      	ldr	r2, [pc, #600]	; (8000ac4 <HAL_GPIO_Init+0x2a8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d052      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000870:	4a94      	ldr	r2, [pc, #592]	; (8000ac4 <HAL_GPIO_Init+0x2a8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d869      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000876:	4a94      	ldr	r2, [pc, #592]	; (8000ac8 <HAL_GPIO_Init+0x2ac>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d04c      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 800087c:	4a92      	ldr	r2, [pc, #584]	; (8000ac8 <HAL_GPIO_Init+0x2ac>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d863      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000882:	4a92      	ldr	r2, [pc, #584]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d046      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000888:	4a90      	ldr	r2, [pc, #576]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d85d      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800088e:	2b12      	cmp	r3, #18
 8000890:	d82a      	bhi.n	80008e8 <HAL_GPIO_Init+0xcc>
 8000892:	2b12      	cmp	r3, #18
 8000894:	d859      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000896:	a201      	add	r2, pc, #4	; (adr r2, 800089c <HAL_GPIO_Init+0x80>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	08000917 	.word	0x08000917
 80008a0:	080008f1 	.word	0x080008f1
 80008a4:	08000903 	.word	0x08000903
 80008a8:	08000945 	.word	0x08000945
 80008ac:	0800094b 	.word	0x0800094b
 80008b0:	0800094b 	.word	0x0800094b
 80008b4:	0800094b 	.word	0x0800094b
 80008b8:	0800094b 	.word	0x0800094b
 80008bc:	0800094b 	.word	0x0800094b
 80008c0:	0800094b 	.word	0x0800094b
 80008c4:	0800094b 	.word	0x0800094b
 80008c8:	0800094b 	.word	0x0800094b
 80008cc:	0800094b 	.word	0x0800094b
 80008d0:	0800094b 	.word	0x0800094b
 80008d4:	0800094b 	.word	0x0800094b
 80008d8:	0800094b 	.word	0x0800094b
 80008dc:	0800094b 	.word	0x0800094b
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	0800090d 	.word	0x0800090d
 80008e8:	4a79      	ldr	r2, [pc, #484]	; (8000ad0 <HAL_GPIO_Init+0x2b4>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d013      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ee:	e02c      	b.n	800094a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	623b      	str	r3, [r7, #32]
          break;
 80008f6:	e029      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	3304      	adds	r3, #4
 80008fe:	623b      	str	r3, [r7, #32]
          break;
 8000900:	e024      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	3308      	adds	r3, #8
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e01f      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	330c      	adds	r3, #12
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e01a      	b.n	800094c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800091e:	2304      	movs	r3, #4
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e013      	b.n	800094c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d105      	bne.n	8000938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092c:	2308      	movs	r3, #8
 800092e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	611a      	str	r2, [r3, #16]
          break;
 8000936:	e009      	b.n	800094c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000938:	2308      	movs	r3, #8
 800093a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	615a      	str	r2, [r3, #20]
          break;
 8000942:	e003      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e000      	b.n	800094c <HAL_GPIO_Init+0x130>
          break;
 800094a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2bff      	cmp	r3, #255	; 0xff
 8000950:	d801      	bhi.n	8000956 <HAL_GPIO_Init+0x13a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	e001      	b.n	800095a <HAL_GPIO_Init+0x13e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3304      	adds	r3, #4
 800095a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	2bff      	cmp	r3, #255	; 0xff
 8000960:	d802      	bhi.n	8000968 <HAL_GPIO_Init+0x14c>
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	e002      	b.n	800096e <HAL_GPIO_Init+0x152>
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	3b08      	subs	r3, #8
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	210f      	movs	r1, #15
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	6a39      	ldr	r1, [r7, #32]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	431a      	orrs	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80b1 	beq.w	8000afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800099c:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b4:	4a48      	ldr	r2, [pc, #288]	; (8000ad8 <HAL_GPIO_Init+0x2bc>)
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a40      	ldr	r2, [pc, #256]	; (8000adc <HAL_GPIO_Init+0x2c0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d013      	beq.n	8000a08 <HAL_GPIO_Init+0x1ec>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a3f      	ldr	r2, [pc, #252]	; (8000ae0 <HAL_GPIO_Init+0x2c4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00d      	beq.n	8000a04 <HAL_GPIO_Init+0x1e8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a3e      	ldr	r2, [pc, #248]	; (8000ae4 <HAL_GPIO_Init+0x2c8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x1e4>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <HAL_GPIO_Init+0x2cc>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d101      	bne.n	80009fc <HAL_GPIO_Init+0x1e0>
 80009f8:	2303      	movs	r3, #3
 80009fa:	e006      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 80009fc:	2304      	movs	r3, #4
 80009fe:	e004      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a00:	2302      	movs	r3, #2
 8000a02:	e002      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a0c:	f002 0203 	and.w	r2, r2, #3
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4093      	lsls	r3, r2
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1a:	492f      	ldr	r1, [pc, #188]	; (8000ad8 <HAL_GPIO_Init+0x2bc>)
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	492c      	ldr	r1, [pc, #176]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	608b      	str	r3, [r1, #8]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a44:	689a      	ldr	r2, [r3, #8]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4928      	ldr	r1, [pc, #160]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	4922      	ldr	r1, [pc, #136]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	60cb      	str	r3, [r1, #12]
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a6c:	68da      	ldr	r2, [r3, #12]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	491e      	ldr	r1, [pc, #120]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	4918      	ldr	r1, [pc, #96]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	604b      	str	r3, [r1, #4]
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a94:	685a      	ldr	r2, [r3, #4]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	4914      	ldr	r1, [pc, #80]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d021      	beq.n	8000af0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	490e      	ldr	r1, [pc, #56]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
 8000ab8:	e021      	b.n	8000afe <HAL_GPIO_Init+0x2e2>
 8000aba:	bf00      	nop
 8000abc:	10320000 	.word	0x10320000
 8000ac0:	10310000 	.word	0x10310000
 8000ac4:	10220000 	.word	0x10220000
 8000ac8:	10210000 	.word	0x10210000
 8000acc:	10120000 	.word	0x10120000
 8000ad0:	10110000 	.word	0x10110000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40011400 	.word	0x40011400
 8000aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_GPIO_Init+0x304>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4909      	ldr	r1, [pc, #36]	; (8000b20 <HAL_GPIO_Init+0x304>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f47f ae8e 	bne.w	8000830 <HAL_GPIO_Init+0x14>
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	372c      	adds	r7, #44	; 0x2c
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e272      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 8087 	beq.w	8000c52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b44:	4b92      	ldr	r3, [pc, #584]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f003 030c 	and.w	r3, r3, #12
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d00c      	beq.n	8000b6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b50:	4b8f      	ldr	r3, [pc, #572]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	f003 030c 	and.w	r3, r3, #12
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d112      	bne.n	8000b82 <HAL_RCC_OscConfig+0x5e>
 8000b5c:	4b8c      	ldr	r3, [pc, #560]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b68:	d10b      	bne.n	8000b82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6a:	4b89      	ldr	r3, [pc, #548]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d06c      	beq.n	8000c50 <HAL_RCC_OscConfig+0x12c>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d168      	bne.n	8000c50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e24c      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8a:	d106      	bne.n	8000b9a <HAL_RCC_OscConfig+0x76>
 8000b8c:	4b80      	ldr	r3, [pc, #512]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a7f      	ldr	r2, [pc, #508]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e02e      	b.n	8000bf8 <HAL_RCC_OscConfig+0xd4>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10c      	bne.n	8000bbc <HAL_RCC_OscConfig+0x98>
 8000ba2:	4b7b      	ldr	r3, [pc, #492]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a7a      	ldr	r2, [pc, #488]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b78      	ldr	r3, [pc, #480]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a77      	ldr	r2, [pc, #476]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e01d      	b.n	8000bf8 <HAL_RCC_OscConfig+0xd4>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc4:	d10c      	bne.n	8000be0 <HAL_RCC_OscConfig+0xbc>
 8000bc6:	4b72      	ldr	r3, [pc, #456]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a71      	ldr	r2, [pc, #452]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	4b6f      	ldr	r3, [pc, #444]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a6e      	ldr	r2, [pc, #440]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	e00b      	b.n	8000bf8 <HAL_RCC_OscConfig+0xd4>
 8000be0:	4b6b      	ldr	r3, [pc, #428]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a6a      	ldr	r2, [pc, #424]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b68      	ldr	r3, [pc, #416]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a67      	ldr	r2, [pc, #412]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d013      	beq.n	8000c28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fcfa 	bl	80005f8 <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fcf6 	bl	80005f8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b64      	cmp	r3, #100	; 0x64
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e200      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1a:	4b5d      	ldr	r3, [pc, #372]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d0f0      	beq.n	8000c08 <HAL_RCC_OscConfig+0xe4>
 8000c26:	e014      	b.n	8000c52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c28:	f7ff fce6 	bl	80005f8 <HAL_GetTick>
 8000c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c2e:	e008      	b.n	8000c42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c30:	f7ff fce2 	bl	80005f8 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b64      	cmp	r3, #100	; 0x64
 8000c3c:	d901      	bls.n	8000c42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e1ec      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c42:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f0      	bne.n	8000c30 <HAL_RCC_OscConfig+0x10c>
 8000c4e:	e000      	b.n	8000c52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d063      	beq.n	8000d26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c5e:	4b4c      	ldr	r3, [pc, #304]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 030c 	and.w	r3, r3, #12
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d00b      	beq.n	8000c82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c6a:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 030c 	and.w	r3, r3, #12
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d11c      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x18c>
 8000c76:	4b46      	ldr	r3, [pc, #280]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d116      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c82:	4b43      	ldr	r3, [pc, #268]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d005      	beq.n	8000c9a <HAL_RCC_OscConfig+0x176>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d001      	beq.n	8000c9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e1c0      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9a:	4b3d      	ldr	r3, [pc, #244]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4939      	ldr	r1, [pc, #228]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cae:	e03a      	b.n	8000d26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	691b      	ldr	r3, [r3, #16]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d020      	beq.n	8000cfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cb8:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <HAL_RCC_OscConfig+0x270>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fc9b 	bl	80005f8 <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fc97 	bl	80005f8 <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e1a1      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	4927      	ldr	r1, [pc, #156]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	600b      	str	r3, [r1, #0]
 8000cf8:	e015      	b.n	8000d26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cfa:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <HAL_RCC_OscConfig+0x270>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fc7a 	bl	80005f8 <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d08:	f7ff fc76 	bl	80005f8 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e180      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d03a      	beq.n	8000da8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d019      	beq.n	8000d6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_RCC_OscConfig+0x274>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d40:	f7ff fc5a 	bl	80005f8 <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d48:	f7ff fc56 	bl	80005f8 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e160      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f0      	beq.n	8000d48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d66:	2001      	movs	r0, #1
 8000d68:	f000 fa9c 	bl	80012a4 <RCC_Delay>
 8000d6c:	e01c      	b.n	8000da8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_RCC_OscConfig+0x274>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d74:	f7ff fc40 	bl	80005f8 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d7a:	e00f      	b.n	8000d9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc3c 	bl	80005f8 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d908      	bls.n	8000d9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e146      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000
 8000d94:	42420000 	.word	0x42420000
 8000d98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d9c:	4b92      	ldr	r3, [pc, #584]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e9      	bne.n	8000d7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 80a6 	beq.w	8000f02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dba:	4b8b      	ldr	r3, [pc, #556]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10d      	bne.n	8000de2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b88      	ldr	r3, [pc, #544]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	69db      	ldr	r3, [r3, #28]
 8000dca:	4a87      	ldr	r2, [pc, #540]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	61d3      	str	r3, [r2, #28]
 8000dd2:	4b85      	ldr	r3, [pc, #532]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dde:	2301      	movs	r3, #1
 8000de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de2:	4b82      	ldr	r3, [pc, #520]	; (8000fec <HAL_RCC_OscConfig+0x4c8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d118      	bne.n	8000e20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dee:	4b7f      	ldr	r3, [pc, #508]	; (8000fec <HAL_RCC_OscConfig+0x4c8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a7e      	ldr	r2, [pc, #504]	; (8000fec <HAL_RCC_OscConfig+0x4c8>)
 8000df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dfa:	f7ff fbfd 	bl	80005f8 <HAL_GetTick>
 8000dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e00:	e008      	b.n	8000e14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e02:	f7ff fbf9 	bl	80005f8 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b64      	cmp	r3, #100	; 0x64
 8000e0e:	d901      	bls.n	8000e14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e10:	2303      	movs	r3, #3
 8000e12:	e103      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e14:	4b75      	ldr	r3, [pc, #468]	; (8000fec <HAL_RCC_OscConfig+0x4c8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0f0      	beq.n	8000e02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d106      	bne.n	8000e36 <HAL_RCC_OscConfig+0x312>
 8000e28:	4b6f      	ldr	r3, [pc, #444]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e2a:	6a1b      	ldr	r3, [r3, #32]
 8000e2c:	4a6e      	ldr	r2, [pc, #440]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6213      	str	r3, [r2, #32]
 8000e34:	e02d      	b.n	8000e92 <HAL_RCC_OscConfig+0x36e>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x334>
 8000e3e:	4b6a      	ldr	r3, [pc, #424]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	4a69      	ldr	r2, [pc, #420]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e44:	f023 0301 	bic.w	r3, r3, #1
 8000e48:	6213      	str	r3, [r2, #32]
 8000e4a:	4b67      	ldr	r3, [pc, #412]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	4a66      	ldr	r2, [pc, #408]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	f023 0304 	bic.w	r3, r3, #4
 8000e54:	6213      	str	r3, [r2, #32]
 8000e56:	e01c      	b.n	8000e92 <HAL_RCC_OscConfig+0x36e>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d10c      	bne.n	8000e7a <HAL_RCC_OscConfig+0x356>
 8000e60:	4b61      	ldr	r3, [pc, #388]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4a60      	ldr	r2, [pc, #384]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6213      	str	r3, [r2, #32]
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	4a5d      	ldr	r2, [pc, #372]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6213      	str	r3, [r2, #32]
 8000e78:	e00b      	b.n	8000e92 <HAL_RCC_OscConfig+0x36e>
 8000e7a:	4b5b      	ldr	r3, [pc, #364]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a5a      	ldr	r2, [pc, #360]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 0301 	bic.w	r3, r3, #1
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	4b58      	ldr	r3, [pc, #352]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	4a57      	ldr	r2, [pc, #348]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	f023 0304 	bic.w	r3, r3, #4
 8000e90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d015      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fbad 	bl	80005f8 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea0:	e00a      	b.n	8000eb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea2:	f7ff fba9 	bl	80005f8 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e0b1      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000eba:	6a1b      	ldr	r3, [r3, #32]
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0ee      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x37e>
 8000ec4:	e014      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fb97 	bl	80005f8 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ece:	f7ff fb93 	bl	80005f8 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e09b      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee4:	4b40      	ldr	r3, [pc, #256]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1ee      	bne.n	8000ece <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ef0:	7dfb      	ldrb	r3, [r7, #23]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d105      	bne.n	8000f02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef6:	4b3c      	ldr	r3, [pc, #240]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a3b      	ldr	r2, [pc, #236]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8087 	beq.w	800101a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f0c:	4b36      	ldr	r3, [pc, #216]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d061      	beq.n	8000fdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d146      	bne.n	8000fae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f20:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <HAL_RCC_OscConfig+0x4cc>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f26:	f7ff fb67 	bl	80005f8 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f2e:	f7ff fb63 	bl	80005f8 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e06d      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f0      	bne.n	8000f2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d108      	bne.n	8000f68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4921      	ldr	r1, [pc, #132]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a19      	ldr	r1, [r3, #32]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	491b      	ldr	r1, [pc, #108]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <HAL_RCC_OscConfig+0x4cc>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f86:	f7ff fb37 	bl	80005f8 <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fb33 	bl	80005f8 <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e03d      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0f0      	beq.n	8000f8e <HAL_RCC_OscConfig+0x46a>
 8000fac:	e035      	b.n	800101a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_RCC_OscConfig+0x4cc>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb4:	f7ff fb20 	bl	80005f8 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbc:	f7ff fb1c 	bl	80005f8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e026      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f0      	bne.n	8000fbc <HAL_RCC_OscConfig+0x498>
 8000fda:	e01e      	b.n	800101a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69db      	ldr	r3, [r3, #28]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d107      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e019      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_RCC_OscConfig+0x500>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
 8001004:	429a      	cmp	r2, r3
 8001006:	d106      	bne.n	8001016 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001012:	429a      	cmp	r2, r3
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e0d0      	b.n	80011de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800103c:	4b6a      	ldr	r3, [pc, #424]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d910      	bls.n	800106c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104a:	4b67      	ldr	r3, [pc, #412]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 0207 	bic.w	r2, r3, #7
 8001052:	4965      	ldr	r1, [pc, #404]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4313      	orrs	r3, r2
 8001058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800105a:	4b63      	ldr	r3, [pc, #396]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	429a      	cmp	r2, r3
 8001066:	d001      	beq.n	800106c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0b8      	b.n	80011de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001084:	4b59      	ldr	r3, [pc, #356]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a58      	ldr	r2, [pc, #352]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800108e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a52      	ldr	r2, [pc, #328]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80010a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a8:	4b50      	ldr	r3, [pc, #320]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	494d      	ldr	r1, [pc, #308]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d040      	beq.n	8001148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d107      	bne.n	80010de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d115      	bne.n	8001106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e07f      	b.n	80011de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e6:	4b41      	ldr	r3, [pc, #260]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e073      	b.n	80011de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f6:	4b3d      	ldr	r3, [pc, #244]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e06b      	b.n	80011de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001106:	4b39      	ldr	r3, [pc, #228]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f023 0203 	bic.w	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4936      	ldr	r1, [pc, #216]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001118:	f7ff fa6e 	bl	80005f8 <HAL_GetTick>
 800111c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111e:	e00a      	b.n	8001136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001120:	f7ff fa6a 	bl	80005f8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f241 3288 	movw	r2, #5000	; 0x1388
 800112e:	4293      	cmp	r3, r2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e053      	b.n	80011de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 020c 	and.w	r2, r3, #12
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	429a      	cmp	r2, r3
 8001146:	d1eb      	bne.n	8001120 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d210      	bcs.n	8001178 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 0207 	bic.w	r2, r3, #7
 800115e:	4922      	ldr	r1, [pc, #136]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	683a      	ldr	r2, [r7, #0]
 8001170:	429a      	cmp	r2, r3
 8001172:	d001      	beq.n	8001178 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e032      	b.n	80011de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d008      	beq.n	8001196 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001184:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	4916      	ldr	r1, [pc, #88]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	490e      	ldr	r1, [pc, #56]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011b6:	f000 f821 	bl	80011fc <HAL_RCC_GetSysClockFreq>
 80011ba:	4602      	mov	r2, r0
 80011bc:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	490a      	ldr	r1, [pc, #40]	; (80011f0 <HAL_RCC_ClockConfig+0x1c8>)
 80011c8:	5ccb      	ldrb	r3, [r1, r3]
 80011ca:	fa22 f303 	lsr.w	r3, r2, r3
 80011ce:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <HAL_RCC_ClockConfig+0x1cc>)
 80011d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011d2:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <HAL_RCC_ClockConfig+0x1d0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9cc 	bl	8000574 <HAL_InitTick>

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40022000 	.word	0x40022000
 80011ec:	40021000 	.word	0x40021000
 80011f0:	08001d54 	.word	0x08001d54
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001216:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_RCC_GetSysClockFreq+0x94>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b04      	cmp	r3, #4
 8001224:	d002      	beq.n	800122c <HAL_RCC_GetSysClockFreq+0x30>
 8001226:	2b08      	cmp	r3, #8
 8001228:	d003      	beq.n	8001232 <HAL_RCC_GetSysClockFreq+0x36>
 800122a:	e027      	b.n	800127c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800122c:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_RCC_GetSysClockFreq+0x98>)
 800122e:	613b      	str	r3, [r7, #16]
      break;
 8001230:	e027      	b.n	8001282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	0c9b      	lsrs	r3, r3, #18
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_RCC_GetSysClockFreq+0x9c>)
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d010      	beq.n	800126c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_RCC_GetSysClockFreq+0x94>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	0c5b      	lsrs	r3, r3, #17
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a0d      	ldr	r2, [pc, #52]	; (8001294 <HAL_RCC_GetSysClockFreq+0x98>)
 800125e:	fb03 f202 	mul.w	r2, r3, r2
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	fbb2 f3f3 	udiv	r3, r2, r3
 8001268:	617b      	str	r3, [r7, #20]
 800126a:	e004      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	613b      	str	r3, [r7, #16]
      break;
 800127a:	e002      	b.n	8001282 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_RCC_GetSysClockFreq+0x98>)
 800127e:	613b      	str	r3, [r7, #16]
      break;
 8001280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001282:	693b      	ldr	r3, [r7, #16]
}
 8001284:	4618      	mov	r0, r3
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	007a1200 	.word	0x007a1200
 8001298:	08001d64 	.word	0x08001d64
 800129c:	08001d74 	.word	0x08001d74
 80012a0:	003d0900 	.word	0x003d0900

080012a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <RCC_Delay+0x34>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <RCC_Delay+0x38>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0a5b      	lsrs	r3, r3, #9
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012c0:	bf00      	nop
  }
  while (Delay --);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	60fa      	str	r2, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f9      	bne.n	80012c0 <RCC_Delay+0x1c>
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000000 	.word	0x20000000
 80012dc:	10624dd3 	.word	0x10624dd3

080012e0 <__errno>:
 80012e0:	4b01      	ldr	r3, [pc, #4]	; (80012e8 <__errno+0x8>)
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2000000c 	.word	0x2000000c

080012ec <__libc_init_array>:
 80012ec:	b570      	push	{r4, r5, r6, lr}
 80012ee:	2600      	movs	r6, #0
 80012f0:	4d0c      	ldr	r5, [pc, #48]	; (8001324 <__libc_init_array+0x38>)
 80012f2:	4c0d      	ldr	r4, [pc, #52]	; (8001328 <__libc_init_array+0x3c>)
 80012f4:	1b64      	subs	r4, r4, r5
 80012f6:	10a4      	asrs	r4, r4, #2
 80012f8:	42a6      	cmp	r6, r4
 80012fa:	d109      	bne.n	8001310 <__libc_init_array+0x24>
 80012fc:	f000 fd18 	bl	8001d30 <_init>
 8001300:	2600      	movs	r6, #0
 8001302:	4d0a      	ldr	r5, [pc, #40]	; (800132c <__libc_init_array+0x40>)
 8001304:	4c0a      	ldr	r4, [pc, #40]	; (8001330 <__libc_init_array+0x44>)
 8001306:	1b64      	subs	r4, r4, r5
 8001308:	10a4      	asrs	r4, r4, #2
 800130a:	42a6      	cmp	r6, r4
 800130c:	d105      	bne.n	800131a <__libc_init_array+0x2e>
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	f855 3b04 	ldr.w	r3, [r5], #4
 8001314:	4798      	blx	r3
 8001316:	3601      	adds	r6, #1
 8001318:	e7ee      	b.n	80012f8 <__libc_init_array+0xc>
 800131a:	f855 3b04 	ldr.w	r3, [r5], #4
 800131e:	4798      	blx	r3
 8001320:	3601      	adds	r6, #1
 8001322:	e7f2      	b.n	800130a <__libc_init_array+0x1e>
 8001324:	08001ddc 	.word	0x08001ddc
 8001328:	08001ddc 	.word	0x08001ddc
 800132c:	08001ddc 	.word	0x08001ddc
 8001330:	08001de0 	.word	0x08001de0

08001334 <memset>:
 8001334:	4603      	mov	r3, r0
 8001336:	4402      	add	r2, r0
 8001338:	4293      	cmp	r3, r2
 800133a:	d100      	bne.n	800133e <memset+0xa>
 800133c:	4770      	bx	lr
 800133e:	f803 1b01 	strb.w	r1, [r3], #1
 8001342:	e7f9      	b.n	8001338 <memset+0x4>

08001344 <_puts_r>:
 8001344:	b570      	push	{r4, r5, r6, lr}
 8001346:	460e      	mov	r6, r1
 8001348:	4605      	mov	r5, r0
 800134a:	b118      	cbz	r0, 8001354 <_puts_r+0x10>
 800134c:	6983      	ldr	r3, [r0, #24]
 800134e:	b90b      	cbnz	r3, 8001354 <_puts_r+0x10>
 8001350:	f000 fa44 	bl	80017dc <__sinit>
 8001354:	69ab      	ldr	r3, [r5, #24]
 8001356:	68ac      	ldr	r4, [r5, #8]
 8001358:	b913      	cbnz	r3, 8001360 <_puts_r+0x1c>
 800135a:	4628      	mov	r0, r5
 800135c:	f000 fa3e 	bl	80017dc <__sinit>
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <_puts_r+0xd0>)
 8001362:	429c      	cmp	r4, r3
 8001364:	d120      	bne.n	80013a8 <_puts_r+0x64>
 8001366:	686c      	ldr	r4, [r5, #4]
 8001368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	d405      	bmi.n	800137a <_puts_r+0x36>
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	0598      	lsls	r0, r3, #22
 8001372:	d402      	bmi.n	800137a <_puts_r+0x36>
 8001374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001376:	f000 facf 	bl	8001918 <__retarget_lock_acquire_recursive>
 800137a:	89a3      	ldrh	r3, [r4, #12]
 800137c:	0719      	lsls	r1, r3, #28
 800137e:	d51d      	bpl.n	80013bc <_puts_r+0x78>
 8001380:	6923      	ldr	r3, [r4, #16]
 8001382:	b1db      	cbz	r3, 80013bc <_puts_r+0x78>
 8001384:	3e01      	subs	r6, #1
 8001386:	68a3      	ldr	r3, [r4, #8]
 8001388:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800138c:	3b01      	subs	r3, #1
 800138e:	60a3      	str	r3, [r4, #8]
 8001390:	bb39      	cbnz	r1, 80013e2 <_puts_r+0x9e>
 8001392:	2b00      	cmp	r3, #0
 8001394:	da38      	bge.n	8001408 <_puts_r+0xc4>
 8001396:	4622      	mov	r2, r4
 8001398:	210a      	movs	r1, #10
 800139a:	4628      	mov	r0, r5
 800139c:	f000 f848 	bl	8001430 <__swbuf_r>
 80013a0:	3001      	adds	r0, #1
 80013a2:	d011      	beq.n	80013c8 <_puts_r+0x84>
 80013a4:	250a      	movs	r5, #10
 80013a6:	e011      	b.n	80013cc <_puts_r+0x88>
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <_puts_r+0xd4>)
 80013aa:	429c      	cmp	r4, r3
 80013ac:	d101      	bne.n	80013b2 <_puts_r+0x6e>
 80013ae:	68ac      	ldr	r4, [r5, #8]
 80013b0:	e7da      	b.n	8001368 <_puts_r+0x24>
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <_puts_r+0xd8>)
 80013b4:	429c      	cmp	r4, r3
 80013b6:	bf08      	it	eq
 80013b8:	68ec      	ldreq	r4, [r5, #12]
 80013ba:	e7d5      	b.n	8001368 <_puts_r+0x24>
 80013bc:	4621      	mov	r1, r4
 80013be:	4628      	mov	r0, r5
 80013c0:	f000 f888 	bl	80014d4 <__swsetup_r>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d0dd      	beq.n	8001384 <_puts_r+0x40>
 80013c8:	f04f 35ff 	mov.w	r5, #4294967295
 80013cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013ce:	07da      	lsls	r2, r3, #31
 80013d0:	d405      	bmi.n	80013de <_puts_r+0x9a>
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	059b      	lsls	r3, r3, #22
 80013d6:	d402      	bmi.n	80013de <_puts_r+0x9a>
 80013d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013da:	f000 fa9e 	bl	800191a <__retarget_lock_release_recursive>
 80013de:	4628      	mov	r0, r5
 80013e0:	bd70      	pop	{r4, r5, r6, pc}
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da04      	bge.n	80013f0 <_puts_r+0xac>
 80013e6:	69a2      	ldr	r2, [r4, #24]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dc06      	bgt.n	80013fa <_puts_r+0xb6>
 80013ec:	290a      	cmp	r1, #10
 80013ee:	d004      	beq.n	80013fa <_puts_r+0xb6>
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	6022      	str	r2, [r4, #0]
 80013f6:	7019      	strb	r1, [r3, #0]
 80013f8:	e7c5      	b.n	8001386 <_puts_r+0x42>
 80013fa:	4622      	mov	r2, r4
 80013fc:	4628      	mov	r0, r5
 80013fe:	f000 f817 	bl	8001430 <__swbuf_r>
 8001402:	3001      	adds	r0, #1
 8001404:	d1bf      	bne.n	8001386 <_puts_r+0x42>
 8001406:	e7df      	b.n	80013c8 <_puts_r+0x84>
 8001408:	250a      	movs	r5, #10
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	6022      	str	r2, [r4, #0]
 8001410:	701d      	strb	r5, [r3, #0]
 8001412:	e7db      	b.n	80013cc <_puts_r+0x88>
 8001414:	08001d9c 	.word	0x08001d9c
 8001418:	08001dbc 	.word	0x08001dbc
 800141c:	08001d7c 	.word	0x08001d7c

08001420 <puts>:
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <puts+0xc>)
 8001422:	4601      	mov	r1, r0
 8001424:	6818      	ldr	r0, [r3, #0]
 8001426:	f7ff bf8d 	b.w	8001344 <_puts_r>
 800142a:	bf00      	nop
 800142c:	2000000c 	.word	0x2000000c

08001430 <__swbuf_r>:
 8001430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001432:	460e      	mov	r6, r1
 8001434:	4614      	mov	r4, r2
 8001436:	4605      	mov	r5, r0
 8001438:	b118      	cbz	r0, 8001442 <__swbuf_r+0x12>
 800143a:	6983      	ldr	r3, [r0, #24]
 800143c:	b90b      	cbnz	r3, 8001442 <__swbuf_r+0x12>
 800143e:	f000 f9cd 	bl	80017dc <__sinit>
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <__swbuf_r+0x98>)
 8001444:	429c      	cmp	r4, r3
 8001446:	d12b      	bne.n	80014a0 <__swbuf_r+0x70>
 8001448:	686c      	ldr	r4, [r5, #4]
 800144a:	69a3      	ldr	r3, [r4, #24]
 800144c:	60a3      	str	r3, [r4, #8]
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	071a      	lsls	r2, r3, #28
 8001452:	d52f      	bpl.n	80014b4 <__swbuf_r+0x84>
 8001454:	6923      	ldr	r3, [r4, #16]
 8001456:	b36b      	cbz	r3, 80014b4 <__swbuf_r+0x84>
 8001458:	6923      	ldr	r3, [r4, #16]
 800145a:	6820      	ldr	r0, [r4, #0]
 800145c:	b2f6      	uxtb	r6, r6
 800145e:	1ac0      	subs	r0, r0, r3
 8001460:	6963      	ldr	r3, [r4, #20]
 8001462:	4637      	mov	r7, r6
 8001464:	4283      	cmp	r3, r0
 8001466:	dc04      	bgt.n	8001472 <__swbuf_r+0x42>
 8001468:	4621      	mov	r1, r4
 800146a:	4628      	mov	r0, r5
 800146c:	f000 f922 	bl	80016b4 <_fflush_r>
 8001470:	bb30      	cbnz	r0, 80014c0 <__swbuf_r+0x90>
 8001472:	68a3      	ldr	r3, [r4, #8]
 8001474:	3001      	adds	r0, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	60a3      	str	r3, [r4, #8]
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	6022      	str	r2, [r4, #0]
 8001480:	701e      	strb	r6, [r3, #0]
 8001482:	6963      	ldr	r3, [r4, #20]
 8001484:	4283      	cmp	r3, r0
 8001486:	d004      	beq.n	8001492 <__swbuf_r+0x62>
 8001488:	89a3      	ldrh	r3, [r4, #12]
 800148a:	07db      	lsls	r3, r3, #31
 800148c:	d506      	bpl.n	800149c <__swbuf_r+0x6c>
 800148e:	2e0a      	cmp	r6, #10
 8001490:	d104      	bne.n	800149c <__swbuf_r+0x6c>
 8001492:	4621      	mov	r1, r4
 8001494:	4628      	mov	r0, r5
 8001496:	f000 f90d 	bl	80016b4 <_fflush_r>
 800149a:	b988      	cbnz	r0, 80014c0 <__swbuf_r+0x90>
 800149c:	4638      	mov	r0, r7
 800149e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014a0:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <__swbuf_r+0x9c>)
 80014a2:	429c      	cmp	r4, r3
 80014a4:	d101      	bne.n	80014aa <__swbuf_r+0x7a>
 80014a6:	68ac      	ldr	r4, [r5, #8]
 80014a8:	e7cf      	b.n	800144a <__swbuf_r+0x1a>
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <__swbuf_r+0xa0>)
 80014ac:	429c      	cmp	r4, r3
 80014ae:	bf08      	it	eq
 80014b0:	68ec      	ldreq	r4, [r5, #12]
 80014b2:	e7ca      	b.n	800144a <__swbuf_r+0x1a>
 80014b4:	4621      	mov	r1, r4
 80014b6:	4628      	mov	r0, r5
 80014b8:	f000 f80c 	bl	80014d4 <__swsetup_r>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d0cb      	beq.n	8001458 <__swbuf_r+0x28>
 80014c0:	f04f 37ff 	mov.w	r7, #4294967295
 80014c4:	e7ea      	b.n	800149c <__swbuf_r+0x6c>
 80014c6:	bf00      	nop
 80014c8:	08001d9c 	.word	0x08001d9c
 80014cc:	08001dbc 	.word	0x08001dbc
 80014d0:	08001d7c 	.word	0x08001d7c

080014d4 <__swsetup_r>:
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <__swsetup_r+0xcc>)
 80014d6:	b570      	push	{r4, r5, r6, lr}
 80014d8:	681d      	ldr	r5, [r3, #0]
 80014da:	4606      	mov	r6, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	b125      	cbz	r5, 80014ea <__swsetup_r+0x16>
 80014e0:	69ab      	ldr	r3, [r5, #24]
 80014e2:	b913      	cbnz	r3, 80014ea <__swsetup_r+0x16>
 80014e4:	4628      	mov	r0, r5
 80014e6:	f000 f979 	bl	80017dc <__sinit>
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <__swsetup_r+0xd0>)
 80014ec:	429c      	cmp	r4, r3
 80014ee:	d10f      	bne.n	8001510 <__swsetup_r+0x3c>
 80014f0:	686c      	ldr	r4, [r5, #4]
 80014f2:	89a3      	ldrh	r3, [r4, #12]
 80014f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014f8:	0719      	lsls	r1, r3, #28
 80014fa:	d42c      	bmi.n	8001556 <__swsetup_r+0x82>
 80014fc:	06dd      	lsls	r5, r3, #27
 80014fe:	d411      	bmi.n	8001524 <__swsetup_r+0x50>
 8001500:	2309      	movs	r3, #9
 8001502:	6033      	str	r3, [r6, #0]
 8001504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	81a3      	strh	r3, [r4, #12]
 800150e:	e03e      	b.n	800158e <__swsetup_r+0xba>
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <__swsetup_r+0xd4>)
 8001512:	429c      	cmp	r4, r3
 8001514:	d101      	bne.n	800151a <__swsetup_r+0x46>
 8001516:	68ac      	ldr	r4, [r5, #8]
 8001518:	e7eb      	b.n	80014f2 <__swsetup_r+0x1e>
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <__swsetup_r+0xd8>)
 800151c:	429c      	cmp	r4, r3
 800151e:	bf08      	it	eq
 8001520:	68ec      	ldreq	r4, [r5, #12]
 8001522:	e7e6      	b.n	80014f2 <__swsetup_r+0x1e>
 8001524:	0758      	lsls	r0, r3, #29
 8001526:	d512      	bpl.n	800154e <__swsetup_r+0x7a>
 8001528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800152a:	b141      	cbz	r1, 800153e <__swsetup_r+0x6a>
 800152c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001530:	4299      	cmp	r1, r3
 8001532:	d002      	beq.n	800153a <__swsetup_r+0x66>
 8001534:	4630      	mov	r0, r6
 8001536:	f000 fa57 	bl	80019e8 <_free_r>
 800153a:	2300      	movs	r3, #0
 800153c:	6363      	str	r3, [r4, #52]	; 0x34
 800153e:	89a3      	ldrh	r3, [r4, #12]
 8001540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001544:	81a3      	strh	r3, [r4, #12]
 8001546:	2300      	movs	r3, #0
 8001548:	6063      	str	r3, [r4, #4]
 800154a:	6923      	ldr	r3, [r4, #16]
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	89a3      	ldrh	r3, [r4, #12]
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	81a3      	strh	r3, [r4, #12]
 8001556:	6923      	ldr	r3, [r4, #16]
 8001558:	b94b      	cbnz	r3, 800156e <__swsetup_r+0x9a>
 800155a:	89a3      	ldrh	r3, [r4, #12]
 800155c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001564:	d003      	beq.n	800156e <__swsetup_r+0x9a>
 8001566:	4621      	mov	r1, r4
 8001568:	4630      	mov	r0, r6
 800156a:	f000 f9fd 	bl	8001968 <__smakebuf_r>
 800156e:	89a0      	ldrh	r0, [r4, #12]
 8001570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001574:	f010 0301 	ands.w	r3, r0, #1
 8001578:	d00a      	beq.n	8001590 <__swsetup_r+0xbc>
 800157a:	2300      	movs	r3, #0
 800157c:	60a3      	str	r3, [r4, #8]
 800157e:	6963      	ldr	r3, [r4, #20]
 8001580:	425b      	negs	r3, r3
 8001582:	61a3      	str	r3, [r4, #24]
 8001584:	6923      	ldr	r3, [r4, #16]
 8001586:	b943      	cbnz	r3, 800159a <__swsetup_r+0xc6>
 8001588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800158c:	d1ba      	bne.n	8001504 <__swsetup_r+0x30>
 800158e:	bd70      	pop	{r4, r5, r6, pc}
 8001590:	0781      	lsls	r1, r0, #30
 8001592:	bf58      	it	pl
 8001594:	6963      	ldrpl	r3, [r4, #20]
 8001596:	60a3      	str	r3, [r4, #8]
 8001598:	e7f4      	b.n	8001584 <__swsetup_r+0xb0>
 800159a:	2000      	movs	r0, #0
 800159c:	e7f7      	b.n	800158e <__swsetup_r+0xba>
 800159e:	bf00      	nop
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	08001d9c 	.word	0x08001d9c
 80015a8:	08001dbc 	.word	0x08001dbc
 80015ac:	08001d7c 	.word	0x08001d7c

080015b0 <__sflush_r>:
 80015b0:	898a      	ldrh	r2, [r1, #12]
 80015b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b4:	4605      	mov	r5, r0
 80015b6:	0710      	lsls	r0, r2, #28
 80015b8:	460c      	mov	r4, r1
 80015ba:	d457      	bmi.n	800166c <__sflush_r+0xbc>
 80015bc:	684b      	ldr	r3, [r1, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	dc04      	bgt.n	80015cc <__sflush_r+0x1c>
 80015c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dc01      	bgt.n	80015cc <__sflush_r+0x1c>
 80015c8:	2000      	movs	r0, #0
 80015ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015ce:	2e00      	cmp	r6, #0
 80015d0:	d0fa      	beq.n	80015c8 <__sflush_r+0x18>
 80015d2:	2300      	movs	r3, #0
 80015d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80015d8:	682f      	ldr	r7, [r5, #0]
 80015da:	602b      	str	r3, [r5, #0]
 80015dc:	d032      	beq.n	8001644 <__sflush_r+0x94>
 80015de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	075a      	lsls	r2, r3, #29
 80015e4:	d505      	bpl.n	80015f2 <__sflush_r+0x42>
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	1ac0      	subs	r0, r0, r3
 80015ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015ec:	b10b      	cbz	r3, 80015f2 <__sflush_r+0x42>
 80015ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015f0:	1ac0      	subs	r0, r0, r3
 80015f2:	2300      	movs	r3, #0
 80015f4:	4602      	mov	r2, r0
 80015f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015f8:	4628      	mov	r0, r5
 80015fa:	6a21      	ldr	r1, [r4, #32]
 80015fc:	47b0      	blx	r6
 80015fe:	1c43      	adds	r3, r0, #1
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	d106      	bne.n	8001612 <__sflush_r+0x62>
 8001604:	6829      	ldr	r1, [r5, #0]
 8001606:	291d      	cmp	r1, #29
 8001608:	d82c      	bhi.n	8001664 <__sflush_r+0xb4>
 800160a:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <__sflush_r+0x100>)
 800160c:	40ca      	lsrs	r2, r1
 800160e:	07d6      	lsls	r6, r2, #31
 8001610:	d528      	bpl.n	8001664 <__sflush_r+0xb4>
 8001612:	2200      	movs	r2, #0
 8001614:	6062      	str	r2, [r4, #4]
 8001616:	6922      	ldr	r2, [r4, #16]
 8001618:	04d9      	lsls	r1, r3, #19
 800161a:	6022      	str	r2, [r4, #0]
 800161c:	d504      	bpl.n	8001628 <__sflush_r+0x78>
 800161e:	1c42      	adds	r2, r0, #1
 8001620:	d101      	bne.n	8001626 <__sflush_r+0x76>
 8001622:	682b      	ldr	r3, [r5, #0]
 8001624:	b903      	cbnz	r3, 8001628 <__sflush_r+0x78>
 8001626:	6560      	str	r0, [r4, #84]	; 0x54
 8001628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800162a:	602f      	str	r7, [r5, #0]
 800162c:	2900      	cmp	r1, #0
 800162e:	d0cb      	beq.n	80015c8 <__sflush_r+0x18>
 8001630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001634:	4299      	cmp	r1, r3
 8001636:	d002      	beq.n	800163e <__sflush_r+0x8e>
 8001638:	4628      	mov	r0, r5
 800163a:	f000 f9d5 	bl	80019e8 <_free_r>
 800163e:	2000      	movs	r0, #0
 8001640:	6360      	str	r0, [r4, #52]	; 0x34
 8001642:	e7c2      	b.n	80015ca <__sflush_r+0x1a>
 8001644:	6a21      	ldr	r1, [r4, #32]
 8001646:	2301      	movs	r3, #1
 8001648:	4628      	mov	r0, r5
 800164a:	47b0      	blx	r6
 800164c:	1c41      	adds	r1, r0, #1
 800164e:	d1c7      	bne.n	80015e0 <__sflush_r+0x30>
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0c4      	beq.n	80015e0 <__sflush_r+0x30>
 8001656:	2b1d      	cmp	r3, #29
 8001658:	d001      	beq.n	800165e <__sflush_r+0xae>
 800165a:	2b16      	cmp	r3, #22
 800165c:	d101      	bne.n	8001662 <__sflush_r+0xb2>
 800165e:	602f      	str	r7, [r5, #0]
 8001660:	e7b2      	b.n	80015c8 <__sflush_r+0x18>
 8001662:	89a3      	ldrh	r3, [r4, #12]
 8001664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	e7ae      	b.n	80015ca <__sflush_r+0x1a>
 800166c:	690f      	ldr	r7, [r1, #16]
 800166e:	2f00      	cmp	r7, #0
 8001670:	d0aa      	beq.n	80015c8 <__sflush_r+0x18>
 8001672:	0793      	lsls	r3, r2, #30
 8001674:	bf18      	it	ne
 8001676:	2300      	movne	r3, #0
 8001678:	680e      	ldr	r6, [r1, #0]
 800167a:	bf08      	it	eq
 800167c:	694b      	ldreq	r3, [r1, #20]
 800167e:	1bf6      	subs	r6, r6, r7
 8001680:	600f      	str	r7, [r1, #0]
 8001682:	608b      	str	r3, [r1, #8]
 8001684:	2e00      	cmp	r6, #0
 8001686:	dd9f      	ble.n	80015c8 <__sflush_r+0x18>
 8001688:	4633      	mov	r3, r6
 800168a:	463a      	mov	r2, r7
 800168c:	4628      	mov	r0, r5
 800168e:	6a21      	ldr	r1, [r4, #32]
 8001690:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001694:	47e0      	blx	ip
 8001696:	2800      	cmp	r0, #0
 8001698:	dc06      	bgt.n	80016a8 <__sflush_r+0xf8>
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a4:	81a3      	strh	r3, [r4, #12]
 80016a6:	e790      	b.n	80015ca <__sflush_r+0x1a>
 80016a8:	4407      	add	r7, r0
 80016aa:	1a36      	subs	r6, r6, r0
 80016ac:	e7ea      	b.n	8001684 <__sflush_r+0xd4>
 80016ae:	bf00      	nop
 80016b0:	20400001 	.word	0x20400001

080016b4 <_fflush_r>:
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	690b      	ldr	r3, [r1, #16]
 80016b8:	4605      	mov	r5, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	b913      	cbnz	r3, 80016c4 <_fflush_r+0x10>
 80016be:	2500      	movs	r5, #0
 80016c0:	4628      	mov	r0, r5
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	b118      	cbz	r0, 80016ce <_fflush_r+0x1a>
 80016c6:	6983      	ldr	r3, [r0, #24]
 80016c8:	b90b      	cbnz	r3, 80016ce <_fflush_r+0x1a>
 80016ca:	f000 f887 	bl	80017dc <__sinit>
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <_fflush_r+0x6c>)
 80016d0:	429c      	cmp	r4, r3
 80016d2:	d11b      	bne.n	800170c <_fflush_r+0x58>
 80016d4:	686c      	ldr	r4, [r5, #4]
 80016d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0ef      	beq.n	80016be <_fflush_r+0xa>
 80016de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016e0:	07d0      	lsls	r0, r2, #31
 80016e2:	d404      	bmi.n	80016ee <_fflush_r+0x3a>
 80016e4:	0599      	lsls	r1, r3, #22
 80016e6:	d402      	bmi.n	80016ee <_fflush_r+0x3a>
 80016e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016ea:	f000 f915 	bl	8001918 <__retarget_lock_acquire_recursive>
 80016ee:	4628      	mov	r0, r5
 80016f0:	4621      	mov	r1, r4
 80016f2:	f7ff ff5d 	bl	80015b0 <__sflush_r>
 80016f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016f8:	4605      	mov	r5, r0
 80016fa:	07da      	lsls	r2, r3, #31
 80016fc:	d4e0      	bmi.n	80016c0 <_fflush_r+0xc>
 80016fe:	89a3      	ldrh	r3, [r4, #12]
 8001700:	059b      	lsls	r3, r3, #22
 8001702:	d4dd      	bmi.n	80016c0 <_fflush_r+0xc>
 8001704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001706:	f000 f908 	bl	800191a <__retarget_lock_release_recursive>
 800170a:	e7d9      	b.n	80016c0 <_fflush_r+0xc>
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <_fflush_r+0x70>)
 800170e:	429c      	cmp	r4, r3
 8001710:	d101      	bne.n	8001716 <_fflush_r+0x62>
 8001712:	68ac      	ldr	r4, [r5, #8]
 8001714:	e7df      	b.n	80016d6 <_fflush_r+0x22>
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <_fflush_r+0x74>)
 8001718:	429c      	cmp	r4, r3
 800171a:	bf08      	it	eq
 800171c:	68ec      	ldreq	r4, [r5, #12]
 800171e:	e7da      	b.n	80016d6 <_fflush_r+0x22>
 8001720:	08001d9c 	.word	0x08001d9c
 8001724:	08001dbc 	.word	0x08001dbc
 8001728:	08001d7c 	.word	0x08001d7c

0800172c <std>:
 800172c:	2300      	movs	r3, #0
 800172e:	b510      	push	{r4, lr}
 8001730:	4604      	mov	r4, r0
 8001732:	e9c0 3300 	strd	r3, r3, [r0]
 8001736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800173a:	6083      	str	r3, [r0, #8]
 800173c:	8181      	strh	r1, [r0, #12]
 800173e:	6643      	str	r3, [r0, #100]	; 0x64
 8001740:	81c2      	strh	r2, [r0, #14]
 8001742:	6183      	str	r3, [r0, #24]
 8001744:	4619      	mov	r1, r3
 8001746:	2208      	movs	r2, #8
 8001748:	305c      	adds	r0, #92	; 0x5c
 800174a:	f7ff fdf3 	bl	8001334 <memset>
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <std+0x38>)
 8001750:	6224      	str	r4, [r4, #32]
 8001752:	6263      	str	r3, [r4, #36]	; 0x24
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <std+0x3c>)
 8001756:	62a3      	str	r3, [r4, #40]	; 0x28
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <std+0x40>)
 800175a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <std+0x44>)
 800175e:	6323      	str	r3, [r4, #48]	; 0x30
 8001760:	bd10      	pop	{r4, pc}
 8001762:	bf00      	nop
 8001764:	08001bc1 	.word	0x08001bc1
 8001768:	08001be3 	.word	0x08001be3
 800176c:	08001c1b 	.word	0x08001c1b
 8001770:	08001c3f 	.word	0x08001c3f

08001774 <_cleanup_r>:
 8001774:	4901      	ldr	r1, [pc, #4]	; (800177c <_cleanup_r+0x8>)
 8001776:	f000 b8af 	b.w	80018d8 <_fwalk_reent>
 800177a:	bf00      	nop
 800177c:	080016b5 	.word	0x080016b5

08001780 <__sfmoreglue>:
 8001780:	2268      	movs	r2, #104	; 0x68
 8001782:	b570      	push	{r4, r5, r6, lr}
 8001784:	1e4d      	subs	r5, r1, #1
 8001786:	4355      	muls	r5, r2
 8001788:	460e      	mov	r6, r1
 800178a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800178e:	f000 f993 	bl	8001ab8 <_malloc_r>
 8001792:	4604      	mov	r4, r0
 8001794:	b140      	cbz	r0, 80017a8 <__sfmoreglue+0x28>
 8001796:	2100      	movs	r1, #0
 8001798:	e9c0 1600 	strd	r1, r6, [r0]
 800179c:	300c      	adds	r0, #12
 800179e:	60a0      	str	r0, [r4, #8]
 80017a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80017a4:	f7ff fdc6 	bl	8001334 <memset>
 80017a8:	4620      	mov	r0, r4
 80017aa:	bd70      	pop	{r4, r5, r6, pc}

080017ac <__sfp_lock_acquire>:
 80017ac:	4801      	ldr	r0, [pc, #4]	; (80017b4 <__sfp_lock_acquire+0x8>)
 80017ae:	f000 b8b3 	b.w	8001918 <__retarget_lock_acquire_recursive>
 80017b2:	bf00      	nop
 80017b4:	20000095 	.word	0x20000095

080017b8 <__sfp_lock_release>:
 80017b8:	4801      	ldr	r0, [pc, #4]	; (80017c0 <__sfp_lock_release+0x8>)
 80017ba:	f000 b8ae 	b.w	800191a <__retarget_lock_release_recursive>
 80017be:	bf00      	nop
 80017c0:	20000095 	.word	0x20000095

080017c4 <__sinit_lock_acquire>:
 80017c4:	4801      	ldr	r0, [pc, #4]	; (80017cc <__sinit_lock_acquire+0x8>)
 80017c6:	f000 b8a7 	b.w	8001918 <__retarget_lock_acquire_recursive>
 80017ca:	bf00      	nop
 80017cc:	20000096 	.word	0x20000096

080017d0 <__sinit_lock_release>:
 80017d0:	4801      	ldr	r0, [pc, #4]	; (80017d8 <__sinit_lock_release+0x8>)
 80017d2:	f000 b8a2 	b.w	800191a <__retarget_lock_release_recursive>
 80017d6:	bf00      	nop
 80017d8:	20000096 	.word	0x20000096

080017dc <__sinit>:
 80017dc:	b510      	push	{r4, lr}
 80017de:	4604      	mov	r4, r0
 80017e0:	f7ff fff0 	bl	80017c4 <__sinit_lock_acquire>
 80017e4:	69a3      	ldr	r3, [r4, #24]
 80017e6:	b11b      	cbz	r3, 80017f0 <__sinit+0x14>
 80017e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ec:	f7ff bff0 	b.w	80017d0 <__sinit_lock_release>
 80017f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017f4:	6523      	str	r3, [r4, #80]	; 0x50
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <__sinit+0x68>)
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <__sinit+0x6c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80017fe:	42a3      	cmp	r3, r4
 8001800:	bf08      	it	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	4620      	mov	r0, r4
 8001806:	bf08      	it	eq
 8001808:	61a3      	streq	r3, [r4, #24]
 800180a:	f000 f81f 	bl	800184c <__sfp>
 800180e:	6060      	str	r0, [r4, #4]
 8001810:	4620      	mov	r0, r4
 8001812:	f000 f81b 	bl	800184c <__sfp>
 8001816:	60a0      	str	r0, [r4, #8]
 8001818:	4620      	mov	r0, r4
 800181a:	f000 f817 	bl	800184c <__sfp>
 800181e:	2200      	movs	r2, #0
 8001820:	2104      	movs	r1, #4
 8001822:	60e0      	str	r0, [r4, #12]
 8001824:	6860      	ldr	r0, [r4, #4]
 8001826:	f7ff ff81 	bl	800172c <std>
 800182a:	2201      	movs	r2, #1
 800182c:	2109      	movs	r1, #9
 800182e:	68a0      	ldr	r0, [r4, #8]
 8001830:	f7ff ff7c 	bl	800172c <std>
 8001834:	2202      	movs	r2, #2
 8001836:	2112      	movs	r1, #18
 8001838:	68e0      	ldr	r0, [r4, #12]
 800183a:	f7ff ff77 	bl	800172c <std>
 800183e:	2301      	movs	r3, #1
 8001840:	61a3      	str	r3, [r4, #24]
 8001842:	e7d1      	b.n	80017e8 <__sinit+0xc>
 8001844:	08001d78 	.word	0x08001d78
 8001848:	08001775 	.word	0x08001775

0800184c <__sfp>:
 800184c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184e:	4607      	mov	r7, r0
 8001850:	f7ff ffac 	bl	80017ac <__sfp_lock_acquire>
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <__sfp+0x84>)
 8001856:	681e      	ldr	r6, [r3, #0]
 8001858:	69b3      	ldr	r3, [r6, #24]
 800185a:	b913      	cbnz	r3, 8001862 <__sfp+0x16>
 800185c:	4630      	mov	r0, r6
 800185e:	f7ff ffbd 	bl	80017dc <__sinit>
 8001862:	3648      	adds	r6, #72	; 0x48
 8001864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001868:	3b01      	subs	r3, #1
 800186a:	d503      	bpl.n	8001874 <__sfp+0x28>
 800186c:	6833      	ldr	r3, [r6, #0]
 800186e:	b30b      	cbz	r3, 80018b4 <__sfp+0x68>
 8001870:	6836      	ldr	r6, [r6, #0]
 8001872:	e7f7      	b.n	8001864 <__sfp+0x18>
 8001874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001878:	b9d5      	cbnz	r5, 80018b0 <__sfp+0x64>
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <__sfp+0x88>)
 800187c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001880:	60e3      	str	r3, [r4, #12]
 8001882:	6665      	str	r5, [r4, #100]	; 0x64
 8001884:	f000 f847 	bl	8001916 <__retarget_lock_init_recursive>
 8001888:	f7ff ff96 	bl	80017b8 <__sfp_lock_release>
 800188c:	2208      	movs	r2, #8
 800188e:	4629      	mov	r1, r5
 8001890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001898:	6025      	str	r5, [r4, #0]
 800189a:	61a5      	str	r5, [r4, #24]
 800189c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80018a0:	f7ff fd48 	bl	8001334 <memset>
 80018a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80018a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80018ac:	4620      	mov	r0, r4
 80018ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b0:	3468      	adds	r4, #104	; 0x68
 80018b2:	e7d9      	b.n	8001868 <__sfp+0x1c>
 80018b4:	2104      	movs	r1, #4
 80018b6:	4638      	mov	r0, r7
 80018b8:	f7ff ff62 	bl	8001780 <__sfmoreglue>
 80018bc:	4604      	mov	r4, r0
 80018be:	6030      	str	r0, [r6, #0]
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d1d5      	bne.n	8001870 <__sfp+0x24>
 80018c4:	f7ff ff78 	bl	80017b8 <__sfp_lock_release>
 80018c8:	230c      	movs	r3, #12
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	e7ee      	b.n	80018ac <__sfp+0x60>
 80018ce:	bf00      	nop
 80018d0:	08001d78 	.word	0x08001d78
 80018d4:	ffff0001 	.word	0xffff0001

080018d8 <_fwalk_reent>:
 80018d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018dc:	4606      	mov	r6, r0
 80018de:	4688      	mov	r8, r1
 80018e0:	2700      	movs	r7, #0
 80018e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018ea:	f1b9 0901 	subs.w	r9, r9, #1
 80018ee:	d505      	bpl.n	80018fc <_fwalk_reent+0x24>
 80018f0:	6824      	ldr	r4, [r4, #0]
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d1f7      	bne.n	80018e6 <_fwalk_reent+0xe>
 80018f6:	4638      	mov	r0, r7
 80018f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018fc:	89ab      	ldrh	r3, [r5, #12]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d907      	bls.n	8001912 <_fwalk_reent+0x3a>
 8001902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001906:	3301      	adds	r3, #1
 8001908:	d003      	beq.n	8001912 <_fwalk_reent+0x3a>
 800190a:	4629      	mov	r1, r5
 800190c:	4630      	mov	r0, r6
 800190e:	47c0      	blx	r8
 8001910:	4307      	orrs	r7, r0
 8001912:	3568      	adds	r5, #104	; 0x68
 8001914:	e7e9      	b.n	80018ea <_fwalk_reent+0x12>

08001916 <__retarget_lock_init_recursive>:
 8001916:	4770      	bx	lr

08001918 <__retarget_lock_acquire_recursive>:
 8001918:	4770      	bx	lr

0800191a <__retarget_lock_release_recursive>:
 800191a:	4770      	bx	lr

0800191c <__swhatbuf_r>:
 800191c:	b570      	push	{r4, r5, r6, lr}
 800191e:	460e      	mov	r6, r1
 8001920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001924:	4614      	mov	r4, r2
 8001926:	2900      	cmp	r1, #0
 8001928:	461d      	mov	r5, r3
 800192a:	b096      	sub	sp, #88	; 0x58
 800192c:	da08      	bge.n	8001940 <__swhatbuf_r+0x24>
 800192e:	2200      	movs	r2, #0
 8001930:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001934:	602a      	str	r2, [r5, #0]
 8001936:	061a      	lsls	r2, r3, #24
 8001938:	d410      	bmi.n	800195c <__swhatbuf_r+0x40>
 800193a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800193e:	e00e      	b.n	800195e <__swhatbuf_r+0x42>
 8001940:	466a      	mov	r2, sp
 8001942:	f000 f9a3 	bl	8001c8c <_fstat_r>
 8001946:	2800      	cmp	r0, #0
 8001948:	dbf1      	blt.n	800192e <__swhatbuf_r+0x12>
 800194a:	9a01      	ldr	r2, [sp, #4]
 800194c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001950:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001954:	425a      	negs	r2, r3
 8001956:	415a      	adcs	r2, r3
 8001958:	602a      	str	r2, [r5, #0]
 800195a:	e7ee      	b.n	800193a <__swhatbuf_r+0x1e>
 800195c:	2340      	movs	r3, #64	; 0x40
 800195e:	2000      	movs	r0, #0
 8001960:	6023      	str	r3, [r4, #0]
 8001962:	b016      	add	sp, #88	; 0x58
 8001964:	bd70      	pop	{r4, r5, r6, pc}
	...

08001968 <__smakebuf_r>:
 8001968:	898b      	ldrh	r3, [r1, #12]
 800196a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800196c:	079d      	lsls	r5, r3, #30
 800196e:	4606      	mov	r6, r0
 8001970:	460c      	mov	r4, r1
 8001972:	d507      	bpl.n	8001984 <__smakebuf_r+0x1c>
 8001974:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001978:	6023      	str	r3, [r4, #0]
 800197a:	6123      	str	r3, [r4, #16]
 800197c:	2301      	movs	r3, #1
 800197e:	6163      	str	r3, [r4, #20]
 8001980:	b002      	add	sp, #8
 8001982:	bd70      	pop	{r4, r5, r6, pc}
 8001984:	466a      	mov	r2, sp
 8001986:	ab01      	add	r3, sp, #4
 8001988:	f7ff ffc8 	bl	800191c <__swhatbuf_r>
 800198c:	9900      	ldr	r1, [sp, #0]
 800198e:	4605      	mov	r5, r0
 8001990:	4630      	mov	r0, r6
 8001992:	f000 f891 	bl	8001ab8 <_malloc_r>
 8001996:	b948      	cbnz	r0, 80019ac <__smakebuf_r+0x44>
 8001998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800199c:	059a      	lsls	r2, r3, #22
 800199e:	d4ef      	bmi.n	8001980 <__smakebuf_r+0x18>
 80019a0:	f023 0303 	bic.w	r3, r3, #3
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	81a3      	strh	r3, [r4, #12]
 80019aa:	e7e3      	b.n	8001974 <__smakebuf_r+0xc>
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <__smakebuf_r+0x7c>)
 80019ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80019b0:	89a3      	ldrh	r3, [r4, #12]
 80019b2:	6020      	str	r0, [r4, #0]
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	81a3      	strh	r3, [r4, #12]
 80019ba:	9b00      	ldr	r3, [sp, #0]
 80019bc:	6120      	str	r0, [r4, #16]
 80019be:	6163      	str	r3, [r4, #20]
 80019c0:	9b01      	ldr	r3, [sp, #4]
 80019c2:	b15b      	cbz	r3, 80019dc <__smakebuf_r+0x74>
 80019c4:	4630      	mov	r0, r6
 80019c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019ca:	f000 f971 	bl	8001cb0 <_isatty_r>
 80019ce:	b128      	cbz	r0, 80019dc <__smakebuf_r+0x74>
 80019d0:	89a3      	ldrh	r3, [r4, #12]
 80019d2:	f023 0303 	bic.w	r3, r3, #3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	81a3      	strh	r3, [r4, #12]
 80019dc:	89a0      	ldrh	r0, [r4, #12]
 80019de:	4305      	orrs	r5, r0
 80019e0:	81a5      	strh	r5, [r4, #12]
 80019e2:	e7cd      	b.n	8001980 <__smakebuf_r+0x18>
 80019e4:	08001775 	.word	0x08001775

080019e8 <_free_r>:
 80019e8:	b538      	push	{r3, r4, r5, lr}
 80019ea:	4605      	mov	r5, r0
 80019ec:	2900      	cmp	r1, #0
 80019ee:	d040      	beq.n	8001a72 <_free_r+0x8a>
 80019f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019f4:	1f0c      	subs	r4, r1, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bfb8      	it	lt
 80019fa:	18e4      	addlt	r4, r4, r3
 80019fc:	f000 f97a 	bl	8001cf4 <__malloc_lock>
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <_free_r+0x8c>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	b933      	cbnz	r3, 8001a14 <_free_r+0x2c>
 8001a06:	6063      	str	r3, [r4, #4]
 8001a08:	6014      	str	r4, [r2, #0]
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a10:	f000 b976 	b.w	8001d00 <__malloc_unlock>
 8001a14:	42a3      	cmp	r3, r4
 8001a16:	d908      	bls.n	8001a2a <_free_r+0x42>
 8001a18:	6820      	ldr	r0, [r4, #0]
 8001a1a:	1821      	adds	r1, r4, r0
 8001a1c:	428b      	cmp	r3, r1
 8001a1e:	bf01      	itttt	eq
 8001a20:	6819      	ldreq	r1, [r3, #0]
 8001a22:	685b      	ldreq	r3, [r3, #4]
 8001a24:	1809      	addeq	r1, r1, r0
 8001a26:	6021      	streq	r1, [r4, #0]
 8001a28:	e7ed      	b.n	8001a06 <_free_r+0x1e>
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	b10b      	cbz	r3, 8001a34 <_free_r+0x4c>
 8001a30:	42a3      	cmp	r3, r4
 8001a32:	d9fa      	bls.n	8001a2a <_free_r+0x42>
 8001a34:	6811      	ldr	r1, [r2, #0]
 8001a36:	1850      	adds	r0, r2, r1
 8001a38:	42a0      	cmp	r0, r4
 8001a3a:	d10b      	bne.n	8001a54 <_free_r+0x6c>
 8001a3c:	6820      	ldr	r0, [r4, #0]
 8001a3e:	4401      	add	r1, r0
 8001a40:	1850      	adds	r0, r2, r1
 8001a42:	4283      	cmp	r3, r0
 8001a44:	6011      	str	r1, [r2, #0]
 8001a46:	d1e0      	bne.n	8001a0a <_free_r+0x22>
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4401      	add	r1, r0
 8001a4e:	6011      	str	r1, [r2, #0]
 8001a50:	6053      	str	r3, [r2, #4]
 8001a52:	e7da      	b.n	8001a0a <_free_r+0x22>
 8001a54:	d902      	bls.n	8001a5c <_free_r+0x74>
 8001a56:	230c      	movs	r3, #12
 8001a58:	602b      	str	r3, [r5, #0]
 8001a5a:	e7d6      	b.n	8001a0a <_free_r+0x22>
 8001a5c:	6820      	ldr	r0, [r4, #0]
 8001a5e:	1821      	adds	r1, r4, r0
 8001a60:	428b      	cmp	r3, r1
 8001a62:	bf01      	itttt	eq
 8001a64:	6819      	ldreq	r1, [r3, #0]
 8001a66:	685b      	ldreq	r3, [r3, #4]
 8001a68:	1809      	addeq	r1, r1, r0
 8001a6a:	6021      	streq	r1, [r4, #0]
 8001a6c:	6063      	str	r3, [r4, #4]
 8001a6e:	6054      	str	r4, [r2, #4]
 8001a70:	e7cb      	b.n	8001a0a <_free_r+0x22>
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
 8001a74:	20000098 	.word	0x20000098

08001a78 <sbrk_aligned>:
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	4e0e      	ldr	r6, [pc, #56]	; (8001ab4 <sbrk_aligned+0x3c>)
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	6831      	ldr	r1, [r6, #0]
 8001a80:	4605      	mov	r5, r0
 8001a82:	b911      	cbnz	r1, 8001a8a <sbrk_aligned+0x12>
 8001a84:	f000 f88c 	bl	8001ba0 <_sbrk_r>
 8001a88:	6030      	str	r0, [r6, #0]
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	4628      	mov	r0, r5
 8001a8e:	f000 f887 	bl	8001ba0 <_sbrk_r>
 8001a92:	1c43      	adds	r3, r0, #1
 8001a94:	d00a      	beq.n	8001aac <sbrk_aligned+0x34>
 8001a96:	1cc4      	adds	r4, r0, #3
 8001a98:	f024 0403 	bic.w	r4, r4, #3
 8001a9c:	42a0      	cmp	r0, r4
 8001a9e:	d007      	beq.n	8001ab0 <sbrk_aligned+0x38>
 8001aa0:	1a21      	subs	r1, r4, r0
 8001aa2:	4628      	mov	r0, r5
 8001aa4:	f000 f87c 	bl	8001ba0 <_sbrk_r>
 8001aa8:	3001      	adds	r0, #1
 8001aaa:	d101      	bne.n	8001ab0 <sbrk_aligned+0x38>
 8001aac:	f04f 34ff 	mov.w	r4, #4294967295
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
 8001ab4:	2000009c 	.word	0x2000009c

08001ab8 <_malloc_r>:
 8001ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001abc:	1ccd      	adds	r5, r1, #3
 8001abe:	f025 0503 	bic.w	r5, r5, #3
 8001ac2:	3508      	adds	r5, #8
 8001ac4:	2d0c      	cmp	r5, #12
 8001ac6:	bf38      	it	cc
 8001ac8:	250c      	movcc	r5, #12
 8001aca:	2d00      	cmp	r5, #0
 8001acc:	4607      	mov	r7, r0
 8001ace:	db01      	blt.n	8001ad4 <_malloc_r+0x1c>
 8001ad0:	42a9      	cmp	r1, r5
 8001ad2:	d905      	bls.n	8001ae0 <_malloc_r+0x28>
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	2600      	movs	r6, #0
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	4630      	mov	r0, r6
 8001adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ae0:	4e2e      	ldr	r6, [pc, #184]	; (8001b9c <_malloc_r+0xe4>)
 8001ae2:	f000 f907 	bl	8001cf4 <__malloc_lock>
 8001ae6:	6833      	ldr	r3, [r6, #0]
 8001ae8:	461c      	mov	r4, r3
 8001aea:	bb34      	cbnz	r4, 8001b3a <_malloc_r+0x82>
 8001aec:	4629      	mov	r1, r5
 8001aee:	4638      	mov	r0, r7
 8001af0:	f7ff ffc2 	bl	8001a78 <sbrk_aligned>
 8001af4:	1c43      	adds	r3, r0, #1
 8001af6:	4604      	mov	r4, r0
 8001af8:	d14d      	bne.n	8001b96 <_malloc_r+0xde>
 8001afa:	6834      	ldr	r4, [r6, #0]
 8001afc:	4626      	mov	r6, r4
 8001afe:	2e00      	cmp	r6, #0
 8001b00:	d140      	bne.n	8001b84 <_malloc_r+0xcc>
 8001b02:	6823      	ldr	r3, [r4, #0]
 8001b04:	4631      	mov	r1, r6
 8001b06:	4638      	mov	r0, r7
 8001b08:	eb04 0803 	add.w	r8, r4, r3
 8001b0c:	f000 f848 	bl	8001ba0 <_sbrk_r>
 8001b10:	4580      	cmp	r8, r0
 8001b12:	d13a      	bne.n	8001b8a <_malloc_r+0xd2>
 8001b14:	6821      	ldr	r1, [r4, #0]
 8001b16:	3503      	adds	r5, #3
 8001b18:	1a6d      	subs	r5, r5, r1
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	4638      	mov	r0, r7
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f7ff ffa5 	bl	8001a78 <sbrk_aligned>
 8001b2e:	3001      	adds	r0, #1
 8001b30:	d02b      	beq.n	8001b8a <_malloc_r+0xd2>
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	442b      	add	r3, r5
 8001b36:	6023      	str	r3, [r4, #0]
 8001b38:	e00e      	b.n	8001b58 <_malloc_r+0xa0>
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	1b52      	subs	r2, r2, r5
 8001b3e:	d41e      	bmi.n	8001b7e <_malloc_r+0xc6>
 8001b40:	2a0b      	cmp	r2, #11
 8001b42:	d916      	bls.n	8001b72 <_malloc_r+0xba>
 8001b44:	1961      	adds	r1, r4, r5
 8001b46:	42a3      	cmp	r3, r4
 8001b48:	6025      	str	r5, [r4, #0]
 8001b4a:	bf18      	it	ne
 8001b4c:	6059      	strne	r1, [r3, #4]
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	bf08      	it	eq
 8001b52:	6031      	streq	r1, [r6, #0]
 8001b54:	5162      	str	r2, [r4, r5]
 8001b56:	604b      	str	r3, [r1, #4]
 8001b58:	4638      	mov	r0, r7
 8001b5a:	f104 060b 	add.w	r6, r4, #11
 8001b5e:	f000 f8cf 	bl	8001d00 <__malloc_unlock>
 8001b62:	f026 0607 	bic.w	r6, r6, #7
 8001b66:	1d23      	adds	r3, r4, #4
 8001b68:	1af2      	subs	r2, r6, r3
 8001b6a:	d0b6      	beq.n	8001ada <_malloc_r+0x22>
 8001b6c:	1b9b      	subs	r3, r3, r6
 8001b6e:	50a3      	str	r3, [r4, r2]
 8001b70:	e7b3      	b.n	8001ada <_malloc_r+0x22>
 8001b72:	6862      	ldr	r2, [r4, #4]
 8001b74:	42a3      	cmp	r3, r4
 8001b76:	bf0c      	ite	eq
 8001b78:	6032      	streq	r2, [r6, #0]
 8001b7a:	605a      	strne	r2, [r3, #4]
 8001b7c:	e7ec      	b.n	8001b58 <_malloc_r+0xa0>
 8001b7e:	4623      	mov	r3, r4
 8001b80:	6864      	ldr	r4, [r4, #4]
 8001b82:	e7b2      	b.n	8001aea <_malloc_r+0x32>
 8001b84:	4634      	mov	r4, r6
 8001b86:	6876      	ldr	r6, [r6, #4]
 8001b88:	e7b9      	b.n	8001afe <_malloc_r+0x46>
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	4638      	mov	r0, r7
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	f000 f8b6 	bl	8001d00 <__malloc_unlock>
 8001b94:	e7a1      	b.n	8001ada <_malloc_r+0x22>
 8001b96:	6025      	str	r5, [r4, #0]
 8001b98:	e7de      	b.n	8001b58 <_malloc_r+0xa0>
 8001b9a:	bf00      	nop
 8001b9c:	20000098 	.word	0x20000098

08001ba0 <_sbrk_r>:
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	4d05      	ldr	r5, [pc, #20]	; (8001bbc <_sbrk_r+0x1c>)
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4608      	mov	r0, r1
 8001baa:	602b      	str	r3, [r5, #0]
 8001bac:	f7fe fc6a 	bl	8000484 <_sbrk>
 8001bb0:	1c43      	adds	r3, r0, #1
 8001bb2:	d102      	bne.n	8001bba <_sbrk_r+0x1a>
 8001bb4:	682b      	ldr	r3, [r5, #0]
 8001bb6:	b103      	cbz	r3, 8001bba <_sbrk_r+0x1a>
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	bd38      	pop	{r3, r4, r5, pc}
 8001bbc:	200000a0 	.word	0x200000a0

08001bc0 <__sread>:
 8001bc0:	b510      	push	{r4, lr}
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bc8:	f000 f8a0 	bl	8001d0c <_read_r>
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	bfab      	itete	ge
 8001bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8001bd4:	181b      	addge	r3, r3, r0
 8001bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bda:	bfac      	ite	ge
 8001bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bde:	81a3      	strhlt	r3, [r4, #12]
 8001be0:	bd10      	pop	{r4, pc}

08001be2 <__swrite>:
 8001be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001be6:	461f      	mov	r7, r3
 8001be8:	898b      	ldrh	r3, [r1, #12]
 8001bea:	4605      	mov	r5, r0
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4616      	mov	r6, r2
 8001bf2:	d505      	bpl.n	8001c00 <__swrite+0x1e>
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bfc:	f000 f868 	bl	8001cd0 <_lseek_r>
 8001c00:	89a3      	ldrh	r3, [r4, #12]
 8001c02:	4632      	mov	r2, r6
 8001c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c08:	81a3      	strh	r3, [r4, #12]
 8001c0a:	4628      	mov	r0, r5
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c16:	f000 b817 	b.w	8001c48 <_write_r>

08001c1a <__sseek>:
 8001c1a:	b510      	push	{r4, lr}
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c22:	f000 f855 	bl	8001cd0 <_lseek_r>
 8001c26:	1c43      	adds	r3, r0, #1
 8001c28:	89a3      	ldrh	r3, [r4, #12]
 8001c2a:	bf15      	itete	ne
 8001c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c36:	81a3      	strheq	r3, [r4, #12]
 8001c38:	bf18      	it	ne
 8001c3a:	81a3      	strhne	r3, [r4, #12]
 8001c3c:	bd10      	pop	{r4, pc}

08001c3e <__sclose>:
 8001c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c42:	f000 b813 	b.w	8001c6c <_close_r>
	...

08001c48 <_write_r>:
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	4604      	mov	r4, r0
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	2200      	movs	r2, #0
 8001c52:	4d05      	ldr	r5, [pc, #20]	; (8001c68 <_write_r+0x20>)
 8001c54:	602a      	str	r2, [r5, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	f7fe fbc8 	bl	80003ec <_write>
 8001c5c:	1c43      	adds	r3, r0, #1
 8001c5e:	d102      	bne.n	8001c66 <_write_r+0x1e>
 8001c60:	682b      	ldr	r3, [r5, #0]
 8001c62:	b103      	cbz	r3, 8001c66 <_write_r+0x1e>
 8001c64:	6023      	str	r3, [r4, #0]
 8001c66:	bd38      	pop	{r3, r4, r5, pc}
 8001c68:	200000a0 	.word	0x200000a0

08001c6c <_close_r>:
 8001c6c:	b538      	push	{r3, r4, r5, lr}
 8001c6e:	2300      	movs	r3, #0
 8001c70:	4d05      	ldr	r5, [pc, #20]	; (8001c88 <_close_r+0x1c>)
 8001c72:	4604      	mov	r4, r0
 8001c74:	4608      	mov	r0, r1
 8001c76:	602b      	str	r3, [r5, #0]
 8001c78:	f7fe fbd4 	bl	8000424 <_close>
 8001c7c:	1c43      	adds	r3, r0, #1
 8001c7e:	d102      	bne.n	8001c86 <_close_r+0x1a>
 8001c80:	682b      	ldr	r3, [r5, #0]
 8001c82:	b103      	cbz	r3, 8001c86 <_close_r+0x1a>
 8001c84:	6023      	str	r3, [r4, #0]
 8001c86:	bd38      	pop	{r3, r4, r5, pc}
 8001c88:	200000a0 	.word	0x200000a0

08001c8c <_fstat_r>:
 8001c8c:	b538      	push	{r3, r4, r5, lr}
 8001c8e:	2300      	movs	r3, #0
 8001c90:	4d06      	ldr	r5, [pc, #24]	; (8001cac <_fstat_r+0x20>)
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	602b      	str	r3, [r5, #0]
 8001c9a:	f7fe fbce 	bl	800043a <_fstat>
 8001c9e:	1c43      	adds	r3, r0, #1
 8001ca0:	d102      	bne.n	8001ca8 <_fstat_r+0x1c>
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	b103      	cbz	r3, 8001ca8 <_fstat_r+0x1c>
 8001ca6:	6023      	str	r3, [r4, #0]
 8001ca8:	bd38      	pop	{r3, r4, r5, pc}
 8001caa:	bf00      	nop
 8001cac:	200000a0 	.word	0x200000a0

08001cb0 <_isatty_r>:
 8001cb0:	b538      	push	{r3, r4, r5, lr}
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	4d05      	ldr	r5, [pc, #20]	; (8001ccc <_isatty_r+0x1c>)
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	4608      	mov	r0, r1
 8001cba:	602b      	str	r3, [r5, #0]
 8001cbc:	f7fe fbcc 	bl	8000458 <_isatty>
 8001cc0:	1c43      	adds	r3, r0, #1
 8001cc2:	d102      	bne.n	8001cca <_isatty_r+0x1a>
 8001cc4:	682b      	ldr	r3, [r5, #0]
 8001cc6:	b103      	cbz	r3, 8001cca <_isatty_r+0x1a>
 8001cc8:	6023      	str	r3, [r4, #0]
 8001cca:	bd38      	pop	{r3, r4, r5, pc}
 8001ccc:	200000a0 	.word	0x200000a0

08001cd0 <_lseek_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4d05      	ldr	r5, [pc, #20]	; (8001cf0 <_lseek_r+0x20>)
 8001cdc:	602a      	str	r2, [r5, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f7fe fbc4 	bl	800046c <_lseek>
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d102      	bne.n	8001cee <_lseek_r+0x1e>
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	b103      	cbz	r3, 8001cee <_lseek_r+0x1e>
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	200000a0 	.word	0x200000a0

08001cf4 <__malloc_lock>:
 8001cf4:	4801      	ldr	r0, [pc, #4]	; (8001cfc <__malloc_lock+0x8>)
 8001cf6:	f7ff be0f 	b.w	8001918 <__retarget_lock_acquire_recursive>
 8001cfa:	bf00      	nop
 8001cfc:	20000094 	.word	0x20000094

08001d00 <__malloc_unlock>:
 8001d00:	4801      	ldr	r0, [pc, #4]	; (8001d08 <__malloc_unlock+0x8>)
 8001d02:	f7ff be0a 	b.w	800191a <__retarget_lock_release_recursive>
 8001d06:	bf00      	nop
 8001d08:	20000094 	.word	0x20000094

08001d0c <_read_r>:
 8001d0c:	b538      	push	{r3, r4, r5, lr}
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	4611      	mov	r1, r2
 8001d14:	2200      	movs	r2, #0
 8001d16:	4d05      	ldr	r5, [pc, #20]	; (8001d2c <_read_r+0x20>)
 8001d18:	602a      	str	r2, [r5, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f7fe fb49 	bl	80003b2 <_read>
 8001d20:	1c43      	adds	r3, r0, #1
 8001d22:	d102      	bne.n	8001d2a <_read_r+0x1e>
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	b103      	cbz	r3, 8001d2a <_read_r+0x1e>
 8001d28:	6023      	str	r3, [r4, #0]
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 8001d2c:	200000a0 	.word	0x200000a0

08001d30 <_init>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	bf00      	nop
 8001d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d36:	bc08      	pop	{r3}
 8001d38:	469e      	mov	lr, r3
 8001d3a:	4770      	bx	lr

08001d3c <_fini>:
 8001d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d3e:	bf00      	nop
 8001d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d42:	bc08      	pop	{r3}
 8001d44:	469e      	mov	lr, r3
 8001d46:	4770      	bx	lr

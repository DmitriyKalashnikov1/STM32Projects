
InterruptsCMSIS_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003e8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003e8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000062e  00000000  00000000  00010411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001d5  00000000  00000000  00010a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe44  00000000  00000000  00010cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005a5  00000000  00000000  00020b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053f87  00000000  00000000  000210b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00075040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  00075090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080003c8 	.word	0x080003c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080003c8 	.word	0x080003c8

0800014c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0b      	blt.n	8000176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4906      	ldr	r1, [pc, #24]	; (8000180 <__NVIC_EnableIRQ+0x34>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000176:	bf00      	nop
 8000178:	370c      	adds	r7, #12
 800017a:	46bd      	mov	sp, r7
 800017c:	bc80      	pop	{r7}
 800017e:	4770      	bx	lr
 8000180:	e000e100 	.word	0xe000e100

08000184 <delay>:
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "stm32f103xb.h"

void delay(){
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i < 250000; i++){}
 800018a:	2300      	movs	r3, #0
 800018c:	607b      	str	r3, [r7, #4]
 800018e:	e002      	b.n	8000196 <delay+0x12>
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	3301      	adds	r3, #1
 8000194:	607b      	str	r3, [r7, #4]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	4a04      	ldr	r2, [pc, #16]	; (80001ac <delay+0x28>)
 800019a:	4293      	cmp	r3, r2
 800019c:	d9f8      	bls.n	8000190 <delay+0xc>
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	0003d08f 	.word	0x0003d08f

080001b0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0

	for (int f = 0; f < 3; f++){
 80001b6:	2300      	movs	r3, #0
 80001b8:	607b      	str	r3, [r7, #4]
 80001ba:	e012      	b.n	80001e2 <EXTI0_IRQHandler+0x32>
		GPIOA->ODR |= GPIO_ODR_ODR1; //set PA1;
 80001bc:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <EXTI0_IRQHandler+0x4c>)
 80001be:	68db      	ldr	r3, [r3, #12]
 80001c0:	4a0e      	ldr	r2, [pc, #56]	; (80001fc <EXTI0_IRQHandler+0x4c>)
 80001c2:	f043 0302 	orr.w	r3, r3, #2
 80001c6:	60d3      	str	r3, [r2, #12]
		delay(); // delay 1s
 80001c8:	f7ff ffdc 	bl	8000184 <delay>
		GPIOA->ODR &= ~GPIO_ODR_ODR1; //reset PA1;
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <EXTI0_IRQHandler+0x4c>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <EXTI0_IRQHandler+0x4c>)
 80001d2:	f023 0302 	bic.w	r3, r3, #2
 80001d6:	60d3      	str	r3, [r2, #12]
		delay(); // delay 1s
 80001d8:	f7ff ffd4 	bl	8000184 <delay>
	for (int f = 0; f < 3; f++){
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	3301      	adds	r3, #1
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	dde9      	ble.n	80001bc <EXTI0_IRQHandler+0xc>
	}
	EXTI->PR |= EXTI_PR_PR0; // SET FLAG FOR EXITING FROM INTERRRUPT
 80001e8:	4b05      	ldr	r3, [pc, #20]	; (8000200 <EXTI0_IRQHandler+0x50>)
 80001ea:	695b      	ldr	r3, [r3, #20]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <EXTI0_IRQHandler+0x50>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6153      	str	r3, [r2, #20]
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010400 	.word	0x40010400

08000204 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	GPIOA->ODR |= GPIO_ODR_ODR1; //set PA1;
 8000208:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <EXTI1_IRQHandler+0x34>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	4a0a      	ldr	r2, [pc, #40]	; (8000238 <EXTI1_IRQHandler+0x34>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	60d3      	str	r3, [r2, #12]
	delay(); // delay 1s
 8000214:	f7ff ffb6 	bl	8000184 <delay>
	GPIOA->ODR &= ~GPIO_ODR_ODR1; //reset PA1;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <EXTI1_IRQHandler+0x34>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <EXTI1_IRQHandler+0x34>)
 800021e:	f023 0302 	bic.w	r3, r3, #2
 8000222:	60d3      	str	r3, [r2, #12]
	delay(); // delay 1s
 8000224:	f7ff ffae 	bl	8000184 <delay>
	EXTI->PR |= EXTI_PR_PR1; // SET FLAG FOR EXITING FROM INTERRRUPT
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <EXTI1_IRQHandler+0x38>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4a03      	ldr	r2, [pc, #12]	; (800023c <EXTI1_IRQHandler+0x38>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6153      	str	r3, [r2, #20]
}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40010800 	.word	0x40010800
 800023c:	40010400 	.word	0x40010400

08000240 <main>:

int main(){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	// setup RCC
	RCC->CR |= RCC_CR_HSEON; // turn on ext. clock
 8000244:	4b37      	ldr	r3, [pc, #220]	; (8000324 <main+0xe4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a36      	ldr	r2, [pc, #216]	; (8000324 <main+0xe4>)
 800024a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800024e:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // turn on clock on port A
 8000250:	4b34      	ldr	r3, [pc, #208]	; (8000324 <main+0xe4>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a33      	ldr	r2, [pc, #204]	; (8000324 <main+0xe4>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;  // turn on clock on port B
 800025c:	4b31      	ldr	r3, [pc, #196]	; (8000324 <main+0xe4>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a30      	ldr	r2, [pc, #192]	; (8000324 <main+0xe4>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; // turn on clock on alternative funcs (interrupts)
 8000268:	4b2e      	ldr	r3, [pc, #184]	; (8000324 <main+0xe4>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a2d      	ldr	r2, [pc, #180]	; (8000324 <main+0xe4>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6193      	str	r3, [r2, #24]

	// PA0, PA1 to output
	GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0 | GPIO_CRL_MODE1 | GPIO_CRL_CNF1); //reset PA0, PA1
 8000274:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <main+0xe8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a2b      	ldr	r2, [pc, #172]	; (8000328 <main+0xe8>)
 800027a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800027e:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= GPIO_CRL_MODE0_1; //PA0 to output with max speed 2MHz
 8000280:	4b29      	ldr	r3, [pc, #164]	; (8000328 <main+0xe8>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a28      	ldr	r2, [pc, #160]	; (8000328 <main+0xe8>)
 8000286:	f043 0302 	orr.w	r3, r3, #2
 800028a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE1_1; //PA1 to output with max speed 2MHz
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <main+0xe8>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a25      	ldr	r2, [pc, #148]	; (8000328 <main+0xe8>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6013      	str	r3, [r2, #0]

	GPIOA->ODR |= GPIO_ODR_ODR0; // PA0 to HIGH
 8000298:	4b23      	ldr	r3, [pc, #140]	; (8000328 <main+0xe8>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a22      	ldr	r2, [pc, #136]	; (8000328 <main+0xe8>)
 800029e:	f043 0301 	orr.w	r3, r3, #1
 80002a2:	60d3      	str	r3, [r2, #12]

	// PB0, PB1 to input

	GPIOB->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0 | GPIO_CRL_MODE1 | GPIO_CRL_CNF1); //reset PB0, PB1
 80002a4:	4b21      	ldr	r3, [pc, #132]	; (800032c <main+0xec>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a20      	ldr	r2, [pc, #128]	; (800032c <main+0xec>)
 80002aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002ae:	6013      	str	r3, [r2, #0]

	GPIOB->CRL |= GPIO_CRL_CNF0_0; //PA0 to input floating
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <main+0xec>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a1d      	ldr	r2, [pc, #116]	; (800032c <main+0xec>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF1_0; //PA1 to input floating
 80002bc:	4b1b      	ldr	r3, [pc, #108]	; (800032c <main+0xec>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a1a      	ldr	r2, [pc, #104]	; (800032c <main+0xec>)
 80002c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002c6:	6013      	str	r3, [r2, #0]

	// setup EXTI (interrupts)
	// setup pins for interrupts
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI0_PB; // PB0
 80002c8:	4b19      	ldr	r3, [pc, #100]	; (8000330 <main+0xf0>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <main+0xf0>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6093      	str	r3, [r2, #8]
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI1_PB; // PB1
 80002d4:	4b16      	ldr	r3, [pc, #88]	; (8000330 <main+0xf0>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	4a15      	ldr	r2, [pc, #84]	; (8000330 <main+0xf0>)
 80002da:	f043 0310 	orr.w	r3, r3, #16
 80002de:	6093      	str	r3, [r2, #8]

	//enable EXTI
	EXTI->IMR |= EXTI_IMR_MR0; // EXTI0
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0xf4>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a13      	ldr	r2, [pc, #76]	; (8000334 <main+0xf4>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_MR1; // EXTI1
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <main+0xf4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a10      	ldr	r2, [pc, #64]	; (8000334 <main+0xf4>)
 80002f2:	f043 0302 	orr.w	r3, r3, #2
 80002f6:	6013      	str	r3, [r2, #0]

	// select interrupts fronts
	EXTI->FTSR |= EXTI_FTSR_TR0; // EXTI0 -> FALLING
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <main+0xf4>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <main+0xf4>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_FTSR_TR1; // EXTI1 -> FALLING
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0xf4>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <main+0xf4>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	60d3      	str	r3, [r2, #12]

	// turn on interrupts handlers
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000310:	2006      	movs	r0, #6
 8000312:	f7ff ff1b 	bl	800014c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000316:	2007      	movs	r0, #7
 8000318:	f7ff ff18 	bl	800014c <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800031c:	b662      	cpsie	i
}
 800031e:	bf00      	nop

	// turn on interrupts
	__enable_irq();

	while (1){
 8000320:	e7fe      	b.n	8000320 <main+0xe0>
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	40010800 	.word	0x40010800
 800032c:	40010c00 	.word	0x40010c00
 8000330:	40010000 	.word	0x40010000
 8000334:	40010400 	.word	0x40010400

08000338 <Reset_Handler>:

/* Call the clock system initialization function.*/
  //  bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800033a:	490c      	ldr	r1, [pc, #48]	; (800036c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800033c:	4a0c      	ldr	r2, [pc, #48]	; (8000370 <LoopFillZerobss+0x16>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a09      	ldr	r2, [pc, #36]	; (8000374 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000350:	4c09      	ldr	r4, [pc, #36]	; (8000378 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800035e:	f000 f80f 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff6d 	bl	8000240 <main>
  bx lr
 8000366:	4770      	bx	lr
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	2000001c 	.word	0x2000001c

0800037c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC1_2_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	2600      	movs	r6, #0
 8000384:	4d0c      	ldr	r5, [pc, #48]	; (80003b8 <__libc_init_array+0x38>)
 8000386:	4c0d      	ldr	r4, [pc, #52]	; (80003bc <__libc_init_array+0x3c>)
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	f000 f81a 	bl	80003c8 <_init>
 8000394:	2600      	movs	r6, #0
 8000396:	4d0a      	ldr	r5, [pc, #40]	; (80003c0 <__libc_init_array+0x40>)
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <__libc_init_array+0x44>)
 800039a:	1b64      	subs	r4, r4, r5
 800039c:	10a4      	asrs	r4, r4, #2
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

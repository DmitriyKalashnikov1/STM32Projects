
BlinkCMSIS_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000017c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000288  08000290  00010290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000288  08000288  00010290  2**0
                  CONTENTS
  4 .ARM          00000000  08000288  08000288  00010290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000288  08000290  00010290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000288  08000288  00010288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800028c  0800028c  0001028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000290  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000290  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000020c  00000000  00000000  000102b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000e1  00000000  00000000  000104c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  000105a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  000105f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe44  00000000  00000000  00010630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004f4  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053c2d  00000000  00000000  00020968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00074595  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  000745e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000270 	.word	0x08000270

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000270 	.word	0x08000270

0800014c <delay>:
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "stm32f103xb.h"

void delay(){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i < 250000; i++){}
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e002      	b.n	800015e <delay+0x12>
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	3301      	adds	r3, #1
 800015c:	607b      	str	r3, [r7, #4]
 800015e:	687b      	ldr	r3, [r7, #4]
 8000160:	4a04      	ldr	r2, [pc, #16]	; (8000174 <delay+0x28>)
 8000162:	4293      	cmp	r3, r2
 8000164:	d9f8      	bls.n	8000158 <delay+0xc>
}
 8000166:	bf00      	nop
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	0003d08f 	.word	0x0003d08f

08000178 <main>:

int main(){
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON; // turn on ext. clock
 800017c:	4b16      	ldr	r3, [pc, #88]	; (80001d8 <main+0x60>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a15      	ldr	r2, [pc, #84]	; (80001d8 <main+0x60>)
 8000182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000186:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;  // turn on clock on port A
 8000188:	4b13      	ldr	r3, [pc, #76]	; (80001d8 <main+0x60>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a12      	ldr	r2, [pc, #72]	; (80001d8 <main+0x60>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]

	GPIOA->CRL &= ~(GPIO_CRL_MODE0 | GPIO_CRL_CNF0 | GPIO_CRL_MODE1 | GPIO_CRL_CNF1); //reset PA0, PA1
 8000194:	4b11      	ldr	r3, [pc, #68]	; (80001dc <main+0x64>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a10      	ldr	r2, [pc, #64]	; (80001dc <main+0x64>)
 800019a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800019e:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= GPIO_CRL_MODE0_1; //PA0 to output with max speed 2MHz
 80001a0:	4b0e      	ldr	r3, [pc, #56]	; (80001dc <main+0x64>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a0d      	ldr	r2, [pc, #52]	; (80001dc <main+0x64>)
 80001a6:	f043 0302 	orr.w	r3, r3, #2
 80001aa:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE1_1; //PA1 to output with max speed 2MHz
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <main+0x64>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a0a      	ldr	r2, [pc, #40]	; (80001dc <main+0x64>)
 80001b2:	f043 0320 	orr.w	r3, r3, #32
 80001b6:	6013      	str	r3, [r2, #0]

	GPIOA->ODR |= GPIO_ODR_ODR0; // PA0 to HIGH
 80001b8:	4b08      	ldr	r3, [pc, #32]	; (80001dc <main+0x64>)
 80001ba:	68db      	ldr	r3, [r3, #12]
 80001bc:	4a07      	ldr	r2, [pc, #28]	; (80001dc <main+0x64>)
 80001be:	f043 0301 	orr.w	r3, r3, #1
 80001c2:	60d3      	str	r3, [r2, #12]

	while (1){
		GPIOA->ODR ^= GPIO_ODR_ODR1; //Invert state of PA1;
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <main+0x64>)
 80001c6:	68db      	ldr	r3, [r3, #12]
 80001c8:	4a04      	ldr	r2, [pc, #16]	; (80001dc <main+0x64>)
 80001ca:	f083 0302 	eor.w	r3, r3, #2
 80001ce:	60d3      	str	r3, [r2, #12]
		delay(); // delay 1s
 80001d0:	f7ff ffbc 	bl	800014c <delay>
		GPIOA->ODR ^= GPIO_ODR_ODR1; //Invert state of PA1;
 80001d4:	e7f6      	b.n	80001c4 <main+0x4c>
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40010800 	.word	0x40010800

080001e0 <Reset_Handler>:

/* Call the clock system initialization function.*/
   // bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e0:	480b      	ldr	r0, [pc, #44]	; (8000210 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001e2:	490c      	ldr	r1, [pc, #48]	; (8000214 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001e4:	4a0c      	ldr	r2, [pc, #48]	; (8000218 <LoopFillZerobss+0x16>)
  movs r3, #0
 80001e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e8:	e002      	b.n	80001f0 <LoopCopyDataInit>

080001ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ee:	3304      	adds	r3, #4

080001f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f4:	d3f9      	bcc.n	80001ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f6:	4a09      	ldr	r2, [pc, #36]	; (800021c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001f8:	4c09      	ldr	r4, [pc, #36]	; (8000220 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001fc:	e001      	b.n	8000202 <LoopFillZerobss>

080001fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000200:	3204      	adds	r2, #4

08000202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000204:	d3fb      	bcc.n	80001fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000206:	f000 f80f 	bl	8000228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020a:	f7ff ffb5 	bl	8000178 <main>
  bx lr
 800020e:	4770      	bx	lr
  ldr r0, =_sdata
 8000210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000214:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000218:	08000290 	.word	0x08000290
  ldr r2, =_sbss
 800021c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000220:	2000001c 	.word	0x2000001c

08000224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC1_2_IRQHandler>
	...

08000228 <__libc_init_array>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	2600      	movs	r6, #0
 800022c:	4d0c      	ldr	r5, [pc, #48]	; (8000260 <__libc_init_array+0x38>)
 800022e:	4c0d      	ldr	r4, [pc, #52]	; (8000264 <__libc_init_array+0x3c>)
 8000230:	1b64      	subs	r4, r4, r5
 8000232:	10a4      	asrs	r4, r4, #2
 8000234:	42a6      	cmp	r6, r4
 8000236:	d109      	bne.n	800024c <__libc_init_array+0x24>
 8000238:	f000 f81a 	bl	8000270 <_init>
 800023c:	2600      	movs	r6, #0
 800023e:	4d0a      	ldr	r5, [pc, #40]	; (8000268 <__libc_init_array+0x40>)
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <__libc_init_array+0x44>)
 8000242:	1b64      	subs	r4, r4, r5
 8000244:	10a4      	asrs	r4, r4, #2
 8000246:	42a6      	cmp	r6, r4
 8000248:	d105      	bne.n	8000256 <__libc_init_array+0x2e>
 800024a:	bd70      	pop	{r4, r5, r6, pc}
 800024c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000250:	4798      	blx	r3
 8000252:	3601      	adds	r6, #1
 8000254:	e7ee      	b.n	8000234 <__libc_init_array+0xc>
 8000256:	f855 3b04 	ldr.w	r3, [r5], #4
 800025a:	4798      	blx	r3
 800025c:	3601      	adds	r6, #1
 800025e:	e7f2      	b.n	8000246 <__libc_init_array+0x1e>
 8000260:	08000288 	.word	0x08000288
 8000264:	08000288 	.word	0x08000288
 8000268:	08000288 	.word	0x08000288
 800026c:	0800028c 	.word	0x0800028c

08000270 <_init>:
 8000270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000272:	bf00      	nop
 8000274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000276:	bc08      	pop	{r3}
 8000278:	469e      	mov	lr, r3
 800027a:	4770      	bx	lr

0800027c <_fini>:
 800027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800027e:	bf00      	nop
 8000280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000282:	bc08      	pop	{r3}
 8000284:	469e      	mov	lr, r3
 8000286:	4770      	bx	lr
